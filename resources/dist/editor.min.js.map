{"version":3,"sources":["editor-objects/Area.js","editor-objects/Console.js","editor-objects/Definition.js","editor-objects/Editor.js","editor-objects/Layer.js","editor-objects/Parameter.js","editor-objects/Plate.js","editor-objects/Result.js","editor-objects/ResultManager.js","editor-objects/TypeMap.js","editor-objects/Well.js"],"names":["Area","[object Object]","I","this","Name","Color","Type","Replicates","Direction","Priority","Custom","Definition","undefined","MaxRange","DefInfo","Tags","rangeInfo","a","l","w","length","push","Layer","Wells","index","findIndex","t","Index","well","filter","id","ID","input","range","rangeOptions","rangeCustom","title","Edit","Controls","LinkCtrl","new","Default","Label","Title","Chain","Last","NewLine","Preserve","List","Change","v","GetId","style","display","Object","values","RangeControls","forEach","c","init","Value","Min","Max","target","insertAdjacentHTML","lastChild","nodeName","remove","setValue","type","d","p","buttons","Icon","Space","Click","Ok","Another","Form","close","open","HTML","Buttons","onInit","disable","change","focus","item","out","RangeIndex","OutputName","Promise","resolve","Other","arrow","tags","Well","save","JSON","stringify","areas","html","i","reduce","b","table","areaData","plate","plateData","targetArea","addRow","map","TypeMap","lay","Layers","targetWell","log","updateRange","r","temp","Row","Col","WellSize","WellMargin","def","array","Array","Editor","Plate","Rows","Cols","fill","here","pos","neg","taggedWells","o","W","Conc","C","P","N","Count","ranges","count","Values","taggedWellsRangeIndex","A","R","Tables","Areas","HasDefinition","wells","concs","test","ByName","includes","dose","name","n","j","parts","toTest","position","stop","goOn","currentPosition","splice","sort","acc","val","concat","Tagged","total","size","margin","ctx","Contents","getContext","content","Math","max","setPriority","floor","update","Map","unlog","EditorConsole","MaxLog","CurrentLog","gravity","message","icon","me","innerHTML","Date","toLocaleTimeString","Gravity","Message","Reset","scrollTo","top","scrollHeight","behavior","window","children","data","Input","Parser","Source","Mapping","Mapper","PlateIndex","anchors","NavBar","Lookup","previewPlate","bind","PlatesID","rangePreview","previewArea","doPreview","scan","Log","Preview","Column","definition","then","Error","Selected","LimitReached","Items","Limit","rangeTable","mapping","BackToImport","Validate","Done","Parameters","RespTable","Fields","Headers","RowNumbers","NoControls","onSelect","Size","sel","Form_Import","Single","OnClose","alert","removeDefinition","Pairing","updateAll","ResultManager","Anchors","preview","plateIndex","Reporter","printable","factor","args","Factor","AreaName","RangeIndexBase0","FindAll","find","modeWellPlate","plateDefinition","Tag","O","plateNb","ceil","updateList","getValue","getAsPlate","alphabet","color","value","Root","pixelRatio","menuRoot","mainRoot","popupRoot","Menu","AreaOptions","Results","Layout","DRC","Analysis","Main","Popup","Select","Data","ResolvedName","TabControl","Multiple","Stack","Tabs","Active","Content","FullWidth","onDelete","deleteArea","deleteResult","newSelect","oldSelect","newIndices","oldIndices","Validated","draw","onUpdate","Report","Lock","Strict","strictMode","Concentration","Unit","ControlLeft","list","Doses","Rep","Operator","Result","Console","prepend","buttonBar","newPlate","append","load","warn","reset","previousSibling","definitions","editArea","newArea","untagAllArea","untagArea","tagArea","resetConc","untagConc","tagConc","drc","button","tagDRC","newResult","editResult","pairing","pushLayout","that","Silent","msg","reject","empty","idArea","idConc","RadioArea","RadioConc","resize","closeAll","jumpTo","KeepArea","KeepConc","hasArea","download","DataType","FileName","FileCtrl","Accept","files","reader","FileReader","onload","e","loadPreview","result","readAsText","loadedData","parse","error","idPlate","idAreas","loadData","form","CSSCOLORS","fetch","Length","addArea","hasElement","rep","dir","priority","custom","rename","lock","strict","Cancel","untag","Untag","removeTags","bool","conflicts","getConflicts","highlightConflicts","getRanges","formEdit","S","op","replace","results","mapParameters","selected","zFactor","aggregate","grouped","controls","getControls","getAreas","conc","getConc","Highlight","Grid","root","getAsJPGControl","getAsHTMLControl","fontWeight","fontSize","canvas","document","createElement","height","width","fillStyle","fillRect","drawImage","href","toDataURL","output","getAsHTML","all","Promises","span","rows","cells","hasAttributes","resolved","setAttribute","getAttribute","coll","getElementsByClassName","k","bgColor","font","symbolForValue","valueForType","promises","digit","Digit","oldRows","oldCols","clientX","clientY","layerX","layerY","preventDefault","source","targetTouches","changedTouches","getBoundingClientRect","x","y","exportControls","bindEvents","timeOut","down","touches","coords","getCoords","wellAtPointer","ctrlKey","Options","AddToSel","resetSelection","select","Start","up","Stop","highlight","clearTimeout","infoPopup","move","popup","left","Highlighting","setTimeout","Selecting","Move","addEventListener","passive","G","h","div","hl","clearRect","Image","setTransform","Margin","tag","Duplicate","Keep","min","log10","Infinity","colors","heatmap","nextElementSibling","eval","changeDigit","Parameter","unit","Numeric","GlobalMin","GlobalMax","Local","cur","isNaN","space","lineWidth","strokeStyle","row","col","beginPath","moveTo","lineTo","stroke","Gradcolors","textAlign","textBaseline","fillText","appendChild","LayerSelect","Selection","LayerTab","KeepSelected","Digits","concMap","Header","LastKey","rootHTML","AfterDelete","deleteLayer","shadowColor","shadowBlur","globalAlpha","setLineDash","addLayer","NoPrompt","Ranges","control","z","zoom","typeMap","plateMap","s","grid","newLayer","addTab","SetActive","layerUpdate","tab","L","setIndex","offset","zoomChange","styleCtx","strokeRect","header","todo","H","drawHighlight","arc","PI","startSelection","Includes","Box","moveSelection","unselect","B","zIndex","cloneNode","parentElement","LastVisited","drawWellsInLasso","start","startRow","startCol","spanRow","abs","spanCol","hor","ver","pop","show","fetchRangeItem","formPlate","nextSibling","SelectedRows","ParamSelected","Info","updateParameters","get","import","numeric","m","paramIndex","PlateSelect","getValues","cleanValues","getMinMax","extremumObject","grad","gradColors","cleanValue","GradColors","txt","param","rowLimit","aborted","stream","parser","parseIndex","layoutData","abort","Aborted","Map_ResultTable","Map_Parameters","ResultTab","Heatmap","HeatmapOptions","Extremums","ExtremumSource","action","Low","Medium","High","extremum","ext","hm","heatmapTemplates","opt","first","inputs","addResults","OnChange","Required","validate","clientHeight","setLinkedPlate","deleteParam","fetchRGB","report","lineCount","MinMax","round","updateMapping","current","template","HMtemplates","Number","attributes","low","high","Papa","unparse","delimiter","url","URL","createObjectURL","Blob","replaceButtons","revokeObjectURL","matrix","types","oldData","colorForValue","search","letters","match","digits","parseInt","rowIndex","charAt","resolvedDef","half","restore","checkCompatibility","Decimal","format"],"mappings":"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","file":"editor.min.js","sourcesContent":["//***************************************************\r\n// AREA object - Common object for samples & controls\r\n//***************************************************\r\nclass Area {\r\n\tconstructor(I) {\r\n\t\tthis.Name = I.Name;\r\n\t\tthis.Color = I.Color;\r\n\t\tthis.Type = I.Type;\r\n\t\tthis.Replicates = (I.Replicates || 1);\r\n\t\tthis.Direction = (I.Direction || \"Horizontal\");\r\n\t\tthis.Priority = (I.Priority || \"Row\");\r\n\t\tthis.Custom = I.Custom;\r\n\t\tthis.Definition = undefined;\r\n\t\tthis.MaxRange = 0;\r\n\t\tthis.DefInfo = \"none\";\r\n\t\tthis.Tags = []; //Wells tagged with this area, as an array of objects with Layer and Wells properties\r\n\t\tif(I.Type == \"Range\") {Area.rangeInfo(this)}\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic log(a, l, w) { //Log well w from layer l in area a\r\n\t\tlet size = a.Tags.length;\r\n\t\tif(size == 0) { //Simple case where the array is empty\r\n\t\t\ta.Tags.push({Layer: l, Wells: [w]});\r\n\t\t}\r\n\t\telse { //Array already has some elements, scan to see if the layer is found\r\n\t\t\tlet index = a.Tags.findIndex(function(t) {return t.Layer.Index == l.Index});\r\n//*******************************************************************************\r\n//Since duplicate tagging on a same layer is removed initially at the well level,\r\n//there is no problem here pushing directly the well without confirmation\r\n\t\t\tif(index > -1) {a.Tags[index].Wells.push(w)} //Layer found, merge\r\n//*******************************************************************************\r\n\t\t\telse { //Layer not found, create a new entry\r\n\t\t\t\ta.Tags.push({Layer: l, Wells: [w]});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tstatic unlog(a, l, well) { //Unlog well w from layer l in area a\r\n\t\tlet index = a.Tags.findIndex(function(t) {return t.Layer.Index == l.Index});\r\n\t\tif(index > -1) { //Layer found, remove well w\r\n\t\t\ta.Tags[index].Wells = a.Tags[index].Wells.filter(function(w) {return w.Index != well.Index}); //Exclude the well to untag\r\n\t\t}\r\n\t}\r\n\tstatic form(I) { //Open a form to create or edit an area (Mode: create/edit), passing the necessary options\r\n\t\tlet id = I.ID;\r\n\t\tlet input = id + \"_Input\";\r\n\t\tlet range = id + \"_InputRange\";\r\n\t\tlet rangeOptions = id + \"_InputRange_Options\";\r\n\t\tlet rangeCustom = id + \"_InputRange_Custom\";\r\n\t\tlet title = \"New Area\";\r\n\t\tif(I.Edit) {title = \"Edit Area\"}\r\n\t\tlet Controls = {\r\n\t\t\tName: LinkCtrl.new(\"Text\", {ID: input, Default: \"\", Label: \"Name\", Title: \"The name of the area\", Chain: {Index: 0}}),\r\n\t\t\tColor: LinkCtrl.new(\"Color\", {ID: input, Default: I.Color, Label: \"Color\", Title: \"The color that will be used to represent this area\", Chain: {Index: 1, Last: true}, NewLine: true, }),\r\n\t\t\tType: LinkCtrl.new(\"Select\", {ID: input, Index: 2, Default: 2, Label: \"Type\", Title: \"The type of area to create\", Preserve: true, List: [\"Positive Control\", \"Negative Control\", \"Sample\", \"Range\"], Change: function(v) {\r\n\t\t\t\tif(v == 3) { //Display range options\r\n\t\t\t\t\tGetId(range).style.display = \"block\";\r\n\t\t\t\t\tObject.values(RangeControls).forEach(function(c) {c.init()});\r\n\t\t\t\t\tif(RangeControls.Custom.Value) {GetId(rangeOptions).style.display = \"none\"}\r\n\t\t\t\t\telse {GetId(rangeOptions).style.display = \"block\"}\r\n\t\t\t\t} \r\n\t\t\t\telse {GetId(range).style.display = \"none\"} //Hide range options\r\n\t\t\t}}),\r\n\t\t}\r\n\t\tlet RangeControls = { //Options for the ranges\r\n\t\t\tReplicates: LinkCtrl.new(\"Number\", {ID: rangeOptions, Index: 0, Default: 10, Label: \"Replicates\", Title: \"Number of replicates for the range. Should be between 1 and 1536\", NewLine: true, Min: 1, Max: 1536}),\r\n\t\t\tDirection: LinkCtrl.new(\"Radio\", {ID: rangeOptions, Index: 1, Default: 0, Label: \"Direction\", Title: \"Direction of the replicates\", NewLine: true, Preserve: true, List: [\"Horizontal\", \"Vertical\"]}),\r\n\t\t\tPriority: LinkCtrl.new(\"Radio\", {ID: rangeOptions, Index: 2, Default: 0, Label: \"Priority\", Title: \"Wether numbering should be done per rows or per cols\", NewLine: true, Preserve: true, List: [\"Row\", \"Col\"]}),\r\n\t\t\tCustom: LinkCtrl.new(\"Checkbox\", {ID: rangeCustom, Index: 3, Default: 0, Label: \"Custom\", Change: function(v) {\r\n\t\t\t\tlet target = GetId(rangeOptions);\r\n\t\t\t\tif(v == false) { //Warn if leaving custom mode\r\n\t\t\t\t\ttarget.style.display = \"block\";\r\n\t\t\t\t\ttarget.insertAdjacentHTML(\"beforeend\", \"<div class=\\\"Error\\\" style=\\\"padding: 5px; text-align: center\\\">When leaving custom mode, all exisiting custom numbering will be recomputed using the options specified above</div>\")\r\n\t\t\t\t} \r\n\t\t\t\telse {\r\n\t\t\t\t\tif(target.lastChild.nodeName == \"DIV\") {target.lastChild.remove()} //Remove the warning message if it exists\r\n\t\t\t\t\ttarget.style.display = \"none\";\r\n\t\t\t\t}\r\n\t\t\t}, Title: \"Tick to allow customized numbering after each tagging\"}),\r\n\t\t}\r\n\t\tif(I.Edit) { //Set controls to existing values for edition\r\n\t\t\tControls.Name.setValue(I.Area.Name);\r\n\t\t\tlet type = I.Area.Type;\r\n\t\t\tControls.Type.setValue(Controls.Type.List.findIndex(function(t) {return t == type}));\r\n\t\t\tif(type == \"Range\") {\r\n\t\t\t\tRangeControls.Replicates.setValue(I.Area.Replicates);\r\n\t\t\t\tRangeControls.Direction.setValue(RangeControls.Direction.List.findIndex(function(d) {return d == I.Area.Direction}));\r\n\t\t\t\tRangeControls.Priority.setValue(RangeControls.Priority.List.findIndex(function(p) {return p == I.Area.Priority}));\r\n\t\t\t\tRangeControls.Custom.setValue(I.Area.Custom);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet buttons = [{Label: \"Ok\", Icon: {Type: \"Ok\", Space: true, Color: \"Green\"}, Click: function() {I.Ok(Controls, RangeControls)}}];\r\n\t\tif(I.Edit === undefined) { //Creation mode, use this button to chain with another area creation\r\n\t\t\tbuttons.push({Label: \"Add another\", Icon: {Type: \"New\", Space: true}, Click: function() {I.Another(Controls, RangeControls)}});\r\n\t\t}\r\n\t\tbuttons.push({Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}});\r\n\t\tForm.open({ //Open the form\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<div id=\\\"\" + input + \"\\\"></div><fieldset id=\\\"\" + range + \"\\\" style=\\\"display: none; margin-top: 5px\\\"><legend>Numbering</legend><div id=\\\"\" + rangeOptions + \"\\\"></div><div id=\\\"\" + rangeCustom + \"\\\"></div></fieldset>\",\r\n\t\t\tTitle: title,\r\n\t\t\tButtons: buttons,\r\n\t\t\tonInit: function() { //Initialize the controls on open\r\n\t\t\t\tObject.values(Controls).forEach(function(c) {c.init()});\r\n\t\t\t\tif(I.Edit) {\r\n\t\t\t\t\tControls.Type.disable(); //Edition mode, type cannot be changed\r\n\t\t\t\t\tif(I.Area.Type == \"Range\") {Controls.Type.change(Controls.Type.Value)} //Trigger the change() method to display the range options\r\n\t\t\t\t}\r\n\t\t\t\tControls.Name.focus();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tstatic fetchRangeItem(a, w, I) { //Return a promise for the name to display for area a, using its definition if provided\r\n\t\tif(a.Definition) { //Use the definition if defined\r\n\t\t\treturn a.Definition.item(w); //Return a promise\r\n\t\t}\r\n\t\telse { //Use generic name\r\n\t\t\tlet out = \"#\" + w.RangeIndex;\r\n\t\t\tif(I && I.OutputName) {out = a.Name + \" (\" + out + \")\"}\r\n\t\t\treturn Promise.resolve(out); //Return a promise automatically fulfilled with the value\r\n\t\t}\r\n\t}\r\n\tstatic rangeInfo(range) { //Return a string of info for the range\r\n\t\tif(range.Custom) {range.Other = \"Custom\"}\r\n\t\telse {\r\n\t\t\tlet arrow = \"\";\r\n\t\t\tif(range.Direction == \"Horizontal\") {arrow = \", &rarr;\"}\r\n\t\t\telse {arrow = \", &darr;\"}\r\n\t\t\tif(range.Priority === undefined || range.Priority == \"Row\") {arrow += \"R\"} //The case undefined is for compatibility with legacy versions of saved area\r\n\t\t\telse {arrow += \"C\"}\r\n\t\t\trange.Other = range.Replicates + \"&times;\" + arrow;\r\n\t\t}\r\n\t\tif(range.MaxRange > 0) {range.Other += \"<br>\" + range.MaxRange + \" counts\"}\r\n\t}\r\n//SAVE & LOAD METHODS\r\n//******************************************************************************\r\n//References to files cannot be saved and exporting all their content would kill\r\n//the streaming purpose... For this reasons, the definitions and results are not\r\n//saved, only the layout...\r\n//******************************************************************************\r\n\tstatic save(a) { //Return a JSON.stringify version of the area object for saving\r\n\t\tlet tags = [];\r\n\t\ta.Tags.forEach(function(t) { //Tag object, containing the layer and the wells\r\n\t\t\tlet well = [];\r\n\t\t\tt.Wells.forEach(function(w) { //Keep only essential info from wells\r\n\t\t\t\twell.push(Well.save(w));\r\n\t\t\t});\r\n\t\t\ttags.push({Layer: t.Layer.Index, Wells: well});\r\n\t\t});\r\n\t\treturn JSON.stringify({\r\n\t\t\tName: a.Name,\r\n\t\t\tColor: a.Color,\r\n\t\t\tType: a.Type,\r\n\t\t\tReplicates: a.Replicates,\r\n\t\t\tDirection: a.Direction,\r\n\t\t\tPriority: a.Priority,\r\n\t\t\tCustom: a.Custom,\r\n\t\t\tTags: tags,\r\n\t\t});\r\n\t}\r\n\tstatic loadPreview(areas, id) { //Prepare a preview out of the loaded information from areas\r\n\t\tlet html = \"<table class=\\\"RespTable\\\"><tr><th>#</th><th>Name</th><th>Color</th><th>Type</th><th>Tags</th></tr>\";\r\n\t\tif(areas && areas.length > 0) {\r\n\t\t\tareas.forEach(function(a, i) {\r\n\t\t\t\thtml += \"<tr><td>\" + (i + 1) + \"</td><td>\" + a.Name + \"</td>\";\r\n\t\t\t\thtml += \"<td><span style=\\\"background-color: \" + a.Color + \"; border: 1px solid black\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span></td>\";\r\n\t\t\t\thtml += \"<td>\" + a.Type;\r\n\t\t\t\tif(a.Type == \"Range\") {Area.rangeInfo(a); html += \" (\" + a.Other + \")\"}\r\n\t\t\t\thtml += \"</td><td>\";\r\n\t\t\t\tif(a.Tags) {\r\n\t\t\t\t\t html += a.Tags.reduce(function(a, b) {return a + b.Wells.length}, 0)\r\n\t\t\t\t}\r\n\t\t\t\telse {html += 0}\r\n\t\t\t\thtml += \"</td></tr>\";\r\n\t\t\t});\r\n\t\t\thtml += \"</table>\";\r\n\t\t}\r\n\t\telse {html = \"<p class=\\\"Error\\\">No data</p>\"}\r\n\t\tGetId(id).insertAdjacentHTML(\"beforeend\", html);\r\n\t}\r\n\tstatic load(table, areaData, plate, plateData) { //Load the provided areas data in the provided plate and table\r\n\t\tareaData.forEach(function(a) { //For each area to load\r\n\t\t\tlet targetArea = undefined;\r\n\t\t\tif(a.Type == \"Range\") { //Create the object and log it in the table\r\n\t\t\t\ttargetArea = table.addRow(new Area({Name: a.Name, Color: a.Color, Type: a.Type, Replicates: a.Replicates, Direction: a.Direction, Priority: a.Priority, Custom: a.Custom}));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttargetArea = table.addRow(new Area({Name: a.Name, Color: a.Color, Type: a.Type}));\r\n\t\t\t}\r\n\t\t\tif(plateData) { //Do the tagging if plateData are available to load as well\r\n\t\t\t\tlet map = plate.TypeMap;\r\n\t\t\t\ta.Tags.forEach(function(t) { //Go throught the array of tag object\r\n\t\t\t\t\tlet lay = plate.Layers[t.Layer];\r\n\t\t\t\t\tt.Wells.forEach(function(w) { //Go through the wells for this layer\r\n\t\t\t\t\t\tlet targetWell = lay.Wells[w.Index]; //The well to tag\r\n\t\t\t\t\t\tif(targetWell) {\r\n\t\t\t\t\t\t\ttargetWell.Area = targetArea; //Tag with the area\r\n\t\t\t\t\t\t\tif(a.Type == \"Range\" && a.Custom) {targetWell.RangeIndex = w.RangeIndex}\r\n\t\t\t\t\t\t\tmap.log(w.Index, a.Type); //Log the type at this location\r\n\t\t\t\t\t\t\tArea.log(targetArea, lay, targetWell); //Log the well in the Area Tags\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\tif(a.Type == \"Range\") {plate.updateRange(targetArea)}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tstatic resize(areas, plate, r, c) { //Resize the selection of each area to fit within the new dimensions\r\n\t\tareas.forEach(function(a) { //For each area\r\n\t\t\ta.Tags.forEach(function(t) { //Go through the selection\r\n\t\t\t\tlet temp = [];\r\n\t\t\t\tt.Wells.forEach(function(w) {\r\n\t\t\t\t\tif(w.Row < r && w.Col < c) {temp.push(w)} //Push the well if it is within the new plate boundaries\r\n\t\t\t\t});\r\n\t\t\t\tt.Wells = temp; //Update the selection\r\n\t\t\t});\r\n\t\t\tif(a.Type == \"Range\") {a.updateRange(plate.WellSize, plate.WellMargin)} //Update range data\r\n\t\t});\r\n\t}\r\n\tstatic plateDefinition(a, def) { //For the area provided, return an array the size of the plate where each tagged well now contains the value of the definition, provided as an array\r\n\t\tlet array = Array(Editor.Plate.Rows * Editor.Plate.Cols).fill(\"\"); //Initialize the array with empty spaces\r\n\t\ta.Tags.forEach(function(t) { //Go through the tag objects\r\n\t\t\tt.Wells.forEach(function(w) { //For each well on the layer\r\n\t\t\t\tlet here = w.Index; //Get the location\r\n//**********************************************************************************************************************\r\n//For non-range area, there are no definitions and the rangeIndex always equal 1. So providing a dummy definition array,\r\n//for example [true, true] or [1, 1], allows the recovery of an array of tags that can be easily tested for truthy values\r\n\t\t\t\tif(array[here].length == 0) {array[here] = def[w.RangeIndex - 1]} //Append the definition\r\n\t\t\t\telse {array[here] += \" \" + def[w.RangeIndex - 1]} //In case the same well is tagged on two different layers, append the definitions together\r\n//**********************************************************************************************************************\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn array;\r\n\t}\r\n\tstatic getControls(array) { //For the array of area provided in input, returns only the controls as new objects for the reporter\r\n\t\tlet pos = [];\r\n\t\tlet neg = [];\r\n\t\tarray.forEach(function(a) { //Loop the areas\r\n\t\t\tif(a.Type == \"Positive Control\" || a.Type == \"Negative Control\") { //This is a control and should be exported\r\n\t\t\t\tlet tags = Area.taggedWells(a);\r\n\t\t\t\tlet o = {Name: a.Name, Tags: tags.W, Conc: tags.C} //Send a new object, so that the selection in the report window does not affect the selection here\r\n\t\t\t\tif(a.Type == \"Positive Control\") {pos.push(o)}\r\n\t\t\t\telse {neg.push(o)}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn {P: pos, N: neg, Count: pos.length + neg.length}\r\n\t}\r\n\tstatic getAreas(array) { //For the array of areas provided in input, returns the object needed by the reporter\r\n\t\tlet areas = []; //Array for the areas\r\n\t\tlet ranges = []; //For the ranges\r\n\t\tlet count = 0;\r\n\t\tarray.forEach(function(a) { //Loop the areas\r\n\t\t\tlet tags = Area.taggedWells(a); //Recover a flat array of tags across all layers\r\n\t\t\tif(a.Type == \"Range\") { //For ranges, explode them into subAreas, all corresponding to a unique rangeIndex\r\n\t\t\t\tranges.push({Name: a.Name, Tags: tags.W, Conc: tags.C, Type: a.Type, Definition: a.Definition, Values: Area.taggedWellsRangeIndex(a)});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tareas.push({Name: a.Name, Tags: tags.W, Conc: tags.C, Type: a.Type});\r\n\t\t\t}\r\n\t\t\tcount++;\r\n\t\t});\r\n\t\treturn {A: areas, R: ranges, Count: count}\r\n\t}\r\n\tstatic getRanges(I) { //Get and return the array of ranges available for this layout\r\n\t\tlet ranges = Editor.Tables.Areas.Array.filter(function(a) {return a.Type == \"Range\"}); //Filter the ranges\r\n\t\tif(I && I.HasDefinition) {\r\n\t\t\treturn ranges.filter(function(r) {return r.Definition}); //Get only ranges with definitions\r\n\t\t}\r\n\t\treturn ranges;\r\n\t}\r\n\tstatic taggedWells(a, I) { //Return a flat array containing the indices (or names) of wells containing this area, across all layers but without duplicates\r\n\t\tlet wells = [];\r\n\t\tlet concs = [];\r\n\t\ta.Tags.forEach(function(t) {\r\n\t\t\tt.Wells.forEach(function(w) {\r\n\t\t\t\tlet test = w.Index;\r\n\t\t\t\tif(I && I.ByName) {test = w.Name}\r\n\t\t\t\tif(wells.includes(test) == false) {wells.push(test); concs.push(Well.dose(w))} //Push only if new\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn {W: wells, C: concs}\r\n\t}\r\n\tstatic taggedWellsRangeIndex(a) { //return an array of object containing the tags for each individual rangeIndex of the range area\r\n\t\tlet out = [];\r\n\t\ta.Tags.forEach(function(t) {\r\n\t\t\tt.Wells.forEach(function(w) { //Loop through all the wells of the tags\r\n\t\t\t\tlet r = w.RangeIndex;\r\n\t\t\t\tlet index = r - 1; //RangeIndex are not 0-based\r\n\t\t\t\tlet name = a.Name + \" #\" + r; //The unique generic name for this rangeIndex\r\n\t\t\t\tif(out[index]) { //Update an existing entry\r\n\t\t\t\t\tif(out[index].Tags.includes(w.Index) == false) { //Add unique wells only\r\n\t\t\t\t\t\tout[index].Tags.push(w.Index);\r\n\t\t\t\t\t\tout[index].Conc.push(Well.dose(w));\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tout[index] = {Name: name, Type: \"Range\", RangeIndex: r, Tags: [w.Index], Conc: [Well.dose(w)], Value: r} //The Value field is added for consistency between objects sent to the analyzer\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn out;\r\n\t}\r\n\tstatic setPriority(wells, R, p) { //Reshuffle the array of wells to set the priority on Row or Col, as requested\r\n\t\tlet n = wells.length;\r\n\t\tlet j = 0;\r\n\t\tlet parts = []; //The wells array will be chopped down in smaller parts the size of the replicate (R), or up to the end of a Row/Col\r\n\t\tlet toTest = function(i) { //Defines what should be tested to decide how to chop the array\r\n\t\t\tif(wells[i]) {\r\n\t\t\t\tif(p == \"Col\") {return wells[i].Row}\r\n\t\t\t\telse {return wells[i].Col}\r\n\t\t\t}\r\n\t\t\treturn -1; //If the well is undefined (index goes out of range in the last fragment), returns a value that will always lead to a falsy test\r\n\t\t}\r\n\t\tlet position = toTest(0); //Get the row/Col of the first element to initiate the loop\r\n\t\twhile(j < n) { //Cut down the array of wells into arrays the size of the replicates, or up to the end of a Row/Col\r\n\t\t\tlet stop = 0;\r\n\t\t\tlet goOn = true;\r\n\t\t\twhile(stop < R && goOn) { //Advance in the array as long as the # of replicates or the end of the row/col is not reached\r\n\t\t\t\tlet currentPosition = toTest(stop); //Get the current position\r\n\t\t\t\tif(currentPosition != position) { //Stop there and redefine the position for the next pieces\r\n\t\t\t\t\tgoOn = false;\r\n\t\t\t\t\tposition = currentPosition;\r\n\t\t\t\t}\r\n\t\t\t\telse {stop++}\r\n\t\t\t}\r\n\t\t\tif(stop > 0) { //If the number of elements is an exact multiple of the replicates (no leftovers), then there is nothing more to extract and we should just move to the next row/col\r\n\t\t\t\tparts.push(wells.splice(0, stop)); //Add the fraction of array to the part array\r\n\t\t\t\tj += stop;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(p == \"Col\") {parts.sort(function(a, b) {return a[0].Col - b[0].Col})} //Sort the pieces according to the column index of the first element\r\n\t\telse {parts.sort(function(a, b) {return a[0].Row - b[0].Row})} //Sort the pieces according to the row index of the first element\r\n\t\treturn parts.reduce(function(acc, val) {return acc.concat(val)}, []); //Finally concat the pieces back all together\r\n\t}\r\n\t//Getters\r\n\tget Tagged() { //Return the total number of wells tagged for this area\r\n\t\tlet total = 0;\r\n\t\tthis.Tags.forEach(function(t) {\r\n\t\t\ttotal += t.Wells.length;\r\n\t\t});\r\n\t\treturn total;\r\n\t}\r\n\t//Methods\r\n\tupdate(size, margin) { //Update well contents\r\n\t\tif(this.Type == \"Range\") {this.updateRange(size, margin)} //Ranges are updated their own way\r\n\t\telse {\r\n\t\t\tthis.Tags.forEach(function(t) { //For each layer\r\n\t\t\t\tlet ctx = t.Layer.Contents.getContext(\"2d\");\r\n\t\t\t\tt.Wells.forEach(function(w) { //Update each well\r\n\t\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\tupdateRange(size, margin) { //Update range numbers and well contents\r\n\t\tlet i = 0;\r\n\t\tlet R = this.Replicates;\r\n\t\tlet range = 0;\r\n\t\tlet mode = (this.Direction + \" \" + this.Priority); //Four different ways to update the numbering\r\n\t\tthis.Tags.sort(function(a, b) {return a.Layer.Index - b.Layer.Index}); //Sort by layer, smallest to biggest\r\n\t\tthis.Tags.forEach(function(t) { //For each layer\r\n\t\t\tif(this.Custom) { //Gather the highest rangeIndex from all available tags\r\n\t\t\t\tt.Wells.forEach(function(w) {\r\n\t\t\t\t\trange = Math.max(range, w.RangeIndex);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(this.Direction == \"Horizontal\") {\r\n\t\t\t\t\tt.Wells.sort(function(a, b) {return a.Index - b.Index}); //Sort per well Index for pure horizontal mode\r\n\t\t\t\t\tif(R > 1 && this.Priority == \"Col\") {t.Wells = Area.setPriority(t.Wells, R, \"Col\")} //Need to reshuffle the array to prioritize columns; no need to bother in case there is only one replicate, priority will not affect the order\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tt.Wells.sort(function(a, b) {return ((a.Col - b.Col) || (a.Row - b.Row))});\r\n\t\t\t\t\tif(R > 1 && this.Priority == \"Row\") {t.Wells = Area.setPriority(t.Wells, R, \"Row\")} //Need reshuffling to prioritize the rows\r\n\t\t\t\t}\r\n\t\t\t\tlet ctx = t.Layer.Contents.getContext(\"2d\");\r\n\t\t\t\tt.Wells.forEach(function(w) { //Update each well. After sorting, simply apply the indices as they come\r\n\t\t\t\t\trange = Math.floor(i / R) + 1;\r\n\t\t\t\t\tw.RangeIndex = range;\r\n\t\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.MaxRange = range;\r\n\t\tif(this.Definition) {this.Definition.update()} //Update definition data if needed\r\n\t\tArea.rangeInfo(this);\r\n\t\treturn this;\r\n\t}\r\n\tremoveTags(plate) { //Remove the tags for this area\r\n\t\tlet map = plate.Map;\r\n\t\tlet size = plate.WellSize;\r\n\t\tlet margin = plate.WellMargin;\r\n\t\tthis.Tags.forEach(function(o) { //For each object defined in the tag array\r\n\t\t\tlet ctx = o.Layer.Contents.getContext(\"2d\"); //Retrieve the context for the layer\r\n\t\t\tlet index = o.Layer.Index; //Index of the layer\r\n\t\t\to.Wells.forEach(function(w) { //For each tagged wells on this layer\r\n\t\t\t\tplate.TypeMap.unlog(w.Index, index); //Update the map of types\r\n\t\t\t\tw.Area = undefined; //Remove the tag\r\n\t\t\t\tw.content(ctx, size, margin); //Redraw the content\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tremoveDefinition() { //Remove the definition for this area\r\n\t\tthis.Definition = undefined;\r\n\t\tthis.DefInfo = \"none\";\r\n\t\treturn this;\r\n\t}\r\n}","//******************************************************************\r\n//CONSOLE Object - For feedback and status notifications to the user\r\n//******************************************************************\r\nclass EditorConsole {\r\n\tconstructor(id) {\r\n\t\tthis.ID = id;\r\n\t\tthis.MaxLog = 20; //Max number of messages to log\r\n\t\tthis.CurrentLog = 0; //Current nb of logged messages\r\n\t\treturn this;\r\n\t}\r\n\tstatic message(gravity, message) { //Return the message matching the gravity \r\n\t\t//let html = \"<span style=\\\"color:\";\r\n\t\tlet html = \"\";\r\n\t\tswitch(gravity) {\r\n\t\t\tcase \"Error\": html += LinkCtrl.icon({Type: \"Cancel\", Color: \"Red\"}) + \"<span style=\\\"color: firebrick\\\">\"; break; //<span class=\\\"ConsoleIcon\\\" style=\\\"background-position: 0px -144px; filter: sepia(100%) saturate(1500%)\\\"></span> \";\r\n\t\t\tcase \"Warning\": html += LinkCtrl.icon({Type: \"Warning\", Color: \"Yellow\"}) + \"<span style=\\\"color: sienna\\\">\"; break; //<span class=\\\"ConsoleIcon\\\" style=\\\"background-position: -16px -144px; filter: sepia(100%) saturate(500%)\\\"></span> \";\r\n\t\t\tcase \"Success\": html += LinkCtrl.icon({Type: \"Ok\", Color: \"Green\"}) + \"<span style=\\\"color: darkgreen\\\">\"; break; //<span class=\\\"ConsoleIcon\\\" style=\\\"background-position: -64px -144px; filter: sepia(100%) saturate(2000%) hue-rotate(100deg)\\\"></span> \";\r\n\t\t\tdefault: break;\r\n\t\t}\r\n\t\thtml += message + \"</span>\";\r\n\t\treturn html;\r\n\t}\r\n\t//Methods\r\n\tlog(I) { //Log message I in the console\r\n\t\tlet me = GetId(this.ID);\r\n\t\tlet html = \"\";\r\n\t\tif(this.CurrentLog == 0) {me.innerHTML = \"\"}\r\n\t\thtml += \"<div>\" + new Date().toLocaleTimeString() + \": \" + EditorConsole.message(I.Gravity, I.Message) + \"</div>\";\r\n\t\tthis.CurrentLog++;\r\n\t\tif(I.Reset) {me.innerHTML = html}\r\n\t\telse {me.insertAdjacentHTML(\"beforeend\", html)}\r\n\t\tme.scrollTo({top: me.scrollHeight, behavior: \"smooth\"});\r\n\t\tif(I.Gravity != \"Success\") {window.scrollTo({top: 0, behavior: \"smooth\"})}\r\n\t\tif(this.CurrentLog > this.MaxLog) {me.children[0].remove()}\r\n\t}\r\n\treset() { //Reset all the messages\r\n\t\tlet me = GetId(this.ID);\r\n\t\tme.innerHTML = \"\";\r\n\t}\r\n}","//**********************************************************************************************\r\n// DEFINITION object - Attached to an area, define names for each index using an external source\r\n//**********************************************************************************************\r\nclass Definition {\r\n\tconstructor(a, data) {\r\n\t\tthis.Area = a;\r\n\t\tthis.Input = data;\r\n\t\tthis.Parser = data.Parser;\r\n\t\tthis.Source = data.Source;\r\n\t\tthis.Mapping = data.Mapping;\r\n\t\tthis.Mapper = Mapper.new(data.Mapping); //Create the mapper object\r\n\t\tthis.PlateIndex = LinkCtrl.new(\"Select\", {ID: Definition.anchors(\"PlateIndex\"), Default: 0, List: [1], NavBar: true, Lookup: true, Label: \"Plate\", Title: \"The plate that will be used for the display of definitions\", Change: function(v) {this.previewPlate(v)}.bind(this)});\r\n\t\tthis.PlatesID == undefined; //Array of ID for the plates within this definition\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic anchors(here) { //Return the text for the anchors requested\r\n\t\tlet id = \"Definition\";\r\n\t\tswitch(here) {\r\n\t\t\tcase \"RangeTable\": return id + \"_RangeTable\";\r\n\t\t\tcase \"PlateIndex\": return id + \"_PlateIndex\";\r\n\t\t\tcase \"Preview\": return id + \"_Preview\";\r\n\t\t\tdefault: return id;\r\n\t\t}\r\n\t}\r\n\tstatic formEdit(ranges) { //Open a form for manipulation of definitions for each ranges available\r\n\t\tvar table = this.anchors(\"RangeTable\");\r\n\t\tvar rangePreview = this.anchors(\"Preview\");\r\n\t\tvar previewArea = LinkCtrl.new(\"TextArea\", {ID: rangePreview, Preserve: true, Default: \"\"});\r\n\t\tvar doPreview = function(a) { //Function to render the preview for area a\r\n\t\t\tpreviewArea.setValue(\"Preparing preview, please wait...\");\r\n\t\t\tlet d = a.Definition;\r\n\t\t\tMapper.scan(d, {Log: true, Preview: {Column: Mapper.definition().Name}}).then(function(out) {\r\n\t\t\t\tif(out.Error) {\r\n\t\t\t\t\tif(a.Selected) {previewArea.setValue(out.Error)} //Print it when done, if this area is still selected\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td.update(out); //Update definition information based on scan output\r\n\t\t\t\t\tif(a.Selected) { //Print it when done, if this area is still selected\r\n\t\t\t\t\t\tif(out.LimitReached) {out.Preview += \"\\n... (\" + (d.Items - out.Limit) + \" items remaining)\"}\r\n\t\t\t\t\t\tpreviewArea.setValue(out.Preview);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\trangeTable.update();\r\n\t\t\t});\r\n\t\t}\r\n\t\tvar mapping = function(a, data, BackToImport) { //Function to run the mapping for area a with the data provided\r\n\t\t\tMapper.map(data, {Validate: true, BackToImport: BackToImport,\r\n\t\t\t\tDone: function() {\r\n\t\t\t\t\ta.Definition = new Definition(a, data[0]);\r\n\t\t\t\t\tdoPreview(a);\r\n\t\t\t\t}, Parameters: [\r\n\t\t\t\t\tMapper.definition(), //Mandatory\r\n\t\t\t\t\tMapper.well(), //Optional\r\n\t\t\t\t\tMapper.plate(), //Optional\r\n\t\t\t\t], \r\n\t\t\t});\r\n\t\t}\r\n\t\tvar rangeTable = new RespTable({\r\n\t\t\tID: table,\r\n\t\t\tArray: ranges,\r\n\t\t\tFields: [\"Name\", \"Other\", \"DefInfo\"], Headers: [\"Name\", \"Properties\", \"Definition\"],\r\n\t\t\tPreserve: true, RowNumbers: true, NoControls: true,\r\n\t\t\tonSelect: function(array) {\r\n\t\t\t\tif(array.length > 0) {doPreview(array[0])}\r\n\t\t\t}\r\n\t\t});\r\n\t\tlet html = \"\"; //Prepare the html for the form\r\n\t\thtml += \"<div id=\\\"\" + table + \"\\\" style=\\\"float: left; width:250px\\\"><p><b>Ranges available:</b></p></div>\";\r\n\t\thtml += \"<div style=\\\"margin-left: 270px\\\">\";\r\n\t\t\thtml += \"<p><b>Definition preview:</b></p>\";\r\n\t\t\thtml += \"<div id=\\\"\" + rangePreview + \"\\\"></div>\"; \r\n\t\thtml += \"</div>\";\r\n\t\tvar id = \"Form_DefinitionEdit\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: html,\r\n\t\t\tTitle: \"Definition management\",\r\n\t\t\tSize: 600,\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Select file\", Icon: {Type: \"Load\", Space: true}, Click: function() {\r\n\t\t\t\t\tvar sel = rangeTable.Selected;\r\n\t\t\t\t\tif(sel.length == 0) {alert(\"No range selected!\"); return}\r\n\t\t\t\t\tvar a = sel[0];\r\n\t\t\t\t\tForm_Import.open({\r\n\t\t\t\t\t\tSingle: true, //Only one input\r\n\t\t\t\t\t\tChain: true,\r\n\t\t\t\t\t\tOnClose: function(data) {mapping(a, data, true)} //Last argument specifies here that a \"back to mapping\" option should be available\r\n\t\t\t\t\t});\r\n\t\t\t\t}, Title: \"Select or change the definition file for the selected Range\"},\r\n\t\t\t\t{Label: \"Edit Mapping\", Icon: {Type: \"Edit\", Space: true}, Click: function() {\r\n\t\t\t\t\tvar sel = rangeTable.Selected;\r\n\t\t\t\t\tif(sel.length == 0) {alert(\"No range selected!\"); return}\r\n\t\t\t\t\tvar a = sel[0];\r\n\t\t\t\t\tif(a.Definition === undefined) {alert(\"No file selected!\"); return}\r\n\t\t\t\t\tmapping(a, [a.Definition.Input]);\r\n\t\t\t\t}, Title: \"Edit the column mapping for the definition file attached to the selected Range\"},\r\n\t\t\t\t{Label: \"Reset\", Icon: {Type: \"Reset\", Space: true}, Click: function() {\r\n\t\t\t\t\tvar sel = rangeTable.Selected;\r\n\t\t\t\t\tif(sel.length == 0) {alert(\"No range selected!\"); return}\r\n\t\t\t\t\tvar a = sel[0];\r\n\t\t\t\t\ta.removeDefinition();\r\n\t\t\t\t\trangeTable.update();\r\n\t\t\t\t\tdoPreview(a);\r\n\t\t\t\t}, Title: \"Remove the definition for the selected Range\"},\r\n\t\t\t\t{Label: \"Done\", Icon: {Type: \"Ok\", Space: true, Color: \"Green\"}, Click: function() {\r\n\t\t\t\t\tPairing.updateAll(Editor.ResultManager.Anchors.Pairing); //Update pairing info for all results\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}, Title: \"Close this form\"},\r\n\t\t\t],\r\n\t\t\tonInit: function() { //Initialize the respTable on open\r\n\t\t\t\trangeTable.init();\r\n\t\t\t\tpreviewArea.init().disable();\r\n\t\t\t\tvar sel = rangeTable.Selected;\r\n\t\t\t\tif(sel.length > 0) {doPreview(sel[0])}\r\n\t\t\t\telse { //Force selection of the first element if nothing selected\r\n\t\t\t\t\trangeTable.setValue([0]);\r\n\t\t\t\t\tdoPreview(rangeTable.Selected[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tstatic formPlate(ranges) { //Open a form for manipulation of plate index and visualization of definitions for each range available\r\n\t\tlet table = Definition.anchors(\"RangeTable\");\r\n\t\tlet preview = Definition.anchors(\"Preview\");\r\n\t\tlet plateIndex = Definition.anchors(\"PlateIndex\");\r\n\t\tlet doPreview = function(a) { //Function to render the preview for area a\r\n\t\t\tlet d = a.Definition\r\n\t\t\tif(d) { //This range has a definition defined\r\n\t\t\t\tif(d.PlatesID.length == 0) {GetId(preview).innerHTML = \"No wells tagged for this area\"}\r\n\t\t\t\telse {d.PlateIndex.init().change(d.PlateIndex.Value)} //Initialize the control to select the plate and trigger a change that will render the preview. See previewPlate() for the construction of the preview\r\n\t\t\t}\r\n\t\t\telse {GetId(preview).innerHTML = \"No definition found for this range\"}\r\n\t\t}.bind(this);\r\n\t\tlet rangeTable = new RespTable({\r\n\t\t\tID: table,\r\n\t\t\tArray: ranges,\r\n\t\t\tFields: [\"Name\", \"Other\", \"DefInfo\"], Headers: [\"Name\", \"Properties\", \"Definition\"],\r\n\t\t\tPreserve: true, RowNumbers: true, NoControls: true,\r\n\t\t\tonSelect: function(array) {\r\n\t\t\t\tif(array.length > 0) {doPreview(array[0])} //See previewPlate() for the construction of the preview\r\n\t\t\t}\r\n\t\t});\r\n\t\tlet html = \"\"; //Prepare the html for the form\r\n\t\thtml += \"<div id=\\\"\" + table + \"\\\" style=\\\"float: left; width: 250px\\\">\";\r\n\t\t\thtml += \"<div style=\\\"margin-top: 10px; margin-bottom: 20px\\\"><b>Ranges available:</b></div>\";\r\n\t\thtml += \"</div>\";\r\n\t\thtml += \"<div style=\\\"margin-left: 270px\\\">\";\r\n\t\t\thtml += \"<div style=\\\"margin-top: 10px; margin-bottom: 10px\\\"><b>Plate selected:</b>\";\r\n\t\t\t\thtml += \"<div id=\\\"\" + plateIndex + \"\\\" style=\\\"display: inline-block; margin-left: 10px\\\"></div>\";\r\n\t\t\thtml += \"</div>\";\r\n\t\t\thtml += \"<b>Plate preview:</b>\";\r\n\t\t\thtml += \"<div id=\\\"\" + preview + \"\\\" style=\\\"margin-top: 5px; overflow: auto\\\"></div>\"; \r\n\t\thtml += \"</div>\";\r\n\t\tvar id = \"Form_PlateMap\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: html,\r\n\t\t\tTitle: \"Plate map\",\r\n\t\t\tSize: 800,\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Printable version\", Click: function() {\r\n\t\t\t\t\tReporter.printable(GetId(preview).innerHTML);\r\n\t\t\t\t}, Title: \"Open the map in a new window to allow easy printing or copy/pasting to other applications\"},\r\n\t\t\t\t{Label: \"Done\", Icon: {Type: \"Ok\", Space: true, Color: \"Green\"}, Click: function() {\r\n\t\t\t\t\tPairing.update(Editor.ResultManager.Anchors.Pairing); //Update pairing info for result displayed\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}, Title: \"Close this form\"},\r\n\t\t\t],\r\n\t\t\tonInit: function() { //Initialize the respTable on open\r\n\t\t\t\trangeTable.init();\r\n\t\t\t\tvar sel = rangeTable.Selected;\r\n\t\t\t\tif(sel.length > 0) {doPreview(sel[0])}\r\n\t\t\t\telse { //Force selection of the first element if nothing selected\r\n\t\t\t\t\trangeTable.setValue([0]);\r\n\t\t\t\t\tdoPreview(rangeTable.Selected[0]);\r\n\t\t\t\t}\r\n\t\t\t}.bind(this),\r\n\t\t});\r\n\t}\r\n\tstatic getAsPlate(d) { //For the definition object passed, return an array the size of the plate with definitions resolved for each well. Also return an array indicating tagged wells for the area\r\n\t\tlet a = d.Area;\r\n\t\t//let factor = Math.ceil(a.Tagged / a.Replicates);\r\n\t\tlet factor = a.MaxRange;\r\n\t\tlet args = {\r\n\t\t\tPlate: d.PlateIndex.Selected, //Name of the plate where to look the data\r\n\t\t\tFactor: factor, //This factor is necessary to find the data in case no well/plate mapping are available\r\n\t\t\tDefault: \"\", //Default fallback if nothing found, leave it blank\r\n\t\t\tAreaName: a.Name, //This is use when completing missing elements with generic names\r\n\t\t\tColumn: d.Mapping[Mapper.definition().Name], //Index of the column containing the data to extract\r\n\t\t\tRangeIndexBase0: a.MaxRange, //Providing the maxRange ensures that the array is filled with generic items if there is not enough definitions available in the file\r\n\t\t\tFindAll: true,\r\n\t\t}\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\td.Mapper.find(d, args).then(function(array) {\r\n\t\t\t\tlet mode = Mapper.modeWellPlate(d.Mapping);\r\n\t\t\t\tlet tags = undefined;\r\n\t\t\t\tswitch(mode) { //For mapping without well location, the array returned is the list of object available, that needs to be converted into an array of well\r\n\t\t\t\t\tcase \"Plate\": //FALL-THROUGH\r\n\t\t\t\t\tcase \"Direct\": array = Area.plateDefinition(a, array); tags = array; break; //Rewrite the array to contain the definition at the correct locations\r\n\t\t\t\t\tcase \"Well\": //FALL-THROUGH\r\n\t\t\t\t\tcase \"PlateWell\": tags = Area.plateDefinition(a, Array(a.MaxRange).fill(1)); //Using a dummy array as definitions allows to recover the tagged wells\r\n\t\t\t\t}\r\n\t\t\t\tresolve({Definition: array, Tag: tags});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t//Methods\r\n\tupdate(O) { //Update the definition. Use the output data from the scanning if provided\r\n\t\tif(O) { //Scan data are present\r\n\t\t\tthis.Items = O.Items;\r\n\t\t\tif(O.PlatesID) {this.PlatesID = O.PlatesID} //Recover data from the scan\r\n\t\t}\r\n\t\tif(this.PlatesID === undefined || Mapper.modeWellPlate(this.Mapping) == \"Direct\") { //No well/plate data, update based on the number of tagged wells\r\n\t\t\tthis.PlatesID = []; //Reset the platesID\r\n\t\t\tif(this.Area.MaxRange > 0) { //If wells are selected\r\n\t\t\t\tlet plateNb = Math.ceil(this.Items / this.Area.MaxRange);\r\n\t\t\t\tfor(let i=0; i<plateNb; i++) { //Prepare the platesID as a generic array\r\n\t\t\t\t\tthis.PlatesID.push(i + 1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.Area.DefInfo = \"Source: \" + this.Source + \"<br>\" + this.Items + \" items / \" + this.PlatesID.length + \" plates\";\r\n\t\tthis.PlateIndex.updateList(this.PlatesID).setValue(0); //Update the select element as well\r\n\t\treturn this;\r\n\t}\r\n\titem(w) { //Returns a promise that will fulfill with the value of the definition for the well object passed\r\n\t\tlet p = this.PlateIndex.getValue(); //The index of the plate\r\n\t\tlet factor = Math.ceil(this.Area.Tagged / this.Area.Replicates);\r\n\t\tlet index = p * factor + (w.RangeIndex - 1);\r\n\t\tlet args = {\r\n\t\t\tPlate: this.PlateIndex.Selected, //Name of the plate where to look the data\r\n\t\t\tWell: w.Index, //Index of the well where to find the data\r\n\t\t\tRangeIndexBase0: w.RangeIndex - 1, //The desired rangeIndex, rebased to start at 0\r\n\t\t\tFactor: factor, //This factor is necessary to find the data in case no well/plate mapping are available\r\n\t\t\tDefault: \"#\" + (index + 1), //Default fallback if the element needed is outside the list\r\n\t\t\tColumn: this.Mapping[Mapper.definition().Name], //Index of the column containing the data to extract\r\n\t\t}\r\n\t\treturn this.Mapper.find(this, args); //Return a promise that will fulfill with the value of the item\r\n\t}\r\n\tpreviewPlate(plate) { //Chunk a piece of the definition corresponding to the selected plate and present it as a html table\r\n\t\tlet preview = Definition.anchors(\"Preview\");\r\n\t\tlet p = this.PlateIndex.Selected; //Log the plate name that started the preview\r\n\t\tGetId(preview).innerHTML = \"<span class=\\\"Error\\\">Preparing preview, please wait...</span>\";\r\n\t\tDefinition.getAsPlate(this).then(function(o) { //Get the definitions for this plate, then build the html\r\n\t\t\tlet r = Editor.Plate.Rows;\r\n\t\t\tlet c = Editor.Plate.Cols;\r\n\t\t\tlet array = o.Definition;\r\n\t\t\tlet tags = o.Tag;\r\n\t\t\tlet html = \"<table class=\\\"PlateTable\\\"><tr><th></th>\";\r\n\t\t\tfor(let j=0;j<c;j++) { //Headers, for each col\r\n\t\t\t\thtml += \"<th>\" + (j + 1) + \"</th>\";\r\n\t\t\t}\r\n\t\t\thtml += \"</tr>\";\r\n\t\t\tfor(let i=0;i<r;i++) { //For each row\r\n\t\t\t\thtml += \"<tr><th>\" + Well.alphabet(i) + \"</th>\";\r\n\t\t\t\tfor(let j=0;j<c;j++) { //For each col\r\n\t\t\t\t\tlet color = \"unset\";\r\n\t\t\t\t\tlet value = array[i * c + j];\r\n\t\t\t\t\tif(tags[i * c + j]) { //A tagged well for the area\r\n\t\t\t\t\t\tcolor = \"lemonchiffon\"; //Using a fixed color here instead of the area color avoids complications\r\n\t\t\t\t\t\tif(value.length == 0) {value = \"<span class=\\\"Error\\\">&Oslash;</span>\"} //Mark tagged wells without definitions\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { //Non tagged wells\r\n\t\t\t\t\t\tif(value.length > 0) {value = \"<span class=\\\"Error\\\">\" + value + \"</span>\"} //Also mark definitions outside tagged areas\r\n\t\t\t\t\t}\r\n\t\t\t\t\thtml += \"<td style=\\\"background-color: \" + color + \"\\\">\" + value + \"</td>\";\r\n\t\t\t\t}\r\n\t\t\t\thtml += \"</tr>\";\r\n\t\t\t}\r\n\t\t\thtml += \"</table>\";\r\n\t\t\tif(p == this.PlateIndex.Selected) { //Append the preview, unless the plate has changed while preparing it\r\n\t\t\t\tGetId(preview).innerHTML = html;\r\n\t\t\t}\r\n\t\t}.bind(this));\r\n\t}\r\n}","//******************************************************\r\n//EDITOR object - Root object for handling of plates\r\n//******************************************************\r\nclass Editor {\r\n\tconstructor() {}\r\n\t//Static Methods\r\n\tstatic init() { //Initialize the editor. This generates all the controls and buttons\r\n\t\tthis.Root = \"Editor\";\r\n\t\tthis.pixelRatio = 2; //Provides better resolution for the canvas\r\n\t\tlet menuRoot = this.Root + \"_Menu\";\r\n\t\tlet mainRoot = this.Root + \"_Main\";\r\n\t\tlet popupRoot = this.Root + \"_Popup\";\r\n\t\tthis.Anchors = {\r\n\t\t\tMenu: {\r\n\t\t\t\tRoot: menuRoot,\r\n\t\t\t\tAreas: menuRoot + \"Areas\",\r\n\t\t\t\tAreaOptions: menuRoot + \"AreaOptions\",\r\n\t\t\t\tResults: menuRoot + \"Results\",\r\n\t\t\t\tPlate: menuRoot + \"Plate\",\r\n\t\t\t\tLayout: menuRoot + \"Layout\",\r\n\t\t\t\tConc: menuRoot + \"Concentration\",\r\n\t\t\t\tDRC: menuRoot + \"Conc_DRC\",\r\n\t\t\t\tAnalysis: menuRoot + \"Analysis\",\r\n\t\t\t},\r\n\t\t\tMain: {\r\n\t\t\t\tRoot: mainRoot,\r\n\t\t\t\tPlate: mainRoot + \"Plate\",\r\n\t\t\t\tResults: mainRoot + \"Results\",\r\n\t\t\t},\r\n\t\t\tPopup: {\r\n\t\t\t\tRoot: popupRoot,\r\n\t\t\t\tWell: popupRoot + \"Well\",\r\n\t\t\t\tArea: popupRoot + \"Area\",\r\n\t\t\t\tConc: popupRoot + \"Conc\",\r\n\t\t\t\tSelect: popupRoot + \"Select\",\r\n\t\t\t\tData: popupRoot + \"Data\",\r\n\t\t\t\tResolvedName: popupRoot + \"ResolvedName\",\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet html = \"<div id=\\\"\" + this.Anchors.Popup.Well + \"\\\" style=\\\"font-weight: bold\\\"></div>\"; //Well information\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Popup.Area + \"\\\"></div>\"; //Area information\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Popup.Conc + \"\\\"></div>\"; //Conc information\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Popup.Select + \"\\\"></div>\"; //Selection information\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Popup.Data + \"\\\"></div>\"; //Parameter value information\r\n\t\tGetId(this.Anchors.Popup.Root).innerHTML = html; //Popuplate the inner html of the popup\r\n\t\tthis.Menu = new TabControl({\r\n\t\t\tID: this.Anchors.Menu.Root,\r\n\t\t\tMultiple: true,\r\n\t\t\tStack: true,\r\n\t\t\tLayout: \"Menu\",\r\n\t\t\tTabs: [\r\n\t\t\t\t{Label: \"Plate\", Active: true, Content: {\r\n\t\t\t\t\tType: \"HTML\",\r\n\t\t\t\t\tValue: \"<fieldset><div id=\\\"\" + this.Anchors.Menu.Plate + \"\\\"></div></fieldset><fieldset id=\\\"\" + this.Anchors.Menu.Layout + \"\\\"><legend>Options</legend></fieldset>\", //<legend>Format</legend>\r\n\t\t\t\t}},\r\n\t\t\t\t{Label: \"Areas\", Content: {\r\n\t\t\t\t\tType: \"HTML\",\r\n\t\t\t\t\tValue: \"<fieldset></fieldset><fieldset id=\\\"\" + this.Anchors.Menu.Areas + \"\\\"><legend>Areas available</legend></fieldset><fieldset id=\\\"\" + this.Anchors.Menu.AreaOptions + \"\\\"><legend>Options</legend></fieldset>\", //<legend>Management</legend> style=\\\"max-height: 500px; overflow: auto\\\"\r\n\t\t\t\t}},\r\n\t\t\t\t{Label: \"Concentration\", Content: {Type: \"HTML\", Value: \"<fieldset id=\\\"\" + this.Anchors.Menu.Conc + \"\\\"></fieldset><fieldset id=\\\"\" + this.Anchors.Menu.DRC + \"\\\"><legend>Dose-response</legend></fieldset>\"} }, //<legend>Management</legend>\r\n\t\t\t\t{Label: \"Results\", Content: {Type: \"HTML\", Value: \"<fieldset></fieldset><fieldset id=\\\"\" + this.Anchors.Menu.Results + \"\\\"><legend>Results available</legend></fieldset>\"} }, //<legend>Controls</legend> style=\\\"max-height: 500px; overflow: auto\\\"\r\n\t\t\t\t{Label: \"Analysis\", Content: {Type: \"HTML\", Value: \"<div id=\\\"\" + this.Anchors.Menu.Analysis + \"\\\"></div>\"} },\r\n\t\t\t],\r\n\t\t});\r\n\t\tthis.Main = new TabControl({\r\n\t\t\tID: this.Anchors.Main.Root,\r\n\t\t\tMultiple: true,\r\n\t\t\tLayout: \"Menu\",\r\n\t\t\tTabs: [\r\n\t\t\t\t{Label: \"Layout\", Active: true, Content: {Type: \"HTML\", Value: \"<div id=\\\"\" + this.Anchors.Main.Plate + \"\\\"><p>Choose a plate format or load a layout to start</p></div>\"} },\r\n\t\t\t\t{Label: \"Data\", Content: {Type: \"HTML\", Value: \"<div id=\\\"\" + this.Anchors.Main.Results + \"\\\" style=\\\"position: relative\\\"><p>Load a result file to continue</p></div>\"} }, //The position styling is to correctly display the popup for the lookup select\r\n\t\t\t]\r\n\t\t});\r\n\t\tthis.Tables = {\r\n\t\t\tAreas: new RespTable({ID: this.Anchors.Menu.Areas, Fields: [\"Type\", \"Name\", \"Color\", \"Other\"], Preserve: true, FullWidth: true, RowNumbers: true,\r\n\t\t\t\tonDelete: function(a) {this.deleteArea(a)}.bind(this)}),\r\n\t\t\tResults: new RespTable({ID: this.Anchors.Menu.Results, Fields: [\"Name\", \"Size\", \"Info\", \"Validated\"], Headers: [\"Name\", \"Size\", \"Parameters\", \"&check;\"], Preserve: true, FullWidth: true, RowNumbers: true,\r\n\t\t\t\tonDelete: function(r) {this.deleteResult(r)}.bind(this),\r\n\t\t\t\tonSelect: function(newSelect, oldSelect, newIndices, oldIndices) { //Redraw when necessary\r\n\t\t\t\t\tif(oldSelect[0]) { //Something already selected\r\n\t\t\t\t\t\tif(newIndices[0] != oldIndices[0] || newSelect[0].Validated == false) {this.ResultManager.draw(newSelect[0])} //If a different result is selected, redraw. If the result was not validated, redraw also\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {this.ResultManager.draw(newSelect[0])}\r\n\t\t\t\t}.bind(this),\r\n\t\t\t\tonUpdate: function() {this.Report()}.bind(this),\r\n\t\t\t}),\r\n\t\t}\r\n\t\tthis.Controls = {\r\n\t\t\tPlate: {\r\n\t\t\t\tRows: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.Plate, Title: \"Number of rows\", Min: 1, Max: 48, Default: 4, Label: \"Rows\", Chain: {Index: 0}}), \r\n\t\t\t\tCols: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.Plate, Title: \"Number of columns\", Min: 1, Max: 48, Default: 6, Label: \"Columns\", Chain: {Index: 1, Last: true}}), \r\n\t\t\t},\r\n\t\t\tArea: {\r\n\t\t\t\tLock: LinkCtrl.new(\"Checkbox\", {ID: this.Anchors.Menu.AreaOptions, Label: \"Lock Areas\", Default: true, Preserve: true, Chain: {Index: 0}, Change: function() {}.bind(this), Title: \"If checked, prevent tagged areas from being replaced when tagged again\"}),\r\n\t\t\t\tStrict: LinkCtrl.new(\"Checkbox\", {ID: this.Anchors.Menu.AreaOptions, Label: \"Strict Mode\", Default: true, Chain: {Index: 1, Last: true}, Change: function(v) {this.strictMode(v)}.bind(this), Title: \"If checked, prevent areas with types 'Sample' or 'Range' to overlap with 'Controls'\"}),\r\n\t\t\t},\r\n\t\t\tConcentration: {\r\n\t\t\t\tValue: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.Conc, Title: \"Value for the concentration\", Min: 0, Default: 20, Label: \"Value\", Preserve: true, Chain: {Index: 0}}),\r\n\t\t\t\tUnit: LinkCtrl.new(\"Select\", {ID: this.Anchors.Menu.Conc, Title: \"Unit for the concentration\", Default: 2, Label: \"Unit\", ControlLeft: true, Chain: {Index: 1, Last: true}, List: Unit.list({Name: true})}),\r\n\t\t\t\tDoses: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.DRC, Title: \"Total number of doses in the dose-response curve\", Min: 0, Default: 10, Label: \"Doses\", Preserve: true, Chain: {Index: 0}}),\r\n\t\t\t\tRep: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.DRC, Title: \"How many times the same dose should be replicated side-by-side\", Min: 0, Default: 1, Label: \"Replicates\", ControlLeft: true, Chain: {Index: 1, Last: true}}),\r\n\t\t\t\tOperator: LinkCtrl.new(\"Select\", {ID: this.Anchors.Menu.DRC, Title: \"Mathematical operator to use for calculation of the next dose\", Chain: {Index: 2, NewLine: true}, Default: 0, Label: \"Operator\", List:[\"/\", \"×\", \"+\", \"×10^\"]}),\r\n\t\t\t\tFactor: LinkCtrl.new(\"Number\", {ID: this.Anchors.Menu.DRC, Title: \"Number to use with the operator for calculation of the next dose\", Chain: {Index: 3, Last: true}, Default: 2, Label: \"Factor\", ControlLeft: true}),\r\n\t\t\t\tDirection: LinkCtrl.new(\"Radio\", {ID: this.Anchors.Menu.DRC, Label: \"Direction\", Title: \"Direction of the dose-response\", Default: 0, Chain: {Index: 4, NewLine: true}, List: [\"Horizontal\", \"Vertical\"]}),\r\n\t\t\t},\r\n\t\t\tResult: {\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\tAnalysis: {\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t}\r\n\t\tthis.Console = new EditorConsole(\"Console\");\r\n\t\tthis.ResultManager = new ResultManager(this.Anchors.Main.Results, this.Tables.Results);\r\n\t\tthis.Menu.init();\r\n\t\tthis.Main.init();\r\n\t\tObject.values(this.Tables).forEach(function(t) {t.init()});\r\n\t\tObject.values(this.Controls).forEach(function(c) {\r\n\t\t\tObject.values(c).forEach(function(l) {l.init()});\r\n\t\t});\r\n\t\tGetId(this.Anchors.Menu.Plate).prepend(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"96 wells\", Title: \"Create the layout for a 96-well plate (8 Rows × 12 Columns)\", Click: function() {this.newPlate(8, 12)}.bind(this)},\r\n\t\t\t{Label: \"384 wells\", Title: \"Create the layout for a 384-well plate (16 Rows × 24 Columns)\", Click: function() {this.newPlate(16, 24)}.bind(this)},\r\n\t\t\t{Label: \"1536 wells\", Title: \"Create the layout for a 1536-well plate (32 Rows × 48 Columns)\", Click: function() {this.newPlate(32, 48)}.bind(this)},\r\n\t\t\t{Label: \"Custom\", Title: \"Create the layout for a plate with the number of Rows and Columns as specified\", Click: function() {\r\n\t\t\t\tvar r = this.Controls.Plate.Rows.getValue();\r\n\t\t\t\tvar c = this.Controls.Plate.Cols.getValue();\r\n\t\t\t\tthis.newPlate(r, c);\r\n\t\t\t}.bind(this)},\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Layout).append(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Load\", Title: \"Load a layout from file\", Icon: {Type: \"Load\", Space: true}, Click: function() {this.load()}.bind(this)},\r\n\t\t\t{Label: \"Save\", Title: \"Save the current layout\", Icon: {Type: \"Save\", Space: true}, Click: function() {this.save()}.bind(this)},\r\n\t\t\t{Label: \"Reset\", Title: \"Reset the entire project: areas, tags, concentrations and results will be removed\", Icon: {Type: \"Reset\", Space: true}, Click: function() {\r\n\t\t\t\tthis.warn().then(function() {this.reset()}.bind(this), function() {});\r\n\t\t\t}.bind(this)},\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Areas).previousSibling.append(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Definitions\", Title: \"Edit definitions for available ranges\", Click: function() {this.definitions()}.bind(this)},\r\n\t\t\t{Label: \"Edit\", Title: \"Edit the selected area\", Icon: {Type: \"Edit\", Space: true}, Click: function() {this.editArea()}.bind(this)},\r\n\t\t\t{Label: \"New\", Title: \"Create a new area\", Icon: {Type: \"New\", Space: true}, Click: function() {this.newArea()}.bind(this)},\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Areas).previousSibling.append(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Untag all\", Title: \"Remove tagged areas for the whole plate\", Click: function() {this.untagAllArea()}.bind(this)},\r\n\t\t\t{Label: \"Untag\", Title: \"Remove tagged areas from the selection\", Click: function() {this.untagArea()}.bind(this)},\r\n\t\t\t{Label: \"Tag\", Title: \"Tag the selected area in the selection\", Icon: {Type: \"Tag\", Space: true},  Click: function() {this.tagArea()}.bind(this)},\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Conc).prepend(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Reset\", Title: \"Reset Concentration data for the whole plate\", Icon: {Type: \"Reset\", Space: true}, Click: function() {this.resetConc()}.bind(this)},\r\n\t\t\t{Label: \"Untag\", Title: \"Untag all concentrations from the selection\", Click: function() {this.untagConc()}.bind(this)},\r\n\t\t\t{Label: \"Tag\", Title: \"Tag the defined concentration in the selection\", Icon: {Type: \"Tag\", Space: true}, Click: function() {this.tagConc()}.bind(this)},\r\n\t\t]));\r\n\t\tvar drc = GetId(this.Anchors.Menu.DRC);\r\n\t\tdrc.insertAdjacentHTML(\"beforeend\", \"<br>\");\r\n\t\tdrc.append(LinkCtrl.button(\r\n\t\t\t{Label: \"Tag DRC\", Title: \"Tag the defined dose-response in the selection\", Icon: {Type: \"Tag\", Space: true}, Click: function() {this.tagDRC()}.bind(this)}\r\n\t\t));\r\n\t\tGetId(this.Anchors.Menu.Results).previousSibling.append(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Add results\", Icon: {Type: \"New\", Space: true}, Title: \"Attach new results file to the plate layout\", Click: function() {this.newResult()}.bind(this)},\r\n\t\t\t{Label: \"Edit\", Title: \"Edit the selected result\", Icon: {Type: \"Edit\", Space: true}, Click: function() {this.editResult()}.bind(this)},\r\n\t\t\t{Label: \"Pairing\", Title: \"Tools for pairing of result and definition plates\", Click: function() {this.pairing()}.bind(this)},\r\n\t\t\t//{Label: \"Push Layout\", Title: \"Push the layout data to the selected result file\", Click: function() {this.pushLayout()}.bind(this)}, //Let's review this later, with stream-write capabilities\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Results).previousSibling.append(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Push Layout\", Title: \"Push the layout data to the selected result file\", Click: function() {this.pushLayout()}.bind(this)}, //Let's review this later, with stream-write capabilities\r\n\t\t]));\r\n\t\tGetId(this.Anchors.Menu.Analysis).prepend(LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Controls\", Title: \"Aggregate data for the controls defined in the layout and compute Z-factors\", Click: function() {this.Report(\"zFactor\")}.bind(this)},\r\n\t\t\t{Label: \"Column Analysis\", Title: \"Compute statistics for the combinations of all areas and concentrations defined in the layout, organized as individual columns\", Click: function() {this.Report(\"aggregate\")}.bind(this)},\r\n\t\t\t{Label: \"Grouped Analysis\", Title: \"Compute statistics for the combinations of all areas and concentrations defined in the layout, organized as two-entry tables\", Click: function() {this.Report(\"grouped\")}.bind(this)},\r\n\t\t]));\r\n\t\treturn this;\r\n\t}\r\n//**********************\r\n// PLATE-RELATED METHODS\r\n//**********************\r\n\tstatic warn(that, I) { //A form that will warn the user before doing something irreversible and potentially damaging\r\n\t\tif(this.Plate === undefined && this.Tables.Areas.Array.length == 0 && this.Tables.Results.Array.length == 0) {return Promise.resolve()}\r\n\t\tif(I && I.Silent) {return Promise.resolve()} //Skip the warning if it has already been shown and approved before\r\n\t\tlet id = \"Form_Warning\";\r\n\t\tlet msg = \"This will reset the entire project.<br>All tags, areas, definitions and results will be discarded.\";\r\n\t\tlet title = \"Reset layout\";\r\n\t\tswitch(that) {\r\n\t\t\tcase \"tag\": msg = \"This will remove all tags for all layers on the plate.\"; title = \"Reset tags\"; break;\r\n\t\t\tcase \"conc\": msg = \"This will remove all concentration data for all layers on the plate.\"; title = \"Reset concentrations\"; break;\r\n\t\t}\r\n\t\treturn new Promise(function (resolve, reject) {\r\n\t\t\tForm.open({\r\n\t\t\t\tID: id,\r\n\t\t\t\tHTML: \"<div style=\\\"text-align: center\\\"><p>\" + msg + \"</p><p class=\\\"Error\\\">Are you sure you want to continue ?</p></div>\",\r\n\t\t\t\tTitle: title,\r\n\t\t\t\tButtons: [\r\n\t\t\t\t\t{Label: \"Reset\", Click: function() {Form.close(id); resolve()}},\r\n\t\t\t\t\t{Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id); reject()}}\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\tstatic reset() { //Reset the whole thing, or part of it\r\n\t\tthis.Plate = undefined; //Reset the plate\r\n\t\tthis.Main.init(); //Reset the plate vizualization panel\r\n\t\tObject.values(this.Tables).forEach(function(t) {t.empty()}); //Reset the areas and results tables\r\n\t\tthis.Console.log({Message: \"Project reset\", Gravity: \"Success\", Reset: true});\r\n\t}\r\n\tstatic newPlate(r, c) { //Create a new plate\r\n\t\tif(this.Plate) { //A plate already exist\r\n\t\t\tif(this.Plate.Rows != r || this.Plate.Cols != c) { //Confirmation before resizing\r\n\t\t\t\tlet id = \"Form_Resize\";\r\n\t\t\t\tlet idArea = id + \"_RadioArea\";\r\n\t\t\t\tlet idConc = id + \"_RadioConc\";\r\n\t\t\t\tlet RadioArea = LinkCtrl.new(\"Radio\", {ID: idArea, Default: 0, Preserve: true, List: [\"Keep\", \"Discard\"], Title: \"Keep will maintain area tagging data for the wells still available in the new plate\"});\r\n\t\t\t\tlet RadioConc = LinkCtrl.new(\"Radio\", {ID: idConc, Default: 0, Preserve: true, List: [\"Keep\", \"Discard\"], Title: \"Keep will maintain concentration values for the wells still available in the new plate\"});\r\n\t\t\t\tlet html = \"<div style=\\\"text-align: center\\\"><p>This will resize your plate to the new dimensions.<br>Select what should be done with previously entered data:</p></div>\";\r\n\t\t\t\thtml += \"<fieldset id=\\\"\" + idArea + \"\\\"><legend>Area data</legend></fieldset>\";\r\n\t\t\t\thtml += \"<fieldset id=\\\"\" + idConc + \"\\\"><legend>Concentration data</legend></fieldset>\";\r\n\t\t\t\thtml += \"<div class=\\\"Error\\\" style=\\\"text-align: center\\\"><p>Data for wells outside the new plate dimensions will be discarded</p></div>\";\r\n\t\t\t\tForm.open({\r\n\t\t\t\t\tID: id,\r\n\t\t\t\t\tHTML: html,\r\n\t\t\t\t\tTitle: \"Resize plate\",\r\n\t\t\t\t\tButtons: [\r\n\t\t\t\t\t\t{Label: \"Resize\", Click: function() {\r\n\t\t\t\t\t\t\tthis.resize(r, c, RadioArea.Selected, RadioConc.Selected);\r\n\t\t\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\t\t}.bind(this)},\r\n\t\t\t\t\t\t{Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id);}}\r\n\t\t\t\t\t],\r\n\t\t\t\t\tonInit: function() {\r\n\t\t\t\t\t\tRadioArea.init();\r\n\t\t\t\t\t\tRadioConc.init();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {this.Console.log({Message: \"No changes in plate dimensions\", Gravity: \"Warning\"})}\r\n\t\t}\r\n\t\telse { //No plate was defined, create it\r\n\t\t\tthis.Plate = new Plate(this.Anchors.Main.Plate, r, c);\r\n\t\t\tthis.Plate.init();\r\n\t\t\tthis.Menu.closeAll().jumpTo(1);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tstatic resize(r, c, KeepArea, KeepConc) { //Resize the layout to the new dimensions. Keep or erase previous Area/Conc data \r\n\t\tif(KeepArea == \"Discard\") {this.untagAllArea({Silent: true})}\r\n\t\telse { //Keep the area data\r\n\t\t\tif(r <= this.Plate.Rows && c <= this.Plate.Cols) { //In case of downsizing, crop exceeding wells and update the ranges\r\n\t\t\t\tArea.resize(this.Tables.Areas.Array, this.Plate, r, c);\r\n\t\t\t\tthis.Tables.Areas.update(); //Update display to reflect changes\r\n\t\t\t}\r\n\t\t} \r\n\t\tif(KeepConc == \"Discard\") {this.resetConc({Silent: true})}\r\n\t\tPlate.resize(this.Plate, r, c);\r\n\t\tthis.Console.log({Message: \"Plate dimensions changed\", Gravity: \"Success\", Reset: true});\r\n\t\treturn this;\r\n\t}\r\n\tstatic save() { //Save the layout\r\n\t\tlet save = \"[\"; //Layout is saved as a JSON.stringified array of 2 elts, a plate and areas definitions\r\n\t\tsave += Plate.save(this.Plate) + \",\";\r\n\t\tlet areas = \"[\";\r\n\t\tlet hasArea = false;\r\n\t\tthis.Tables.Areas.Array.forEach(function(a, index) { //Save the areas\r\n\t\t\tif(index > 0) {areas += \",\"}\r\n\t\t\tareas += Area.save(a);\r\n\t\t\thasArea = true;\r\n\t\t});\r\n\t\tsave += areas + \"]]\";\r\n\t\tif(hasArea == false && this.Plate === undefined) {this.Console.log({Message: \"Nothing to save\", Gravity: \"Warning\"}); return this} //No area + no plate = nothing to save\r\n\t\tForm.download(save, {DataType: \"text/json;charset=utf-8\", FileName: \"Layout.save\"});\r\n\t\treturn this;\r\n\t}\r\n\tstatic load() { //Load a layout from file\r\n\t\tlet id = \"Form_Load\";\r\n\t\tlet FileCtrl = LinkCtrl.new(\"File\", {ID: \"FormLoad_FileSelect\", Default: \"\", Label: \"Layout file\", Title: \"Click to select the file containing the layout definition\", Accept: \".save\"})\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<p>Select the Layout file to load</p><div id=\\\"\" + FileCtrl.ID + \"\\\"></div>\",\r\n\t\t\tTitle: \"Load layout\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Next\", Click: function() {\r\n\t\t\t\t\tlet files = FileCtrl.getValue();\r\n\t\t\t\t\tif(files.length == 0) {alert(\"No file selected\"); return this}\r\n\t\t\t\t\tlet reader = new FileReader();\r\n\t\t\t\t\treader.onload = function(e) {this.loadPreview(e.target.result)}.bind(this);\r\n\t\t\t\t\treader.readAsText(files[0]);\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}.bind(this)},\r\n\t\t\t\t{Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}}\r\n\t\t\t],\r\n\t\t\tonInit: function() {FileCtrl.init()},\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tstatic loadPreview(data) { //Load provided data, for preview\r\n\t\tlet loadedData = undefined;\r\n\t\ttry {loadedData = JSON.parse(data)} catch(error) {this.Console.log({Message: \"Unable to load the layout. <i>\" + error + \"</i>\", Gravity: \"Error\"}); return this}\r\n\t\tlet plate = loadedData[0];\r\n\t\tlet areas = loadedData[1];\r\n\t\tlet id = \"Form_LoadPreview\";\r\n\t\tlet idPlate = id + \"_Plate\";\r\n\t\tlet idAreas = id + \"_Areas\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<fieldset id=\\\"\" + idPlate + \"\\\"><legend>Plate data</legend></fieldset><fieldset id=\\\"\" + idAreas + \"\\\"><legend>Areas data</legend></fieldset>\",\r\n\t\t\tTitle: \"Layout preview\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Load\", Click: function() {\r\n\t\t\t\t\tthis.warn().then(function() { //Confirmation for reset, then load data\r\n\t\t\t\t\t\tthis.reset();\r\n\t\t\t\t\t\tthis.loadData(plate, areas);\r\n\t\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\t}.bind(this), function() {});\r\n\t\t\t\t}.bind(this)},\r\n\t\t\t\t{Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}}\r\n\t\t\t],\r\n\t\t\tonInit: function() {\r\n\t\t\t\tArea.loadPreview(areas, idAreas);\r\n\t\t\t\tPlate.loadPreview(plate, idPlate);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\tstatic loadData(plate, areas) { //Load the plate and areas data. Make sure the layout has been reset before using\r\n\t\tif(plate) { //Load plate data if present\r\n\t\t\tthis.newPlate(plate.Rows, plate.Cols);\r\n\t\t\tPlate.load(this.Plate, plate);\r\n\t\t}\r\n\t\tif(areas && areas.length > 0) {\r\n\t\t\tArea.load(this.Tables.Areas, areas, this.Plate, plate);\r\n\t\t\tthis.Tables.Areas.update(); //Update the table to reflect any changes in the ranges\r\n\t\t}\r\n\t\tthis.Plate.update(); //Update to display the concentrations and update the range info\r\n\t\tthis.Menu.closeAll().jumpTo(1);\r\n\t\tthis.Console.log({Message: \"Layout successfully loaded\", Gravity: \"Success\", Reset: true});\r\n\t\treturn this;\r\n\t}\r\n//*********************\r\n// AREA-RELATED METHODS\r\n//*********************\r\n\tstatic newArea() { //Open the form with options to create a new area\r\n\t\tvar id = \"Form_NewArea\";\r\n\t\tArea.form({\r\n\t\t\tID: id,\r\n\t\t\tColor: CSSCOLORS.fetch(this.Tables.Areas.Length), //Initial color when opening the form\r\n\t\t\tOk: function(Controls, RangeControls) { //What to do when ok is clicked\r\n\t\t\t\tif(this.addArea(Controls, RangeControls)) {Form.close(id)}\r\n\t\t\t}.bind(this),\r\n\t\t\tAnother: function(Controls, RangeControls) { //The user wants more\r\n\t\t\t\tif(this.addArea(Controls, RangeControls)) {\r\n\t\t\t\t\tControls.Name.setValue(\"\").focus(); //Give the focus back to the text to avoid mouse dragging\r\n\t\t\t\t\tControls.Color.setValue(CSSCOLORS.fetch(this.Tables.Areas.Length));\r\n\t\t\t\t}\r\n\t\t\t}.bind(this),\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tstatic addArea(C, R) { //Check and create a new area with the options provided\r\n\t\tlet name = C.Name.getValue();\r\n\t\tif(name.length == 0) {alert(\"Area name must be at least 1 character\"); return false}\r\n\t\tif(this.Tables.Areas.hasElement(\"Name\", name)) {alert(\"This name has already been defined, please choose another one\"); return false}\r\n\t\tlet color = C.Color.getValue();\r\n\t\tlet type = C.Type.Selected;\r\n\t\tif(type == \"Range\") {\r\n\t\t\tlet rep = R.Replicates.getValue();\r\n\t\t\tif(rep < 1 || rep > 1536) {alert(\"Replicates for range must be a valid integer between 1 and 1536\"); return false}\r\n\t\t\tlet dir = R.Direction.Selected;\r\n\t\t\tlet priority = R.Priority.Selected;\r\n\t\t\tlet custom = R.Custom.getValue();\r\n\t\t\tthis.Tables.Areas.addRow(new Area({Name: name, Color: color, Type: type, Replicates: rep, Direction: dir, Priority: priority, Custom: custom}));\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tthis.Tables.Areas.addRow(new Area({Name: name, Color: color, Type: type}));\r\n\t\treturn true;\r\n\t}\r\n\tstatic editArea() { //Edit the selected area\r\n\t\tvar sel = this.Tables.Areas.Selected;\r\n\t\tif(sel.length == 0) {this.Console.log({Message: \"No area selected\", Gravity: \"Error\"}); return this}\r\n\t\tvar id = \"Form_EditArea\";\r\n\t\tvar a = sel[0];\r\n\t\tArea.form({\r\n\t\t\tID: id,\r\n\t\t\tEdit: true,\r\n\t\t\tArea: a,\r\n\t\t\tColor: a.Color, //Initial color when opening the form\r\n\t\t\tOk: function(Controls, RangeControls) { //What to do when ok is clicked\r\n\t\t\t\tlet name = Controls.Name.getValue();\r\n\t\t\t\tif(a.Name != name) { //The name has changed, check unicity\r\n\t\t\t\t\tif(this.Tables.Areas.hasElement(\"Name\", name)) {alert(\"This name has already been defined, please choose another one\"); return}\r\n\t\t\t\t}\r\n\t\t\t\tif(name.length == 0) {alert(\"Area name must be at least 1 character\"); return}\r\n\t\t\t\tPairing.rename(a.Name, name); //Rename within Pairing object\r\n\t\t\t\ta.Name = name;\r\n\t\t\t\ta.Color = Controls.Color.getValue();\r\n\t\t\t\tif(a.Type == \"Range\") { //Update values for ranges\r\n\t\t\t\t\ta.Replicates = RangeControls.Replicates.getValue();\r\n\t\t\t\t\ta.Direction = RangeControls.Direction.Selected;\r\n\t\t\t\t\ta.Priority = RangeControls.Priority.Selected;\r\n\t\t\t\t\ta.Custom = RangeControls.Custom.getValue();\r\n\t\t\t\t\tArea.rangeInfo(a);\r\n\t\t\t\t}\r\n\t\t\t\tif(this.Plate) {a.update(this.Plate.WellSize, this.Plate.WellMargin)} //Update well display if necessary\r\n\t\t\t\tthis.Tables.Areas.update();\r\n\t\t\t\tPairing.update(this.ResultManager.Anchors.Pairing); //Update pairing info for result displayed\r\n\t\t\t\tForm.close(id);\r\n\t\t\t}.bind(this),\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tstatic tagArea() { //Tag the selected area in the selection\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tvar a = this.Tables.Areas.Selected;\r\n\t\tif(a.length == 0) {this.Console.log({Message: \"No area selected\", Gravity: \"Error\"}); return this}\r\n\t\tvar lock = this.Controls.Area.Lock.getValue();\r\n\t\tvar strict = this.Controls.Area.Strict.getValue();\r\n\t\tPlate.tagArea(this.Plate, a[0], {Lock: lock, Strict: strict}).then(function(R) { //Tag and return a feedback object\r\n\t\t\tif(R.Cancel) {return this} //Custom tag was cancelled\r\n\t\t\tif(R.Selected == 0) {this.Console.log({Message: \"No wells selected\", Gravity: \"Error\"}); return this}\r\n\t\t\tif(a[0].Type == \"Range\") {this.Plate.updateRange(a[0])} //Update range information if needed\r\n\t\t\tif(R.Tagged < R.Selected) { //Not all wells were tagged\r\n\t\t\t\tif(R.Tagged == 0) { //Nothing was tagged\r\n\t\t\t\t\tthis.Console.log({Message: \"None of the selected wells (\" + R.Selected + \") were tagged\", Gravity: \"Error\"});\r\n\t\t\t\t}\r\n\t\t\t\telse { //Less than expected\r\n\t\t\t\t\tthis.Console.log({Message: \"Only \" + R.Tagged + \" selected wells (out of \" + R.Selected + \") were tagged\", Gravity: \"Warning\"});\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tif(R.Tagged == R.Selected) { //Case both equal to 0 excluded above\r\n\t\t\t\tthis.Console.log({Message: R.Tagged + \" wells tagged\", Gravity: \"Success\"});\r\n\t\t\t}\r\n\t\t\tthis.Tables.Areas.update(); //Update the table\r\n\t\t}.bind(this));\r\n\t\treturn this;\r\n\t}\r\n\tstatic untagArea() {\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tlet R = this.Plate.untag();\r\n\t\tif(R.Untag == 0) {this.Console.log({Message: \"No wells selected\", Gravity: \"Error\"}); return this}\r\n\t\tthis.Tables.Areas.update()\r\n\t\tthis.Console.log({Message: R.Untag + \" wells untagged\", Gravity: \"Success\"});\r\n\t\treturn this;\r\n\t}\r\n\tstatic untagAllArea(I) {\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tlet A = this.Tables.Areas;\r\n\t\tlet plate = this.Plate;\r\n\t\tif(A.Length > 0) {\r\n\t\t\tthis.warn(\"tag\", I).then(function() {\r\n\t\t\t\tA.Array.forEach(function(a) { //For each area defined\r\n\t\t\t\t\ta.removeTags(plate); //Remove tags\r\n\t\t\t\t\ta.Tags = []; //Reset the tag arrays\r\n\t\t\t\t\tif(a.Type == \"Range\") {\r\n\t\t\t\t\t\ta.MaxRange = 0; //Reset the ranges\r\n\t\t\t\t\t\tArea.rangeInfo(a); //Update info\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tA.update(); //Update the areas table to reflect any changes in ranges\r\n\t\t\t\tthis.Console.log({Message: \"All wells untagged\", Gravity: \"Success\"});\r\n\t\t\t}.bind(this), function() {});\r\n\t\t}\r\n\t\telse {this.Console.log({Message: \"No area defined\", Gravity: \"Warning\"})}\r\n\t\treturn this;\r\n\t}\r\n\tstatic deleteArea(a) { //Delete selected area a\r\n\t\tif(this.Plate) {a.removeTags(this.Plate)}\r\n\t\treturn this;\r\n\t}\r\n\tstatic strictMode(bool) { //Switch strict mode ON or OFF\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tif(bool) { //Check for conflicts and prevent switching if any\r\n\t\t\tlet conflicts = TypeMap.getConflicts(this.Plate.TypeMap);\r\n\t\t\tif(conflicts.length > 0) {\r\n\t\t\t\tthis.Controls.Area.Strict.setValue(false); //Prevent switch\r\n\t\t\t\tthis.Plate.highlightConflicts(conflicts);\r\n\t\t\t\tthis.Console.log({Message: \"Conflicts detected! Must be resolved before activating strict mode\", Gravity: \"Error\"});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n//***************************\r\n// DEFINITION-RELATED METHODS\r\n//***************************\r\n\tstatic definitions() { //Edition of the definitions\r\n\t\tlet ranges = Area.getRanges();\r\n\t\tif(ranges.length == 0) {this.Console.log({Message: \"No ranges defined\", Gravity: \"Error\"}); return this}\r\n\t\tDefinition.formEdit(ranges);\r\n\t\treturn this;\r\n\t}\t\r\n//******************************\r\n// CONCENTRATION-RELATED METHODS\r\n//******************************\r\n\tstatic tagConc() { //Tag the concentration in the selected wells\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tlet S = this.Plate.tagConc(this.Controls.Concentration.Value.getValue(), this.Controls.Concentration.Unit.Selected); //Tag and return a feedback object\r\n\t\tif(S == 0) {this.Console.log({Message: \"No wells selected\", Gravity: \"Error\"}); return this}\r\n\t\telse {this.Console.log({Message: \"Concentration added in \" + S + \" wells\", Gravity: \"Success\"})}\r\n\t\treturn this;\r\n\t}\r\n\tstatic untagConc() { //Untag the concentration in the selected wells\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tlet S = this.Plate.untagConc(); //Tag and return a feedback object\r\n\t\tif(S == 0) {this.Console.log({Message: \"No wells selected\", Gravity: \"Error\"}); return this}\r\n\t\telse {this.Console.log({Message: \"Concentration removed in \" + S + \" wells\", Gravity: \"Success\"})}\r\n\t\treturn this;\r\n\t}\r\n\tstatic resetConc(I) { //Reset concentrations for the entire plate\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tthis.warn(\"conc\", I).then(function() {\r\n\t\t\tthis.Plate.resetConc();\r\n\t\t}.bind(this), function() {});\r\n\t}\r\n\tstatic tagDRC() { //Tag the specified DRC in the selected wells\r\n\t\tif(this.Plate === undefined) {return this}\r\n\t\tlet c = this.Controls.Concentration;\r\n\t\tlet op = c.Operator.Selected;\r\n\t\top = op.replace(\"×\", \"*\"); //× is good for display but not for math...\r\n\t\top = op.replace(\"^\", \"**\"); //^ is good for display but not for math...\r\n\t\tlet I = {\r\n\t\t\tValue: c.Value.getValue(),\r\n\t\t\tUnit: c.Unit.Selected,\r\n\t\t\tDoses: c.Doses.getValue(),\r\n\t\t\tRep: c.Rep.getValue(),\r\n\t\t\tOperator: op,\r\n\t\t\tFactor: c.Factor.getValue(),\r\n\t\t\tDirection: c.Direction.Selected,\r\n\t\t}\r\n\t\tlet S = this.Plate.tagDRC(I);\r\n\t\tif(S == 0) {this.Console.log({Message: \"No wells selected\", Gravity: \"Error\"}); return this}\r\n\t\telse {this.Console.log({Message: \"DRC added in \" + S + \" wells\", Gravity: \"Success\"})}\r\n\t\treturn this;\r\n\t}\r\n//************************\r\n// RESULTS-RELATED METHODS\r\n//************************\r\n\tstatic newResult() { //Add a result file\r\n\t\tForm_Import.open({Chain: true, OnClose: function(data) {\r\n\t\t\tlet results = [];\r\n\t\t\tdata.forEach(function(d) {\r\n\t\t\t\tresults.push(new Result(d));\r\n\t\t\t}.bind(this));\r\n\t\t\tthis.ResultManager.mapParameters(results, true); //The second argument (BackToImport) allow the Form_Import to remain open\t\t\t\r\n\t\t\tthis.Main.jumpTo(1); //Open the data panel\r\n\t\t}.bind(this)});\r\n\t\treturn this;\r\n\t}\r\n\tstatic editResult() { //Edit Parsing options and parameter selection\r\n\t\tthis.ResultManager.mapParameters();\r\n\t\treturn this;\r\n\t}\r\n\tstatic deleteResult(r) { //Delete selected result\r\n\t\tthis.ResultManager.deleteResult(r);\r\n\t\treturn this;\r\n\t}\r\n\tstatic pushLayout() { //Merge selected result files with layout data\r\n\t\tlet selected = this.Tables.Results.Selected;\r\n\t\tif(this.Plate) {\r\n\t\t\tif(selected.length > 0) {this.ResultManager.pushLayout(selected[0])}\r\n\t\t\telse {this.Console.log({Message: \"No result file selected\", Gravity: \"Error\"})}\r\n\t\t}\r\n\t\telse {this.Console.log({Message: \"No plate defined\", Gravity: \"Error\"})}\r\n\t\treturn this;\r\n\t}\r\n\tstatic pairing() { //Pairing of result and definition plates\r\n\t\tlet definitions = Area.getRanges({HasDefinition: true}); //Ranges with definition\r\n\t\tlet results = this.Tables.Results.Array.filter(function(r) { //Get the results. \r\n\t\t\tif(r.Validated) { //Only validated results\r\n\t\t\t\tr[\"Plate Count\"] = r.PlatesID.length; //Create or update the Plate Count property\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse return false;\r\n\t\t}); \r\n\t\tif(definitions.length == 0 || results.length == 0) {this.Console.log({Message: \"At least one definition and one validated result files are required for pairing\", Gravity: \"Error\"}); return this}\r\n\t\tPairing.form(results, definitions); //Open the form for pairing\r\n\t\treturn this;\r\n\t}\r\n//*************************\r\n// ANALYSIS-RELATED METHODS\r\n//*************************\r\n\tstatic Report(type) { //Update the window.Results data and Open the desired report page\r\n\t\tlet results = this.Tables.Results.Array.filter(function(r) {return r.Validated}); //Only validated results\r\n\t\twindow.Results = results;\r\n\t\tif(type === undefined) {return this} //No need to do more in that case\r\n\t\tif(this.Plate === undefined) {this.Console.log({Message: \"No plate defined\", Gravity: \"Error\"}); return this} //Check that a plate exist\r\n\t\tif(results.length == 0) {this.Console.log({Message: \"No result file available\", Gravity: \"Error\"}); return this} //Check that results exist\r\n\t\tswitch(type) { //Open the desired report page\r\n\t\t\tcase \"zFactor\": return this.zFactor();\r\n\t\t\tcase \"aggregate\": return this.aggregate();\r\n\t\t\tcase \"grouped\": return this.grouped();\r\n\t\t}\r\n\t}\r\n\tstatic zFactor() { //Compute and report z-factor across all plates\r\n\t\tlet controls = Area.getControls(this.Tables.Areas.Array);\r\n\t\tif(controls.Count == 0) {this.Console.log({Message: \"No controls defined in the current layout\", Gravity: \"Error\"}); return this}\r\n\t\tReporter.zFactor(controls);\r\n\t\treturn this;\r\n\t}\r\n\tstatic aggregate() { //Compute and report stats for aggregated areas (column analysis)\r\n\t\tlet areas = Area.getAreas(this.Tables.Areas.Array);\r\n\t\tif(areas.Count == 0) {this.Console.log({Message: \"No areas defined in the current layout\", Gravity: \"Error\"}); return this}\r\n\t\tReporter.aggregate(areas);\r\n\t\treturn this;\r\n\t}\r\n\tstatic grouped() { //Features for grouped analysis\r\n\t\tlet areas = Area.getAreas(this.Tables.Areas.Array);\r\n\t\tif(areas.Count == 0) {this.Console.log({Message: \"No areas defined in the current layout\", Gravity: \"Error\"}); return this}\r\n\t\tlet conc = this.Plate.getConc(); //Loop the plate to get the conc categorized per unit\r\n\t\tReporter.grouped(areas, conc);\r\n\t\treturn this;\r\n\t}\r\n}","//******************************************************************************\r\n// LAYER object - Layer is an array of wells; well is a collection of properties\r\n//******************************************************************************\r\nclass Layer {\r\n\tconstructor(I) {\r\n\t\tlet r = I.Rows;\r\n\t\tlet c = I.Cols;\r\n\t\tthis.Plate = I.Plate;\r\n\t\tthis.Rows = r;\r\n\t\tthis.Cols = c;\r\n\t\tthis.Index = I.Layer;\r\n\t\tthis.Wells = [];\r\n\t\tthis.Highlight = undefined; //\r\n\t\tthis.Contents = undefined;  //References to the DOM canvas elements\r\n\t\tthis.Grid = undefined;\t\t//\r\n\t\tthis.Selected = undefined; //Wells currently selected\r\n\t\tthis.Root = \"Layer_\" + I.Layer;\r\n\t\tlet index = 0;\r\n\t\tfor(let i=0;i<r;i++) { //Rows\r\n\t\t\tfor(let j=0;j<c;j++) { //Columns\r\n\t\t\t\tthis.Wells.push(new Well({Index: index, Row: i, Col: j, Layer: this}));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t//Static methods\r\n\tstatic rootHTML(l, root) { //Return the html used as root for the layer\r\n\t\treturn \"<fieldset><legend>Layer \" + (l + 1) + \" &bull; </legend><div id=\\\"\" + root + \"\\\" style=\\\"position: relative;\\\"></div></fieldset>\";\r\n\t}\r\n\tstatic exportControls(l) { //Create controls allowing export of the layer as jpg or html, for the passed layer object\r\n\t\tlet b = LinkCtrl.buttonBar([ //Create the button bar\r\n\t\t\tLayer.getAsJPGControl(l),\r\n\t\t\tLayer.getAsHTMLControl(l),\r\n\t\t], true); //The second argument is to get the buttonbar inline \r\n\t\tb.style.fontWeight = \"normal\";\r\n\t\tb.style.fontSize = \"0.7em\";\r\n\t\tGetId(l.Root).previousSibling.append(b); //Append the button\r\n\t}\r\n\tstatic getAsJPGControl(l) { //Returns an object suitable to create a button (using the LinkCtrl constructor) that will output the layer l as a jpg\r\n\t\tlet action = function() { //The click action for the button\r\n\t\t\tlet canvas = document.createElement(\"canvas\"); //Create an empty canvas element\r\n\t\t\tcanvas.height = l.Grid.height; //Define its size to match that of the Grid\r\n\t\t\tcanvas.width = l.Grid.width;\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\t\t\tctx.fillStyle = \"white\";\r\n\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height); //Apply a white background first, to prevent transparent pixels from turning black\r\n\t\t\tctx.drawImage(l.Grid, 0, 0); //Draw the grid and contents, drop the highlight\r\n\t\t\tctx.drawImage(l.Contents, 0, 0);\r\n\t\t\tlet href = canvas.toDataURL('image/jpeg');\r\n\t\t\tReporter.printable(\"<p><b>Layer \" + (l.Index + 1) + \"</b></p><img src=\\\"\" + href + \"\\\"></img>\");\r\n\t\t};\r\n\t\treturn {Label: \"jpg\", Title: \"Click here to view this layer as a .jpg image file\", Click: action};\r\n\t}\r\n\tstatic getAsHTMLControl(l) { //Returns an object suitable to create a button (using the LinkCtrl constructor) that will output the layer l as an html array\r\n\t\tlet action = function() { //The click action for the button\r\n\t\t\tlet id = \"Form_GetAsHTML\";\r\n\t\t\tlet controls = id + \"_Controls\";\r\n\t\t\tlet output = id + \"_Output\";\r\n\t\t\tlet data = Layer.getAsHTML(l); //This will get the html for unresolved items and run the promises to get the content for ranges\r\n\t\t\tForm.open({ //Open an empty form with waiting message\r\n\t\t\t\tID: id,\r\n\t\t\t\tHTML: \"<div id=\\\"\" + controls + \"\\\" style=\\\"margin: 10px\\\"><p class=\\\"Error\\\">Resolving names, please wait...</p></div><div id=\" + output + \" style=\\\"max-height: 500px; overflow: auto\\\"><p><b>Layer \" + (l.Index + 1) + \"</b></p>\" + data.HTML + \"</div>\",\r\n\t\t\t\tSize: 700,\r\n\t\t\t\tTitle: \"Layer as HTML\",\r\n\t\t\t\tButtons: [\r\n\t\t\t\t\t{Label: \"Printable Version\", Click: function() {\r\n\t\t\t\t\t\tReporter.printable(GetId(output).innerHTML);\r\n\t\t\t\t\t}, Title: \"Display the layer in a new window to allow easy printing or copy/pasting to other applications\"},\r\n\t\t\t\t\t{Label: \"Close\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)} },\r\n\t\t\t\t],\r\n\t\t\t});\r\n\t\t\tPromise.all(data.Promises).then(function(values) {\r\n\t\t\t\tif(values.length == 0) {GetId(controls).remove(); return} //There are no ranges/definitions, so no need of controls and we can leave here\r\n\t\t\t\tlet r = l.Rows;\r\n\t\t\t\tlet c = l.Cols;\r\n\t\t\t\tlet table = GetId(output).children[1]; //The table with the layer data\r\n\t\t\t\tfor(let i=0; i<r; i++) { //Travel all the rows\r\n\t\t\t\t\tfor(let j=0; j<c; j++) { //Travel all the cols\r\n\t\t\t\t\t\tlet span = table.rows[i+1].cells[j+1].children[2]; //Important to access at row+1/cell+1 because of the headers\r\n\t\t\t\t\t\tif(span && span.hasAttributes(\"resolved\")) { //If this span exists and has the attribute for a resolved name\r\n\t\t\t\t\t\t\tlet resolved = false;\r\n\t\t\t\t\t\t\tvalues.forEach(function(v) { //Travel the ranges definitions to update the current well\r\n\t\t\t\t\t\t\t\tlet def = v.Definition[i * c + j]; //The definition value\r\n\t\t\t\t\t\t\t\tif(def != \"\") { //We expect only one possible definition per well, since we work on a single layer\r\n\t\t\t\t\t\t\t\t\tspan.setAttribute(\"resolved\", def);\r\n\t\t\t\t\t\t\t\t\tresolved = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(resolved == false) {span.setAttribute(\"resolved\", span.getAttribute(\"generic\"))} //This well has no resolvable definitions, its resolved name should be same as the generic name\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlet ctrl = LinkCtrl.new(\"Checkbox\", {ID: controls, Label: \"Show resolved Names\", Default: false, Change: function(v) { //The control allowing switching from generic to resolved names\r\n\t\t\t\t\tlet coll = GetId(output).getElementsByClassName(\"Resolved_Definition\"); //Get the switchable elements\r\n\t\t\t\t\tlet n = coll.length;\r\n\t\t\t\t\tfor(let k=0; k<n; k++) { //Travel the collection to switch the names\r\n\t\t\t\t\t\tif(v) {coll[k].innerHTML = coll[k].getAttribute(\"resolved\")}\r\n\t\t\t\t\t\telse {coll[k].innerHTML = coll[k].getAttribute(\"generic\")}\r\n\t\t\t\t\t}\r\n\t\t\t\t}, Title: \"Tick to show the resolved names instead of the generic names for the ranges\"});\r\n\t\t\t\tctrl.init(); //Display the control\r\n\t\t\t});\r\n\t\t};\r\n\t\treturn {Label: \"html\", Title: \"Click here to view this layer as an html array\", Click: action}\r\n\t}\r\n\tstatic getAsHTML(l) { //Returns a html table filled with the content of the layer passed (area & conc data)\r\n\t\tlet r = l.Rows;\r\n\t\tlet c = l.Cols;\r\n\t\tlet ranges = []; //The array of ranges that will need to be processed for definitions\r\n\t\tlet html = \"<table style=\\\"text-align: center; \\\"><tr><th></th>\";\r\n\t\tfor(let j=0;j<c;j++) { //Headers, for each col\r\n\t\t\thtml += \"<th>\" + (j + 1) + \"</th>\";\r\n\t\t}\r\n\t\thtml += \"</tr>\";\r\n\t\tfor(let i=0;i<r;i++) { //For each row\r\n\t\t\thtml += \"<tr><th>\" + Well.alphabet(i) + \"</th>\";\r\n\t\t\tfor(let j=0;j<c;j++) { //For each col\r\n\t\t\t\tlet w = l.Wells[i * c + j];\r\n\t\t\t\tlet a = w.Area;\r\n\t\t\t\tlet bgColor = \"white\"; //Default values\r\n\t\t\t\tlet color = \"black\";\r\n\t\t\t\tlet name = \"\";\r\n\t\t\t\tif(a) { //Area information\r\n\t\t\t\t\tbgColor = a.Color;\r\n\t\t\t\t\tcolor = CSSCOLORS.font(a.Color); //Adapt font (black/white) depending on the background\r\n\t\t\t\t\tname = \"<span style=\\\"font-weight: bold; border: 1px solid black; padding: 0em 0.1em; margin-right: 0.2em\\\">\" + TypeMap.symbolForValue(TypeMap.valueForType(a.Type)) + \"</span>\" + a.Name;\r\n\t\t\t\t\tif(a.Type == \"Range\") { //For ranges, first collect all the different ranges as they come, then fetch the items at once at the end. This is way faster than waiting for each well to return the resolved value\r\n\t\t\t\t\t\tname += \"&nbsp;(#\" + w.RangeIndex + \")<br><span style=\\\"font-style: italic; padding:0.1em\\\" class=\\\"Resolved_Definition\\\" resolved=\\\"\\\" generic=\\\"#\" + w.RangeIndex + \"\\\">#\" + w.RangeIndex + \"</span>\"; //Prepare placeholders for generice/resolved values, resolved values will be added later\r\n\t\t\t\t\t\tif(ranges.find(function(r) {return r.Name == a.Name}) === undefined) {ranges.push(a)} //Push unique ranges\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\thtml += \"<td style=\\\"background-color:\" + bgColor + \"; color: \" + color + \"; padding: 0.2em; border: 1px solid black\\\">\" + name + \"<br>\" + Well.dose(w) + \"</td>\";\r\n\t\t\t}\r\n\t\t\thtml += \"</tr>\";\r\n\t\t}\r\n\t\thtml += \"</table>\";\r\n\t\tlet promises = [];\r\n\t\tranges.forEach(function(r) {\r\n\t\t\tif(r.Definition) { //If this range has an existing definition\r\n\t\t\t\tpromises.push(Definition.getAsPlate(r.Definition)); //Push the promise\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn {HTML: html, Promises: promises}; //Return the promises without waiting for resolution\r\n\t}\r\n//*******************\r\n//SAVE & LOAD METHODS\r\n//*******************\r\n\tstatic save(lay) { //Return a JSON.stringify version of the layer object for saving\r\n\t\tlet out = [];\r\n\t\tlay.Wells.forEach(function(w) { //Area data are saved separately, so only the concentration data are needed here\r\n\t\t\tif(w.Conc) {\r\n\t\t\t\tout.push(Well.save(w));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn out;\r\n\t}\r\n\tstatic load(l, data, digit, size, margin) { //Update the provided layer with the data provided\r\n\t\tdata.forEach(function(w) {\r\n\t\t\tlet target = l.Wells[w.Index];\r\n\t\t\tif(target) {\r\n\t\t\t\ttarget.tagConc({Value: w.Value, Unit: w.Unit, Digit: digit});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n//*******************\r\n\tstatic resize(l, r, c) { //Resize the layer to new dimension, keeping concentration data if needed\r\n\t\tlet oldRows = l.Rows;\r\n\t\tlet oldCols = l.Cols;\r\n\t\tlet temp = []; //The new Wells array\r\n\t\tvar index = 0; //Index in the new dimension\r\n\t\tlet i = 0;\r\n\t\twhile(i < r) {\r\n\t\t\tlet j = 0;\r\n\t\t\twhile(j < c) {\r\n\t\t\t\tif(j < oldCols && i < oldRows) { //Salvage the old wells\r\n\t\t\t\t\tlet w = l.Wells[oldCols * i + j]; //The old well at this location\r\n\t\t\t\t\tw.Index = index; //Update the index\r\n\t\t\t\t\ttemp.push(w);\r\n\t\t\t\t}\r\n\t\t\t\telse { //Otherwise, push a new well\r\n\t\t\t\t\ttemp.push(new Well({Index: index, Row: i, Col: j, Layer: l}));\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tl.Wells = temp; //Update the layer array\r\n\t\tl.Rows = r; //Update layer size\r\n\t\tl.Cols = c; //\r\n\t}\r\n\tstatic getCoords(e) { //Returns the coordinates for the event e, normalized for either mouse or touch screen events\r\n\t\tif(e.clientX) { //Mouse event\r\n\t\t\treturn {\r\n\t\t\t\tclientX: e.clientX,\r\n\t\t\t\tclientY: e.clientY,\r\n\t\t\t\tlayerX: e.layerX,\r\n\t\t\t\tlayerY: e.layerY,\r\n\t\t\t}\r\n\t\t}\r\n\t\te.preventDefault();\r\n\t\tlet source = e.targetTouches;\r\n\t\tif(e.targetTouches.length == 0) {source = e.changedTouches}\r\n\t\treturn { //Touch Screen event\r\n\t\t\tclientX: source[0].clientX,\r\n\t\t\tclientY: source[0].clientY,\r\n\t\t\tlayerX: source[0].clientX - e.target.getBoundingClientRect().x,\r\n\t\t\tlayerY: source[0].clientY - e.target.getBoundingClientRect().y,\r\n\t\t}\r\n\t}\r\n\t//Methods\r\n\tinit() { //Initialize the html elements for the layer\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<canvas style=\\\"position: absolute;\\\"></canvas>\"; //Highlights should be at the bottom, so that the events fire with Contents as a target //style=\\\"position: absolute; left: 0; top: 0; z-index: 0\\\"\r\n\t\thtml += \"<canvas style=\\\"position: absolute;\\\"></canvas>\"; //Grid\r\n\t\thtml += \"<canvas style=\\\"position: absolute;\\\"></canvas>\"; //Contents\r\n\t\tlet out = GetId(this.Root);\r\n\t\tout.innerHTML = html;\r\n\t\tLayer.exportControls(this); //Prepare the control buttons to get the layer as jpg or html\r\n\t\tthis.Highlight = out.children[0];\r\n\t\tthis.Grid = out.children[1];\r\n\t\tthis.Contents = out.children[2];\r\n\t\tthis.bindEvents(out);\r\n\t\treturn this;\r\n\t}\r\n\tbindEvents(root) { //Bind events to the layer\r\n\t\tlet plate = this.Plate;\r\n\t\tlet timeOut = undefined;\r\n\t\tlet down = function(e) { //Mouse down (or touch start)\r\n\t\t\tif(e.button !== undefined && e.button != 0 ) {return}\r\n\t\t\tif(e.touches !== undefined && e.touches.length > 1) {return}\r\n\t\t\tlet coords = Layer.getCoords(e);\r\n\t\t\tlet w = plate.wellAtPointer(coords, this);\r\n\t\t\tif(e.ctrlKey == false && plate.Options.AddToSel.getValue() == false) {plate.resetSelection()} //Reset previous selection for the entire plate\r\n\t\t\tplate.select(e, coords, {Start: w});\r\n\t\t}.bind(this);\r\n\t\tlet up = function(e) { //Mouseup (touch end)\r\n\t\t\tlet coords = Layer.getCoords(e);\r\n\t\t\tlet w = plate.wellAtPointer(coords, this);\r\n\t\t\tplate.select(e, coords, {Stop: true, Layer: this.Index, Well: w});\r\n\t\t}.bind(this);\r\n\t\tlet stop = function(e) { //Stop the selection\r\n\t\t\tplate.highlight();\r\n\t\t\tif(timeOut) {clearTimeout(timeOut)}\r\n\t\t\tplate.infoPopup(); //hide the popup\r\n\t\t}.bind(this);\r\n\t\tlet move = function(e) { //Move the cursor and extend the selection\r\n\t\t\tif(e.target.nodeName != \"CANVAS\") {return}\r\n\t\t\tlet coords = Layer.getCoords(e);\r\n\t\t\tlet w = plate.wellAtPointer(coords, this);\r\n\t\t\tlet popup = GetId(Editor.Anchors.Popup.Root);\r\n\t\t\tpopup.style.left = coords.clientX + 10 + \"px\";\r\n\t\t\tpopup.style.top = coords.clientY - 40 + \"px\";\r\n\t\t\tif((plate.Highlighting && plate.Highlighting.Index != w.Index) || (plate.Highlighting === undefined)) { //A different well is being highlighted, or nothing is currently highlighted\r\n\t\t\t\tplate.highlight(e, w);\r\n\t\t\t\tif(timeOut) {\r\n\t\t\t\t\tclearTimeout(timeOut);\r\n\t\t\t\t\tplate.infoPopup(); //hide the popup\r\n\t\t\t\t}\r\n//******************************************************************************\r\n//When executing the plate.infoPopup function within the setTimeout method, \r\n//the \"this\" context inside infoPopup is changed to window and no longer points\r\n//to the plate Object. So binding of the plate object is necessary to recover\r\n//the expected this context within infoPopup.\r\n\t\t\t\ttimeOut = setTimeout(plate.infoPopup.bind(plate), 500, e, w); //Show the popup after 500ms of mouse inactivity\r\n//******************************************************************************\r\n\t\t\t}\r\n\t\t\tif(e.buttons == 0) {plate.select(undefined, coords, {Stop: true})}\r\n\t\t\telse {\r\n\t\t\t\tif(plate.Selecting) {plate.select(e, coords, {Move: w})}\r\n\t\t\t}\r\n\t\t}.bind(this);\r\n\t\troot.addEventListener(\"touchstart\", down, {passive: false});\r\n\t\troot.addEventListener(\"mousedown\", down);\r\n\t\troot.addEventListener(\"touchend\", function(e) { //For touch screen there is no pointer out, so combine it with touchend\r\n\t\t\tup(e);\r\n\t\t\tstop(e);\r\n\t\t});\r\n\t\troot.addEventListener(\"mouseup\", up);\r\n\t\troot.addEventListener(\"touchmove\", move, {passive: false});\r\n\t\troot.addEventListener(\"mousemove\", move);\r\n\t\troot.addEventListener(\"mouseout\", stop);\r\n\t\troot.addEventListener(\"wheel\", stop, {passive: true});\r\n\t\treturn this;\r\n\t}\r\n\tgrid(G) { //Draw the grid layer using the grid provided from plate\r\n\t\tlet h = G.height;\r\n\t\tlet w = G.width;\r\n\t\tlet r = Editor.pixelRatio;\r\n\t\t[this.Grid, this.Highlight, this.Contents].forEach(function(c) { // Also resize canvas layers to match grid size\r\n\t\t\tc.height = h;\r\n\t\t\tc.width = w;\r\n\t\t\tc.style.height = h / r + \"px\";\r\n\t\t\tc.style.width = w / r + \"px\";\r\n\t\t});\r\n\t\tlet div = GetId(this.Root); //Wrapping div for the canvas, also adjust its size\r\n\t\tdiv.style.width = (G.width / r) + \"px\";\r\n\t\tdiv.style.height = (G.height / r) + \"px\";\t\t\r\n\t\tthis.Grid.getContext(\"2d\").drawImage(G, 0, 0);\r\n\t\treturn this;\r\n\t}\r\n\thighlight(array) { //Draw the highlight image at the coordinates provided. Each element in array is an object specifying the image to draw and the coordinates x and y\r\n\t\tlet hl = this.Highlight;\r\n\t\tlet ctx = hl.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, hl.width, hl.height);\r\n\t\tif(array.length > 0) {\r\n\t\t\tarray.forEach(function(a) {\r\n\t\t\t\tctx.drawImage(a.Image, a.x, a.y);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tselect(array, size, margin) { //Select wells in array\r\n\t\tlet C = this.Contents;\r\n\t\tlet ctx = C.getContext(\"2d\");\r\n\t\tctx.setTransform(Editor.pixelRatio, 0, 0, Editor.pixelRatio, 0, 0);\r\n//****************************************************************************************\r\n//Here, array is first traversed to set all elements in Selected state\r\n//Then, Wells is fully traversed by filter to recover the selected wells\r\n//Using this approach, the complexity is minimal, because Wells is traversed only once\r\n//Other approaches would require to traverse Wells n times, where n is the size of array,\r\n//in order to guarantee unicity of the selected wells in the Selected array\r\n\t\tarray.forEach(function(w) {\r\n\t\t\tif(w) {\r\n\t\t\t\tw.Selected = true;\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.Selected = this.Wells.filter(function(w) {return w.Selected});\r\n//****************************************************************************************\r\n\t\treturn this;\r\n\t}\r\n\tunselect(size, margin) {\r\n\t\tif(this.Selected) {\r\n\t\t\tlet C = this.Contents;\r\n\t\t\tlet ctx = C.getContext(\"2d\");\r\n\t\t\tthis.Selected.forEach(function(w) {\r\n\t\t\t\tw.Selected = false;\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t});\r\n\t\t\tthis.Selected = undefined;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tcontent(size, margin) { //Draw the content of each well\r\n\t\tlet C = this.Contents;\r\n\t\tlet ctx = C.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, C.width, C.height);\r\n\t\tctx.font = (Math.floor(margin / 2) * 5) + \"px arial\"; //Increment the size by 5px every 2 increments.\r\n\t\tctx.setTransform(Editor.pixelRatio, 0, 0, Editor.pixelRatio, 0, 0);\r\n\t\tthis.Wells.forEach(function(w) {\r\n\t\t\tw.content(ctx, size, margin);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tsetIndex(i) { //Update the Layer property of each well to the specified index\r\n\t\tthis.Index = i; //Update layer object property\r\n\t\tGetId(this.Root).previousSibling.innerHTML = \"Layer \" + (i + 1); //Also change the html displayed\r\n\t}\r\n\ttagArea(a, I) { //Tag the area in selection\r\n\t\tlet R = I.Results; //Results of the tagging\r\n\t\tif(this.Selected) {\r\n\t\t\tI.Layer = this;\r\n\t\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\t\tlet size = I.Size;\r\n\t\t\tlet margin = I.Margin;\r\n\t\t\tthis.Selected.forEach(function(w) {\r\n\t\t\t\tw.tag(a, I);\r\n\t\t\t\tif(w.Duplicate == false && w.Error == false) { //Not tagged in duplicate or in error\r\n\t\t\t\t\tArea.log(a, this, w); //Log the well in the area\r\n\t\t\t\t\tR.Tagged++;\r\n\t\t\t\t\tif(a.Type != \"Range\" || (a.Type == \"Range\" && a.Custom)) {w.content(ctx, size, margin)} //Update well display. In case of range, this will be done at the end, after all wells are logged\r\n\t\t\t\t}\r\n\t\t\t\telse { //Update display for wells on error or duplicate\r\n\t\t\t\t\tif(w.Error) {w.content(ctx, size, margin)} //Always update wells on error\r\n\t\t\t\t\telse { //For duplicate, update now only if not range, otherwise it will be done at the end\r\n\t\t\t\t\t\tif(a.Type != \"Range\" || (a.Type == \"Range\" && a.Custom)) {w.content(ctx, size, margin)}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tR.Selected++;\r\n\t\t\t}, this);\r\n\t\t\tif(I.Keep == false) {this.Selected = undefined} //Reset the selection\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tuntag(I) { //Untage the areas in the selected wells\r\n\t\tlet R = I.Results;\r\n\t\tif(this.Selected) {\r\n\t\t\tI.Layer = this;\r\n\t\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\t\tlet size = I.Size;\r\n\t\t\tlet margin = I.Margin;\r\n\t\t\tthis.Selected.forEach(function(w) {\r\n\t\t\t\tw.untag(I);\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\tR.Untag++;\r\n\t\t\t});\r\n\t\t\tif(I.Keep == false) {this.Selected = undefined} //Reset the selection\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\thighlightConflicts(conflicts, size, margin) { //Highlight wells with indices passed in the array conflicts\r\n\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\tlet w = this.Wells;\r\n\t\tlet array = [];\r\n\t\tconflicts.forEach(function(c) {\r\n\t\t\tw[c].Error = true;\r\n\t\t\tarray.push(w[c]);\r\n\t\t});\r\n\t\tthis.select(array, size, margin);\r\n\t\treturn this;\r\n\t}\r\n\ttagConc(I) { //Tag the concentration given in the selected wells\r\n\t\tif(this.Selected) {\r\n\t\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\t\tlet size = I.Size;\r\n\t\t\tlet margin = I.Margin;\r\n\t\t\tthis.Selected.forEach(function(w) {\r\n\t\t\t\tw.tagConc(I);\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\tI.Selected++;\r\n\t\t\t});\r\n\t\t\tif(I.Keep == false) {this.Selected = undefined} //Reset the selection\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tuntagConc(I) { //UnTag the concentration given in the selected wells\r\n\t\tif(this.Selected) {\r\n\t\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\t\tlet size = I.Size;\r\n\t\t\tlet margin = I.Margin;\r\n\t\t\tthis.Selected.forEach(function(w) {\r\n\t\t\t\tw.untagConc();\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\tI.Selected++;\r\n\t\t\t});\r\n\t\t\tif(I.Keep == false) {this.Selected = undefined} //Reset the selection\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tresetConc(I) { //Reset concentrations for all wells\r\n\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\tlet size = I.Size;\r\n\t\tlet margin = I.Margin;\r\n\t\tthis.Wells.forEach(function(w) {\r\n\t\t\tw.untagConc();\r\n\t\t\tw.content(ctx, size, margin);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tconcMap(root) { //Display a map of the concentrations for this layer, in the container adjacent to the provided root \r\n\t\tlet r = this.Rows;\r\n\t\tlet c = this.Cols;\r\n\t\tlet html = \"<table class=\\\"PlateTable\\\"><tr><th></th>\";\r\n\t\tfor(let j=0;j<c;j++) { //Headers, for each col\r\n\t\t\thtml += \"<th>\" + (j + 1) + \"</th>\";\r\n\t\t}\r\n\t\tlet min = Math.log10(this.Wells.reduce(function(a, b) {\r\n\t\t\tif(b.Value) {return Math.min(a, b.Value)}\r\n\t\t\telse {return a}\r\n\t\t}, +Infinity)); //Must provide an initial value to avoid NaN\r\n\t\tlet max = Math.log10(this.Wells.reduce(function(a, b) {\r\n\t\t\tif(b.Value) {return Math.max(a, b.Value)}\r\n\t\t\telse {return a}\r\n\t\t}, -Infinity)); //Must provide an initial value to avoid NaN\r\n\t\tlet colors = [[150,150,255], [255,255,255], [255,150,150]]; //Blue-White-Red (min-middle-max)\r\n\t\thtml += \"</tr>\";\r\n\t\tfor(let i=0;i<r;i++) { //For each row\r\n\t\t\thtml += \"<tr><th>\" + Well.alphabet(i) + \"</th>\";\r\n\t\t\tfor(let j=0;j<c;j++) { //For each col\r\n\t\t\t\tlet w = this.Wells[i * c + j];\r\n\t\t\t\thtml += \"<td style=\\\"background-color:\" + CSSCOLORS.heatmap(Math.log10(w.Value), min, max, colors) + \"\\\">\" + Well.dose(w) + \"</td>\";\r\n\t\t\t}\r\n\t\t\thtml += \"</tr>\";\r\n\t\t}\r\n\t\thtml += \"</table>\";\r\n\t\tGetId(root).nextElementSibling.innerHTML = html;\r\n\t\treturn this;\r\n\t}\r\n\ttagDRC(I) { //Tag the selected wells with the DRC provided\r\n\t\tlet S = this.Selected;\r\n\t\tif(S) {\r\n\t\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\t\tlet size = I.Size;\r\n\t\t\tlet margin = I.Margin;\r\n\t\t\tif(I.Direction == \"Horizontal\") {S.sort(function(a, b) {return a.Index - b.Index})} //Sort per well Index for horizontal mode\r\n\t\t\telse {S.sort(function(a, b) {return ((a.Col - b.Col) || (a.Row - b.Row))})} //Sort per Col, then by row for vertical mode\r\n\t\t\tlet rep = 0; //Current replicate\r\n\t\t\tlet value = I.Value; //Current value\r\n\t\t\tlet dose = 0; //Current dose\r\n\t\t\tS.forEach(function(w) {\r\n\t\t\t\tw.tagConc(I);\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t\trep++;\r\n\t\t\t\tif(rep == I.Rep) { //Number of replicates reached, move to the next dose\r\n\t\t\t\t\trep = 0; //Reset the replicate\r\n\t\t\t\t\tdose++; //Move a dose up\r\n\t\t\t\t\tif(dose == I.Doses) { //End of the DRC, start at the beginning\r\n\t\t\t\t\t\tI.Value = value;\r\n\t\t\t\t\t\tdose = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { //Compute the next dose\r\n\t\t\t\t\t\tI.Value = eval(I.Value + I.Operator + I.Factor);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tI.Selected++;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tchangeDigit(digit, size, margin) { //Redraw the wells to update the digit\r\n\t\tlet ctx = this.Contents.getContext(\"2d\");\r\n\t\tthis.Wells.forEach(function(w) {\r\n\t\t\tif(w.Conc) {\r\n\t\t\t\tw.changeDigit(digit);\r\n\t\t\t\tw.content(ctx, size, margin);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n}","//**************************************************************************************\r\n// PARAMETER object - Handling of data attached to parameters extracted from result file\r\n//**************************************************************************************\r\nclass Parameter {\r\n\tconstructor(name, unit) {\r\n\t\tthis.ID = undefined; //ID for the heatmap element. Will be assigned before drawing\r\n\t\tthis.Name = name //Parameter name, for html display\r\n\t\tthis.Unit = (unit || \"\"); //Unit in which values of this parameter are expressed\r\n\t\tthis.Selected = false; //Parameter is selected for output\r\n\t\tthis.Numeric = undefined; //This parameter has numeric or textual values\r\n\t\tthis.GlobalMin = +Infinity; //Minimum numerical value found for the entire file\r\n\t\tthis.GlobalMax = -Infinity; //Maximum numerical value found for the entire file\r\n\t\tthis.Grid = document.createElement(\"canvas\");\r\n\t\tthis.Highlight = document.createElement(\"canvas\");\r\n\t\t[this.Grid, this.Highlight].forEach(function(c) { //Apply styling\r\n\t\t\tc.style.position = \"absolute\";\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t//Static methods\r\n\tstatic getMinMax(p, data, I) { //For the parameter object passed, return the values of min and max to use for a heatmap of values in data\r\n\t\tlet min = p.GlobalMin; //Defines the min & max values to use\r\n\t\tlet max = p.GlobalMax;\r\n\t\tif(I) {\r\n\t\t\tif(I.Local) { //Use min/max values for this plate\r\n\t\t\t\tmin = data.reduce(function(min, cur) { //The minimum value for this plate\r\n\t\t\t\t\tif(isNaN(cur)) {return min}\r\n\t\t\t\t\telse {return Math.min(min, cur)}\r\n\t\t\t\t}, +Infinity);\r\n\t\t\t\tmax = data.reduce(function(max, cur) { //The maximum value for this plate\r\n\t\t\t\t\tif(isNaN(cur)) {return max}\r\n\t\t\t\t\telse {return Math.max(max, cur)}\r\n\t\t\t\t}, -Infinity);\r\n\t\t\t}\r\n\t\t\telse { //Use the values provided by the user\r\n\t\t\t\tmin = I.Min;\r\n\t\t\t\tmax = I.Max;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {Min: min, Max: max}\r\n\t}\r\n\t//Methods\r\n\tresize(plate) { //Resize the canvases to match that of the plate\r\n\t\tlet w = plate.Grid.width;\r\n\t\tlet h = plate.Grid.height;\r\n\t\tlet r = Editor.pixelRatio;\r\n\t\t[this.Grid, this.Highlight].forEach(function(c) { //Resize the elements\r\n\t\t\tc.width = w;\r\n\t\t\tc.height = h;\r\n\t\t\tc.style.width = (w / r) + \"px\";\r\n\t\t\tc.style.height = (h / r) + \"px\";\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tgrid(plate) { //Redraw the grid with the dimensions from the plate\r\n\t\tlet size = plate.WellSize;\r\n\t\tlet space = size + plate.WellMargin;\r\n\t\tlet ctx = this.Grid.getContext(\"2d\");\r\n\t\tctx.drawImage(plate.Grid, 0, 0); //Draw the grid from the plate\r\n\t\tctx.setTransform(Editor.pixelRatio, 0, 0, Editor.pixelRatio, 0, 0);\r\n\t\tctx.lineWidth = 2;\r\n\t\tctx.strokeStyle = \"red\"; //Draw a \"x\" in each well, that will remain visible if no data is present for this well\r\n\t\tlet row = plate.Rows;\r\n\t\tlet col = plate.Cols;\r\n\t\tfor(let i=0;i<row;i++) { //Rows\r\n\t\t\tfor(let j=0;j<col;j++) { //Columns\r\n\t\t\t\tlet x = (j + 1) * space;\r\n\t\t\t\tlet y = (i + 1 ) * space;\r\n\t\t\t\tctx.beginPath();\r\n\t\t\t\tctx.moveTo(x + size * 0.2, y + size * 0.2);\r\n\t\t\t\tctx.lineTo(x + size * 0.8, y + size * 0.8);\r\n\t\t\t\tctx.moveTo(x + size * 0.8, y + size * 0.2);\r\n\t\t\t\tctx.lineTo(x + size * 0.2, y + size * 0.8);\r\n\t\t\t\tctx.stroke();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\theatmap(value, index, plate, Gradcolors, min, max) { //Draw the provided value at the well location in the heatmap\r\n\t\tif(value === undefined || isNaN(value)) {return this}\r\n\t\tlet ctx = this.Grid.getContext(\"2d\");\r\n\t\tlet size = plate.WellSize;\r\n\t\tlet margin = plate.WellMargin;\r\n\t\tlet space = size + margin;\r\n\t\tlet row = Math.floor(index / plate.Cols);\r\n\t\tlet col = index - (row * plate.Cols);\r\n\t\tctx.fillStyle = CSSCOLORS.heatmap(value, min, max, Gradcolors);\r\n\t\tctx.fillRect((col + 1) * space, (row + 1 ) * space, size, size);\r\n\t\treturn this;\r\n\t}\r\n\ttxt(value, index, plate) { //Draw the text content for textual parameters\r\n\t\tif(value === undefined) {return this}\r\n\t\tlet ctx = this.Grid.getContext(\"2d\");\r\n\t\tlet size = plate.WellSize;\r\n\t\tlet margin = plate.WellMargin;\r\n\t\tlet space = size + margin;\r\n\t\tlet row = Math.floor(index / plate.Cols);\r\n\t\tlet col = index - (row * plate.Cols);\r\n\t\tlet x = (col + 1) * space;\r\n\t\tlet y = (row + 1 ) * space;\r\n\t\tctx.fillStyle = \"white\";\r\n\t\tctx.fillRect(x, y, size, size);\r\n\t\tctx.fillStyle = \"black\";\r\n\t\tctx.font = (Math.floor(margin / 2) * 2 + 3) + \"px arial\";\r\n\t\tctx.textAlign = \"center\";\r\n\t\tctx.textBaseline = \"middle\";\r\n\t\tctx.fillText(value, x + size * 0.5, y + size * 0.5, size); //MaxWidth specified to avoid excessive overlap\r\n\t\treturn this;\r\n\t}\r\n\tdraw(result, p) { //Output the heatmap in the root element\r\n\t\tlet target = GetId(this.ID);\r\n\t\tlet r = Editor.pixelRatio;\r\n\t\ttarget.innerHTML = \"\"; //Remove previous content\r\n\t\ttarget.style.width = (this.Grid.width / r) + \"px\"; //Adjust container size\r\n\t\ttarget.style.height = (this.Grid.height / r) + \"px\";\r\n\t\ttarget.appendChild(this.Highlight);\r\n\t\ttarget.appendChild(this.Grid); //Append the canvas\r\n\t\tlet plate = Editor.Plate;\r\n\t\tlet timeOut = undefined;\r\n\t\ttarget.addEventListener(\"mousemove\", function(e) { //Attach events to the div\r\n\t\t\tif(e.target.nodeName != \"CANVAS\") {return}\r\n\t\t\tlet lay = Editor.ResultManager.LayerSelect.Selected - 1; //The layer to use to display information in the tooltip\r\n\t\t\tlet w = plate.wellAtPointer(e, plate.Layers[lay]);\r\n\t\t\tlet popup = GetId(Editor.Anchors.Popup.Root);\r\n\t\t\tpopup.style.left = e.clientX + 10 + \"px\";\r\n\t\t\tpopup.style.top = e.clientY - 40 + \"px\";\r\n\t\t\tif((plate.Highlighting && plate.Highlighting.Index != w.Index) || (plate.Highlighting === undefined)) { //A different well is being highlighted, or nothing is currently highlighted\r\n\t\t\t\tplate.highlight(e, w);\r\n\t\t\t\tif(timeOut) {\r\n\t\t\t\t\tclearTimeout(timeOut);\r\n\t\t\t\t\tplate.infoPopup(); //hide the popup\r\n\t\t\t\t}\r\n//******************************************************************************\r\n//When executing the plate.infoPopup function within the setTimeout method, \r\n//the \"this\" context inside infoPopup is changed to window and no longer points\r\n//to the plate Object. So binding of the plate object is necessary to recover\r\n//the expected this context within infoPopup.\r\n\t\t\t\t//timeOut = setTimeout(plate.infoPopup.bind(plate), 500, e, w, result.getValue(index, w)); //Show the popup after 500ms of mouse inactivity\r\n\t\t\t\ttimeOut = setTimeout(plate.infoPopup.bind(plate), 500, e, w, {Result: result, Parameter: p}); //Show the popup after 500ms of mouse inactivity\r\n//******************************************************************************\r\n\t\t\t}\r\n\t\t}.bind(this));\r\n\t\ttarget.addEventListener(\"mouseout\", function(e) {\r\n\t\t\tplate.highlight();\r\n\t\t\tif(timeOut) {clearTimeout(timeOut)}\r\n\t\t\tplate.infoPopup(); //hide the popup\r\n\t\t}.bind(this));\r\n\t\ttarget.addEventListener(\"wheel\", function(e) {\r\n\t\t\tplate.highlight();\r\n\t\t\tif(timeOut) {clearTimeout(timeOut)}\r\n\t\t\tplate.infoPopup(); //hide the popup\r\n\t\t}.bind(this), {passive: true});\r\n\t\treturn this;\r\n\t}\r\n\thighlight(array) { //Draw the highlight image at the coordinates provided. Each element in array is an object specifying the image to draw and the coordinates x and y\r\n\t\tlet hl = this.Highlight;\r\n\t\tlet ctx = hl.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, hl.width, hl.height); //Reset the drawing\r\n\t\tif(array.length > 0) {\r\n\t\t\tarray.forEach(function(a) {\r\n\t\t\t\tctx.drawImage(a.Image, a.x, a.y); //Apply the image\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}","//***********************************************************************************************************\r\n// PLATE object - Plate is an array of layers; layer is an array of wells; well is a collection of properties\r\n//***********************************************************************************************************\r\nclass Plate {\r\n\tconstructor(root, r, c) {\r\n\t\tthis.Rows = r;\r\n\t\tthis.Cols = c;\r\n\t\tthis.Root = root;\r\n\t\tthis.WellSize = 20;\r\n\t\tthis.WellMargin = 5;\r\n\t\tthis.Highlighting = undefined; //Well currently highlighted\r\n\t\tthis.Selecting = undefined; //Object to handle the selection\r\n\t\tthis.Anchors = {\r\n\t\t\tOptions: root + \"_Options\",\r\n\t\t\tSelection: root + \"_Selection\",\r\n\t\t\tLayerTab: root + \"_LayerTab\",\r\n\t\t\tLayerSelect: root + \"_LayerSelect\",\r\n\t\t}\r\n\t\tthis.Options = {\r\n\t\t\tKeepSelected: LinkCtrl.new(\"Checkbox\", {ID: this.Anchors.Options, Title: \"If checked, the selection will remain active after a tag (area or concentration)\", Default: true, Label: \"Keep selection\", Chain: {Index: 0}}),\r\n\t\t\tDigits: LinkCtrl.new(\"Select\", {ID: this.Anchors.Options, Title: \"Number of digits to show for the concentrations\", Label: \"Digits\", Default: 1, List: [2, 3, 4, 5, 6, \"All\"], Chain: {Index: 1, Last: true}, Change: function(v) {this.digit()}.bind(this)}),\r\n\t\t\tAddToSel: LinkCtrl.new(\"Checkbox\", {ID: this.Anchors.Selection, Default: false, Label: \"Multiple\", Title: \"If turned on, selected wells will be added to the current selection. If you have a keyboard, keep the Ctrl key pressed down while selecting to obtain the same effect.\"}),\r\n\t\t}\r\n\t\tthis.Controls = {\r\n\t\t\tLayerSelect: LinkCtrl.new(\"Select\", {ID: this.Anchors.LayerSelect, Default: 0, Label: \"Layer\", List: [1], NavBar: true, Change: function(v) {\r\n\t\t\t\tthis.Layers[v].concMap(this.Anchors.LayerSelect)\r\n\t\t\t}.bind(this), Title: \"Select the layer to use for display\"}),\r\n\t\t}\r\n\t\tthis.TypeMap = new TypeMap(this);\r\n\t\tthis.Grid = document.createElement(\"canvas\");\r\n\t\tthis.Highlight = document.createElement(\"canvas\");\r\n\t\tthis.Header = document.createElement(\"canvas\");\r\n\t\tthis.Layers = [new Layer({Rows: r, Cols: c, Layer: 0, Plate: this})];\r\n\t\tthis.LastKey = 1; //Index to use for new layers, to guarantee unicity\r\n\t\tthis.LayerTab = new TabControl({\r\n\t\t\tID: this.Anchors.LayerTab,\r\n\t\t\tMultiple: true,\r\n\t\t\tTabs: [{\r\n\t\t\t\tLabel: \"Layer 1\",\r\n\t\t\t\tActive: true,\r\n\t\t\t\tControls: [\"Delete\"],\r\n\t\t\t\tContent: {Type: \"HTML\", Value: Layer.rootHTML(0, this.Layers[0].Root)}\r\n\t\t\t}],\r\n\t\t\tAfterDelete: function(l) {this.deleteLayer(l)}.bind(this),\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic styleCtx(ctx, style) { //Apply style to the canvas ctx based on the style string passed\r\n\t\tctx.setTransform(Editor.pixelRatio, 0, 0, Editor.pixelRatio, 0, 0);\r\n\t\tswitch(style) {\r\n\t\t\tcase \"grid\":\r\n\t\t\t\tctx.lineWidth = 2;\r\n\t\t\t\tctx.strokeStyle = \"dimgray\";\r\n\t\t\t\tctx.textAlign = \"center\";\r\n\t\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"highlight\":\r\n\t\t\t\tctx.strokeStyle = \"gold\";\r\n\t\t\t\tctx.lineWidth = 2;\r\n\t\t\t\tctx.shadowColor = \"goldenrod\";\r\n\t\t\t\tctx.shadowBlur = 5;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"header\":\r\n\t\t\t\tctx.fillStyle = \"pink\";\r\n\t\t\t\tctx.shadowColor = \"pink\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"selectBox\":\r\n\t\t\t\tctx.strokeStyle = \"blue\";\r\n\t\t\t\tctx.fillStyle = \"gray\";\r\n\t\t\t\tctx.globalAlpha = 0.4;\r\n\t\t\t\tctx.setLineDash([1, 2]);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"selecting\":\r\n\t\t\t\tctx.fillStyle = \"gold\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n//*******************\r\n//SAVE & LOAD METHODS\r\n//*******************\r\n\tstatic save(plate) { //Return a JSON.stringify version of the plate object for saving\r\n\t\tif(plate === undefined) {return \"null\"}\r\n\t\tlet out = [];\r\n\t\tplate.Layers.forEach(function(l) {\r\n\t\t\tout.push(Layer.save(l));\r\n\t\t});\r\n\t\treturn JSON.stringify({\r\n\t\t\tRows: plate.Rows,\r\n\t\t\tCols: plate.Cols,\r\n\t\t\tKeepSelected: plate.Options.KeepSelected.getValue(),\r\n\t\t\tDigits: plate.Options.Digits.getValue(),\r\n\t\t\tLayers: out\r\n\t\t});\r\n\t}\r\n\tstatic loadPreview(plate, id) { //Prepare a preview out of the loaded information from plate\r\n\t\tlet html = \"\";\r\n\t\tif(plate) {\r\n\t\t\thtml += \"Rows: <b>\" + plate.Rows + \"</b>; \";\r\n\t\t\thtml += \"Cols: <b>\" + plate.Cols + \"</b><br>\";\r\n\t\t\thtml += \"Layers: <b>\" + plate.Layers.length + \"</b>\";\r\n\t\t}\r\n\t\telse {html = \"<p class=\\\"Error\\\">No data</p>\"}\r\n\t\tGetId(id).insertAdjacentHTML(\"beforeend\", html);\r\n\t}\r\n\tstatic load(plate, data) { //Update the provided plate with the layers data provided \r\n\t\tplate.Options.KeepSelected.setValue(data.KeepSelected);\r\n\t\tplate.Options.Digits.setValue(data.Digits);\r\n\t\tdata.Layers.forEach(function(l, i) {\r\n\t\t\tif(i > 0) {plate.addLayer()} //First layer is already created, but need to create the others\r\n\t\t\tLayer.load(plate.Layers[i], l, plate.Options.Digits.Selected, plate.WellSize, plate.WellMargin);\r\n\t\t});\r\n\t}\r\n//*******************\r\n\tstatic resize(plate, r, c) { //Resize the plate to the new dimensions, keeping concentration data if needed\r\n\t\tvar digit = plate.Options.Digits.Selected;\r\n\t\tplate.Layers.forEach(function(l, i) { //For each layer, travel the new dimensions and update the wells arrays\r\n\t\t\tLayer.resize(l, r, c);\r\n\t\t});\r\n\t\tplate.TypeMap.resize(r, c); //Resize the typeMap by keeping only relevant wells\r\n\t\tplate.Rows = r; //Adjust the plate properties\r\n\t\tplate.Cols = c; //\r\n\t\tplate.update(); //Finally update the drawings\r\n\t\tlet R = Editor.Tables.Results; //Now process changes for the results\r\n\t\tR.Array.forEach(function(r) {r.Validated = false}); //Need to recalculate the Min/Max values for the heatmap after resizing: set all results as not validated\r\n\t\tR.update(); //Update changes visually in the tables\r\n\t\tlet results = R.Selected;\r\n\t\tif(results.length > 0) {Editor.ResultManager.draw(results[0], {NoPrompt: true})}\r\n\t}\r\n\tstatic tagArea(plate, a, I) { //Tag area a in the selected wells\r\n\t\tI.Keep = plate.Options.KeepSelected.getValue();\r\n\t\tI.Size = plate.WellSize;\r\n\t\tI.Margin = plate.WellMargin;\r\n\t\tI.Map = plate.TypeMap;\r\n\t\tI.Results = {Tagged: 0, Selected: 0, Ranges: []}\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tif(a.Type == \"Range\" && a.Custom) {\r\n\t\t\t\tlet id = \"Form_CustomRange\";\r\n\t\t\t\tlet control = id + \"_RangeIndex\";\r\n\t\t\t\tlet RangeIndex = LinkCtrl.new(\"Number\", {ID: control, Default: a.MaxRange + 1, Min: 1, Label: \"Range index\", Title: \"Indicate here the numbering that should be applied to the tagged wells\"});\r\n\t\t\t\tForm.open({\r\n\t\t\t\t\tID: id,\r\n\t\t\t\t\tHTML: \"<div id=\\\"\" + control + \"\\\"></div>\",\r\n\t\t\t\t\tTitle: \"Custom numbering\",\r\n\t\t\t\t\tButtons: [\r\n\t\t\t\t\t\t{Label: \"Ok\", Click: function() {\r\n\t\t\t\t\t\t\tI.RangeIndex = RangeIndex.getValue(); //Get the value of the rangeIndex\r\n\t\t\t\t\t\t\tresolve(plate.tagArea(a, I));\r\n\t\t\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\t\t} },\r\n\t\t\t\t\t\t{Label: \"Cancel\", Click: function() {\r\n\t\t\t\t\t\t\tI.Cancel = true;\r\n\t\t\t\t\t\t\tresolve(I);\r\n\t\t\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\t\t} },\r\n\t\t\t\t\t],\r\n\t\t\t\t\tonInit: function() {RangeIndex.init()},\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {resolve(plate.tagArea(a, I))}\r\n\t\t});\r\n\t}\r\n\t//Methods\r\n\tinit() {\r\n\t\tlet out = GetId(this.Root);\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<div style=\\\"overflow: auto\\\">\"; //Options ribbon\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Selection</legend><div id=\\\"\" + this.Anchors.Selection + \"\\\"></div></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Zoom</legend></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Options</legend><div id=\\\"\" + this.Anchors.Options + \"\\\"></div></fieldset>\"; \r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Views</legend></fieldset>\";\r\n\t\thtml += \"</div>\";\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.LayerTab + \"\\\" style=\\\"margin-top: 10px\\\"></div>\"; //Tab container for layers\r\n\t\tout.innerHTML = html;\r\n\t\tthis.LayerTab.init();\r\n\t\tthis.Layers[0].init(); //Only one layer available at the beginning\r\n\t\tObject.values(this.Options).forEach(function(o) {o.init()});\r\n\t\tlet b = LinkCtrl.buttonBar([\r\n\t\t\t{Label: \"Add layer\", Title: \"Add a new layer to the plate\", Click: function() {this.addLayer()}.bind(this)},\r\n\t\t], true); //Here true is set so that the buttons are added Inline\r\n\t\tlet o = GetId(this.Anchors.Options);\r\n\t\to.insertAdjacentHTML(\"beforeend\", \"&nbsp;\");\r\n\t\to.append(b);\r\n\t\tlet z = LinkCtrl.buttonBar([ //Zoom controls\r\n\t\t\t{Label: \"\", Title: \"Zoom in on the layout, each well will be bigger\", Icon: {Type: \"ZoomIn\"}, Click: function() {this.zoom(1)}.bind(this)},\r\n\t\t\t{Label: \"\", Title: \"Zoom out on the layout, each well will be smaller\", Icon: {Type: \"ZoomOut\"}, Click: function() {this.zoom(-1)}.bind(this)},\r\n\t\t]);\r\n\t\tout.children[0].children[1].append(z);\r\n\t\tlet v = LinkCtrl.buttonBar([ //Views controls\r\n\t\t\t{Label: \"Types\", Title: \"Display a map showing the type of area defined for each well\", Click: function() {this.typeMap()}.bind(this)},\r\n\t\t\t{Label: \"Plates\", Title: \"Display a form to navigate between the different plates available for the definitions\", Click: function() {this.plateMap()}.bind(this)},\r\n\t\t\t{Label: \"Conc.\", Title: \"Display a map showing the concentrations defined for each well, per layer\", Click: function() {this.concMap()}.bind(this)},\r\n\t\t]);\r\n\t\tout.children[0].children[3].append(v);\r\n\t\tlet s = LinkCtrl.buttonBar([ //Selection controls\r\n\t\t\t{Label: \"Clear\", Title: \"Unselect all wells for all layers\", Click: function() {this.resetSelection()}.bind(this)},\r\n\t\t], true);\r\n\t\to = GetId(this.Anchors.Selection);\r\n\t\to.insertAdjacentHTML(\"beforeend\", \"&nbsp;\");\r\n\t\to.append(s);\r\n\t\tthis.grid();\r\n\t\treturn this;\r\n\t}\r\n//*************\r\n//LAYER METHODS\r\n//*************\r\n\taddLayer() { //Add a new layer to the plate\r\n\t\tlet l = this.LastKey++; //Index of the new layer to add\r\n\t\tlet lay = this.Layers;\r\n\t\tlet here = lay.length; //Last index in the array is the one to display in html\r\n\t\tlet newLayer = new Layer({Rows: this.Rows, Cols: this.Cols, Layer: l, Plate: this});\r\n\t\tlay.push(newLayer);\r\n\t\tthis.LayerTab.addTab({\r\n\t\t\tLabel: \"Layer \" + (here + 1),\r\n\t\t\tSetActive: true,\r\n\t\t\tControls: [\"Delete\"],\r\n\t\t\tContent: {Type: \"HTML\", Value: Layer.rootHTML(here, newLayer.Root)}\r\n\t\t});\r\n\t\tnewLayer.init().grid(this.Grid);\r\n\t\tEditor.ResultManager.layerUpdate(); //Update the layer control\r\n\t\treturn this;\r\n\t}\r\n\tdeleteLayer(l) { //Delete layer with provided index\r\n\t\tthis.Layers.splice(l,1); //Remove the layer from the array\r\n\t\tvar tab = this.LayerTab;\r\n\t\tthis.Layers.forEach(function(L, i) { //Redefine index of the layers and wells\r\n\t\t\tif(i > (l-1)) { //Only update layers above the layer to be removed\r\n\t\t\t\tL.setIndex(i);\r\n\t\t\t\ttab.rename(i, \"Layer \" + (i + 1));\r\n\t\t\t}\r\n\t\t});\r\n\t\tEditor.ResultManager.layerUpdate(); //Update the layer control\r\n\t\treturn this;\r\n\t}\r\n\twellAtPointer(e, l) {\r\n\t\tlet margin = this.WellMargin;\r\n\t\tlet space = this.WellSize + margin;\r\n\t\tlet offset = space - 0.5 * margin;\r\n\t\tlet col = Math.floor((e.layerX - offset) / space);\r\n\t\tlet row = Math.floor((e.layerY - offset) / space);\r\n\t\tif(col > -1 && row > -1 && row < this.Rows && col < this.Cols) {return l.Wells[row * this.Cols + col]} //Return a \"true\" well object\r\n\t\telse { //Pointer is on a row or col header, return a simplified version of a well\r\n\t\t\treturn {Col: col, Row: row, Layer: l, Index: row * this.Cols + col, Header: true}\r\n\t\t}\r\n\t}\r\n//**************\r\n//CANVAS METHODS\r\n//**************\r\n\tzoom(e) { //Zoom in or out \r\n\t\tvar zoomChange = false;\r\n\t\tif(e < 0) { //Zoom out, reduce size\r\n\t\t\tif(this.WellSize > 10) {\r\n\t\t\t\tthis.WellSize -= 10;\r\n\t\t\t\tthis.WellMargin -= 2;\r\n\t\t\t\tzoomChange = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse { //Zoom in, increase size\r\n\t\t\tif(this.WellSize < 70) {\r\n\t\t\t\tthis.WellSize += 10;\r\n\t\t\t\tthis.WellMargin += 2;\r\n\t\t\t\tzoomChange = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(zoomChange) { //Only update if the zoom level as changed\r\n\t\t\tthis.update();\r\n\t\t\tlet results = Editor.Tables.Results.Selected;\r\n\t\t\tif(results.length > 0 && results[0].Validated == true) {Editor.ResultManager.draw(results[0])}\r\n\t\t}\r\n\t}\r\n\tupdate() { //Update all drawings\r\n\t\tvar size = this.WellSize;\r\n\t\tvar margin = this.WellMargin;\r\n\t\tthis.grid();\r\n\t\tif(this.Selecting) { //Interrupt the selection\r\n\t\t\tthis.select(undefined, undefined, {Stop: true});\r\n\t\t}\r\n\t\tthis.Layers.forEach(function(L) { //redraw all layers\r\n\t\t\tL.content(size, margin);\r\n\t\t}, this);\r\n\t\treturn this;\r\n\t}\r\n\tgrid() { //Draw the grid layer at the current zoom level\r\n\t\tlet size = this.WellSize;\r\n\t\tlet margin = this.WellMargin;\r\n\t\tlet c = this.Cols;\r\n\t\tlet r = this.Rows;\r\n\t\tlet space = size + margin;\r\n\t\tlet G = this.Grid;\r\n\t\tlet ratio = Editor.pixelRatio;\r\n\t\tG.width = (c + 1) * space * Editor.pixelRatio; //Changing the size will reset the pixels to transparent\r\n\t\tG.height = (r + 1) * space * Editor.pixelRatio;\r\n\t\tlet ctx = G.getContext(\"2d\");\r\n\t\tPlate.styleCtx(ctx, \"grid\");\r\n\t\tctx.font = \"bold \" + (Math.floor(margin / 2) * 5 + 5) + \"px arial\"; //Increment the size by 5px every 2 increments. Parenthesis are mandatory to get correct addition\r\n\t\tfor(let i=0;i<c;i++) { //Columns\r\n\t\t\tlet x = (i + 1) * space;\r\n\t\t\tfor(let j=0;j<r;j++) { //Rows\r\n\t\t\t\tlet y = (j + 1) * space;\r\n\t\t\t\tctx.strokeRect(x, y, size, size);\r\n\t\t\t\tif(i == 0) { //Row header\r\n\t\t\t\t\tctx.fillText(Well.alphabet(j), space / 2, y + size / 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tctx.fillText(i+1, x + size / 2, space / 2); //Column header\r\n\t\t}\r\n\t\tthis.Layers.forEach(function(l) { //Apply the new grid to all layers\r\n\t\t\tl.grid(G);\r\n\t\t});\r\n\t\tthis.header(); //Update fixed layer to match the new dimensions\r\n\t\treturn this;\r\n\t}\r\n\tdrawHighlight(w) { //Draw the highlight layer based on zoom level and hovered item w\r\n\t\tlet todo = [];\r\n\t\tif(w) { //Proceed with the hovered well, if defined\r\n\t\t\tlet H = this.Highlight;\r\n\t\t\tlet size = this.WellSize;\r\n\t\t\tlet margin = this.WellMargin;\r\n\t\t\tlet space = size + margin;\r\n\t\t\tlet ctx = H.getContext(\"2d\");\r\n\t\t\tlet r = Editor.pixelRatio\r\n\t\t\tif(w.Row >= this.Rows || w.Col >= this.Cols) {return this} //Outside the plate boundaries\r\n\t\t\tif(w.Row < 0) {\r\n\t\t\t\tif(w.Col < 0) { //Highlight is on the top-left corner\r\n\t\t\t\t\tlet h = this.Grid.height;\r\n\t\t\t\t\tlet width = this.Grid.width; \r\n\t\t\t\t\tH.width = width;\t\t\t\t\t//\r\n\t\t\t\t\tH.height = h;\t\t\t\t\t\t// Changing the size will reset the pixels to transparent\r\n\t\t\t\t\tPlate.styleCtx(ctx, \"highlight\");\t// So need to restore the style after resizing\r\n\t\t\t\t\tctx.strokeRect(space - 2, space - 2, (width / r) - size - 2 * margin + 4, (h / r) - size - 2 * margin + 4);\r\n\t\t\t\t\ttodo.push({Image: H, x: 0, y: 0});\r\n\t\t\t\t\ttodo.push({Image: this.Header, x: margin / 2, y: margin / 2})\r\n\t\t\t\t}\r\n\t\t\t\telse { //Highlight Column\r\n\t\t\t\t\tlet h = this.Grid.height;\r\n\t\t\t\t\tH.width = (size + 20) * r;\t\t\t//\r\n\t\t\t\t\tH.height = h;\t\t\t\t\t\t// Changing the size will reset the pixels to transparent\r\n\t\t\t\t\tPlate.styleCtx(ctx, \"highlight\");\t// So need to restore the style after resizing\r\n\t\t\t\t\tctx.strokeRect(8, space - 2, size + 4, (h / r) - size - 2 * margin + 4);\r\n\t\t\t\t\ttodo.push({Image: H, x: ((w.Col + 1) * space - 10) * r, y: 0});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(w.Col < 0) { //Highlight Row\r\n\t\t\t\t\tlet width = this.Grid.width;\r\n\t\t\t\t\tH.height = (size + 20) * r;\t\t\t//\r\n\t\t\t\t\tH.width = width;\t\t\t\t\t// Changing the size will reset the pixels to transparent\r\n\t\t\t\t\tPlate.styleCtx(ctx, \"highlight\");\t// So need to restore the style after resizing\r\n\t\t\t\t\tctx.strokeRect(space - 2, 8, (width / r) - size - 2 * margin + 4, size + 4);\r\n\t\t\t\t\ttodo.push({Image: H, x: 0, y: ((w.Row + 1) * space - 10) * r});\r\n\t\t\t\t}\r\n\t\t\t\telse { //Highlight individual well\r\n\t\t\t\t\tH.width = (size + 20) * r;\t\t\t//\r\n\t\t\t\t\tH.height = (size + 20) * r;\t\t\t// Changing the size will reset the pixels to transparent\r\n\t\t\t\t\tPlate.styleCtx(ctx, \"highlight\");\t// So need to restore the style after resizing\r\n\t\t\t\t\tctx.strokeRect(8, 8, size + 4, size + 4);\r\n\t\t\t\t\ttodo.push({Image: H, x: (w.x(space) - 10) * r, y: (w.y(space) - 10) * r});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(w.Col > -1) {todo.push({Image: this.Header, x: (w.Col + 1) * space * r, y: margin / 2})} //Highlight column header\r\n\t\t\tif(w.Row > -1) {todo.push({Image: this.Header, x: margin / 2, y: ((w.Row + 1) * space) * r})} //Highlight row header\r\n\t\t}\r\n\t\treturn todo;\r\n\t}\r\n\thighlight(e, w) { //Highlight selected well w for all layers and display the info popup\r\n\t\tthis.Highlighting = w;\r\n\t\tlet todo = this.drawHighlight(w);\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.highlight(todo);\r\n\t\t});\r\n\t\tEditor.ResultManager.highlight(todo);\r\n\t\treturn this;\r\n\t}\r\n\theader() { //Draw the header highlight layer at the current zoom level\r\n\t\tlet margin = this.WellMargin;\r\n\t\tlet size = this.WellSize;\r\n\t\tlet H = this.Header;\r\n\t\tH.width = size * Editor.pixelRatio;  //Changing the size will reset the pixels to transparent\r\n\t\tH.height = size * Editor.pixelRatio; //\r\n\t\tlet ctx = H.getContext(\"2d\");\r\n\t\tPlate.styleCtx(ctx, \"header\");\r\n\t\tctx.arc(size / 2, size / 2, Math.floor(margin / 2) * 5, 0, 2 * Math.PI);\r\n\t\tctx.fill();\r\n\t\treturn this;\r\n\t}\r\n//*****************\r\n//SELECTION METHODS\r\n//*****************\r\n\tselect(e, coords, I) { //Handle the selection process\r\n\t\tif(I.Start) {\r\n\t\t\tthis.startSelection(e, coords, I.Start);\r\n\t\t}\r\n\t\tif(I.Stop) {\r\n\t\t\tif(this.Selecting) {\r\n\t\t\t\tif(I.Layer !== undefined) {\r\n\t\t\t\t\tthis.Layers[I.Layer].select(this.Selecting.Includes, this.WellSize, this.WellMargin);\r\n\t\t\t\t}\r\n\t\t\t\tthis.Selecting.Box.remove(); //Remove the 2 HTML canvas elements\r\n\t\t\t\tthis.Selecting.Select.remove();\r\n\t\t\t\tthis.Selecting = undefined;\r\n\t\t\t}\r\n\t\t\tGetId(Editor.Anchors.Popup.Select).innerHTML = \"\"; //Remove the selection information\r\n\t\t\tif(GetId(Editor.Anchors.Popup.Area).innerHTML.length + GetId(Editor.Anchors.Popup.Conc).innerHTML.length == 0) {this.infoPopup()} //Hide the tooltip if nothing else to show\r\n\t\t}\r\n\t\tif(I.Move) {\r\n\t\t\tthis.moveSelection(e, coords, I.Move);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tresetSelection() { //Reset selection for all the layers\r\n\t\tlet size = this.WellSize;\r\n\t\tlet margin = this.WellMargin;\r\n\t\tthis.Layers.forEach(function(L) {\r\n\t\t\tL.unselect(size, margin);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tstartSelection(e, coords, w) { //Start the selection process\r\n\t\tlet B = document.createElement(\"canvas\"); //Create 2 new canvas, one is for the selection box, the other is for the highlight of the selected wells\r\n\t\tlet width = this.Grid.width;\r\n\t\tB.width = width;\t\t\t   //\r\n\t\tB.height = this.Grid.height;   //\r\n\t\tB.style.position = \"absolute\"; // Adjust dimensions and styling of first canvas, box\r\n\t\tB.style.left = 0;\t\t\t   //\r\n\t\tB.style.top = 0;\t\t\t   //\r\n\t\tB.style.zIndex = 10; //To be on top of the pile\r\n\t\tB.style.width = (width / Editor.pixelRatio) + \"px\";\r\n\t\tlet S = B.cloneNode(); //Second canvas (select) is cloned from the first\r\n\t\tS.style.zIndex = -1; //To be at the bottom\r\n\t\tS.style.width = (width / Editor.pixelRatio) + \"px\";\r\n\t\tPlate.styleCtx(B.getContext(\"2d\"), \"selectBox\");\r\n\t\tlet ctx = S.getContext(\"2d\");\r\n\t\tPlate.styleCtx(ctx, \"selecting\");\r\n\t\te.target.parentElement.append(B); //Append both canvas to the page\r\n\t\te.target.parentElement.append(S); //\r\n\t\tthis.Selecting = {Start: w, Box: B, Select: S, x: coords.layerX, y: coords.layerY, LastVisited: w, Includes: [w]} //Update the Select object\r\n\t\tthis.drawWellsInLasso(ctx, w);\r\n\t}\r\n\tmoveSelection(e, coords, w) {\r\n\t\tvar x = this.Selecting.x;\r\n\t\tvar y = this.Selecting.y;\r\n\t\tvar B = this.Selecting.Box;\r\n\t\tvar ctx = B.getContext(\"2d\");\r\n\t\tctx.clearRect(0, 0, B.width, B.height); //Draw the selection lasso\r\n\t\tctx.fillRect(x, y, coords.layerX - x, coords.layerY - y);\r\n\t\tctx.strokeRect(x, y, coords.layerX - x, coords.layerY - y);\r\n\t\tif(w.Index == this.Selecting.LastVisited.Index) {return} //Cursor is still on the same well, no need to update the selection\r\n\t\telse { //Update the selection\r\n\t\t\tvar S = this.Selecting.Select;\r\n\t\t\tvar ctx = S.getContext(\"2d\");\r\n\t\t\tctx.clearRect(0, 0, S.width, S.height); //Reset the canvas\r\n\t\t\tthis.drawWellsInLasso(ctx, w); //Draw again\r\n\t\t\tthis.Selecting.LastVisited = w;\r\n\t\t}\r\n\t}\r\n\tdrawWellsInLasso(ctx, w) { //Draw wells in lasso on the canvas context\r\n\t\tvar size = this.WellSize;\r\n\t\tvar margin = this.WellMargin;\r\n\t\tvar start = this.Selecting.Start;\r\n\t\tthis.Selecting.Includes = [];\r\n\t\tvar startRow = Math.min(start.Row, w.Row);\r\n\t\tvar startCol = Math.min(start.Col, w.Col);\r\n\t\tvar spanRow = Math.abs(start.Row - w.Row) + 1; //The number of rows in the lasso\r\n\t\tvar spanCol = Math.abs(start.Col - w.Col) + 1; //The number of cols in the lasso\r\n\t\tlet html = \"R <b>\";\r\n\t\tif(startRow == -1) { //When a header is selected, extend the selection to the whole row\r\n\t\t\tspanRow = this.Rows + 1;\r\n\t\t\thtml += this.Rows;\r\n\t\t}\r\n\t\telse {html += spanRow}\r\n\t\thtml += \" &times; \";\r\n\t\tif(startCol == -1) { //Or the whole column (or both...)\r\n\t\t\tspanCol = this.Cols + 1;\r\n\t\t\thtml += this.Cols;\r\n\t\t}\r\n\t\telse {html += spanCol}\r\n\t\tGetId(Editor.Anchors.Popup.Select).innerHTML = html + \"</b> C\";\r\n\t\tvar hor = startCol + spanCol;\r\n\t\tvar ver = startRow + spanRow;\r\n\t\tvar x = (size + margin) * (startCol + 1);\r\n\t\tvar y = (size + margin) * (startRow + 1);\r\n\t\tvar L = this.Layers[w.Layer.Index]; //The layer currently hosting the selection process\r\n\t\tfor(let i=startCol;i<hor;i++) { //Loop covering the wells under the lasso, col first\r\n\t\t\tfor(let j=startRow;j<ver;j++) { //then row\r\n\t\t\t\tif(j == startRow) {y = (size + margin) * (startRow + 1)}\r\n\t\t\t\tif(i > -1 && j > -1) {\r\n\t\t\t\t\tthis.Selecting.Includes.push(L.Wells[i + j * this.Cols]);\r\n\t\t\t\t}\r\n\t\t\t\tctx.fillRect(x - 3, y - 3, size + 6, size + 6);\r\n\t\t\t\ty += size + margin;\r\n\t\t\t}\r\n\t\t\tx += size + margin;\r\n\t\t}\r\n\t}\r\n\tinfoPopup(e, w, data) { //Display/hide the info popup giving well informations\r\n\t\tlet pop = Editor.Anchors.Popup;\r\n\t\tlet me = GetId(pop.Root);\r\n\t\tif(e === undefined) {me.style.display = \"none\"; return this} //Hide if nothing to display\r\n\t\tlet show = false;\r\n\t\tif(w.Header) {GetId(pop.Well).innerHTML = \"\"}\r\n\t\telse { //Well name\r\n\t\t\tGetId(pop.Well).innerHTML = Well.alphabet(w.Row) + (w.Col + 1);\r\n\t\t\tshow = true;\r\n\t\t}\r\n\t\tlet A = w.Area;\r\n\t\tif(A) {\r\n\t\t\tGetId(pop.Area).innerHTML = \"<span class=\\\"Boxed\\\">\" + TypeMap.symbolForValue(TypeMap.valueForType(A.Type)) + \"</span>\" + A.Name + \" <span id=\\\"\" + pop.ResolvedName + \"\\\"></span>\";\r\n\t\t\tshow = true;\r\n\t\t}\r\n\t\telse {GetId(pop.Area).innerHTML = \"\"}\r\n\t\tif(w.Conc) {\r\n\t\t\tGetId(pop.Conc).innerHTML = Well.dose(w, this.Options.Digits.getValue());\r\n\t\t\tshow = true;\r\n\t\t}\r\n\t\telse {GetId(pop.Conc).innerHTML = \"\"}\r\n\t\tif(data) {\r\n\t\t\tGetId(pop.Data).innerHTML = \"Resolving value...\"\r\n\t\t\tdata.Result.getValue(data.Parameter, w).then(function(value) {\r\n\t\t\t\tif(value) {GetId(pop.Data).innerHTML = value}\r\n\t\t\t\telse {GetId(pop.Data).innerHTML = \"\"}\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t\telse {GetId(pop.Data).innerHTML = \"\"}\r\n\t\tif(show == false && this.Selecting === undefined) {me.style.display = \"none\"; return this} //Hide if nothing to display\r\n\t\tme.style.display = \"block\";\r\n\t\tif(A && A.Type == \"Range\") {\r\n\t\t\tGetId(pop.ResolvedName).innerHTML = \"(Resolving name...)\";\r\n\t\t\tArea.fetchRangeItem(A, w).then(function(name) { //Fetch the resolved name\r\n\t\t\t\tif(this.Highlighting && this.Highlighting.Area) { //Then check if the cursor is still located at the previous location\r\n\t\t\t\t\tif(this.Highlighting.Area.Name == A.Name && this.Highlighting.RangeIndex == w.RangeIndex) { //Display cancelled if name is different or if same name but different rangeIndex \r\n\t\t\t\t\t\tGetId(pop.ResolvedName).innerHTML = \"(\" + name + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n//*****************\r\n//MAPS METHODS\r\n//*****************\r\n\ttypeMap() { //Show the map of types for the plate\r\n\t\tlet id = \"TypeMap\";\r\n\t\tlet map = this.TypeMap.draw();\r\n\t\tForm.open({ //Open a form showing the map\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<div style=\\\"overflow: auto;margin-right: 5px\\\">\" + map + \"</div>\",\r\n\t\t\tTitle: \"Type map\",\r\n\t\t\tSize: 700,\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Printable version\", Click: function() {Reporter.printable(map)}.bind(this), Title: \"Open the map in a new window to allow easy printing or copy/pasting to other applications\"},\r\n\t\t\t\t{Label: \"Close\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}},\r\n\t\t\t],\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tplateMap() { //Show the plates available for the definitions\r\n\t\tlet ranges = Area.getRanges();\r\n\t\tif(ranges.length == 0) {Editor.Console.log({Message: \"No ranges defined\", Gravity: \"Error\"}); return this}\r\n\t\tDefinition.formPlate(ranges);\r\n\t\treturn this;\r\n\t}\r\n\tconcMap() { //Show the map of concentrations for the plate, per layer\r\n\t\tif(this.Layers.length == 0) {return this}\r\n\t\tlet id = \"ConMap\";\r\n\t\tForm.open({ //Open a form showing the map\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<div id=\\\"\" + this.Anchors.LayerSelect + \"\\\" style=\\\"margin-bottom: 10px\\\"></div><div style=\\\"overflow: auto;\\\"></div>\",\r\n\t\t\tTitle: \"Concentration map\",\r\n\t\t\tSize: 700,\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Printable version\", Click: function() {\r\n\t\t\t\t\tReporter.printable(GetId(this.Anchors.LayerSelect).nextSibling.innerHTML);\r\n\t\t\t\t}.bind(this), Title: \"Open the map in a new window to allow easy printing or copy/pasting to other applications\"},\r\n\t\t\t\t{Label: \"Close\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}},\r\n\t\t\t],\r\n\t\t\tonInit: function() {\r\n\t\t\t\tlet c = this.Controls.LayerSelect;\r\n\t\t\t\tlet l = this.Layers.length;\r\n\t\t\t\tlet list = [];\r\n\t\t\t\tfor(let i=0;i<l;i++) {list.push(i + 1)} //Update the list of available layers\r\n\t\t\t\tc.List = list;\r\n\t\t\t\tc.init().change(c.Value); //Trigger a change to display the map for selected layer\r\n\t\t\t}.bind(this),\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n//*****************\r\n//TAGGING METHODS\r\n//*****************\r\n\ttagArea(a, I) { //Tag area a in the selected wells\r\n\t\tthis.Layers.forEach(function(L) {\r\n\t\t\tL.tagArea(a, I);\r\n\t\t});\r\n\t\tI.Results.Ranges.forEach(function(range) { //Update impacted ranges\r\n\t\t\tthis.updateRange(range);\r\n\t\t}, this);\r\n\t\treturn I.Results;\r\n\t}\r\n\tupdateRange(a) { //Update range information for area a\r\n\t\ta.updateRange(this.WellSize, this.WellMargin);\r\n\t\treturn this;\r\n\t}\r\n\tuntag() { //Untag the selected wells\r\n\t\tlet I = {\r\n\t\t\tKeep: this.Options.KeepSelected.getValue(),\r\n\t\t\tSize: this.WellSize,\r\n\t\t\tMargin: this.WellMargin,\r\n\t\t\tMap: this.TypeMap,\r\n\t\t\tResults: {Untag: 0, Ranges: []}\r\n\t\t}\r\n\t\tthis.Layers.forEach(function(L) { //Process the untag and update object I with the results\r\n\t\t\tL.untag(I);\r\n\t\t});\r\n\t\tI.Results.Ranges.forEach(function(a) { //Update impacted ranges\r\n\t\t\tthis.updateRange(a);\r\n\t\t}, this);\r\n\t\treturn I.Results;\r\n\t}\r\n\thighlightConflicts(conflicts) { //Highlight well indices passed in the array conflicts\r\n\t\tlet size = this.WellSize;\r\n\t\tlet margin = this.WellMargin;\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.highlightConflicts(conflicts, size, margin);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\ttagConc(value, unit) { //Tag the concentration given in the selected wells\r\n\t\tlet I = {\r\n\t\t\tValue: value,\r\n\t\t\tDigit: this.Options.Digits.Selected,\r\n\t\t\tUnit: unit,\r\n\t\t\tSelected: 0,\r\n\t\t\tSize: this.WellSize,\r\n\t\t\tMargin: this.WellMargin,\r\n\t\t\tKeep: this.Options.KeepSelected.getValue(),\r\n\t\t}\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.tagConc(I);\r\n\t\t});\r\n\t\treturn I.Selected;\r\n\t}\r\n\tuntagConc() { //UnTag the concentration given in the selected wells\r\n\t\tvar I = {\r\n\t\t\tSelected: 0,\r\n\t\t\tSize: this.WellSize,\r\n\t\t\tMargin: this.WellMargin,\r\n\t\t\tKeep: this.Options.KeepSelected.getValue(),\r\n\t\t}\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.untagConc(I);\r\n\t\t});\r\n\t\treturn I.Selected;\r\n\t}\r\n\tresetConc() { //Reset concentrations for all layers\r\n\t\tvar I = {Size: this.WellSize, Margin: this.WellMargin}\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.resetConc(I);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\ttagDRC(I) { //Tag the DRC in the selected wells\r\n\t\tI.Size = this.WellSize;\r\n\t\tI.Margin = this.WellMargin;\r\n\t\tI.Keep = this.Options.KeepSelected.getValue();\r\n\t\tI.Digit = this.Options.Digits.Selected;\r\n\t\tI.Selected = 0;\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.tagDRC(I);\r\n\t\t});\r\n\t\treturn I.Selected;\r\n\t}\r\n\tdigit() { //Change the digit\r\n\t\tlet digit = this.Options.Digits.Selected;\r\n\t\tlet size = this.WellSize;\r\n\t\tlet margin = this.WellMargin;\r\n\t\tthis.Layers.forEach(function(l) {\r\n\t\t\tl.changeDigit(digit, size, margin);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n//*****************\r\n//EXPORT METHODS\r\n//*****************\r\n\tgetConc() { //This method returns an array of unique concentration values, flattened for all layers, organized per unit, with the well indices indicated\r\n\t\tlet conc = [];\r\n\t\tthis.Layers.forEach(function(l) { //For all layers\r\n\t\t\tl.Wells.forEach(function(w) { //For all wells\r\n\t\t\t\tif(w.Value) { //If this well has a value registered\r\n\t\t\t\t\tlet unit = conc.find(function(e) {return e.Unit == w.Unit});\r\n\t\t\t\t\tif(unit) { //Update an existing unit group\r\n\t\t\t\t\t\tlet val = unit.Values.find(function(e) {return e.Value == w.Value});\r\n\t\t\t\t\t\tif(val) { //Update an existing value group\r\n\t\t\t\t\t\t\tval.Tags.push(w.Index);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse { //Create a new value group\r\n\t\t\t\t\t\t\tunit.Values.push({Value: w.Value, Type: \"Conc\", Name: w.Unit, Tags: [w.Index]});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { //Create a new group for this unit \r\n\t\t\t\t\t\tconc.push({Unit: w.Unit, Name: w.Unit, Values: [{Value: w.Value, Type: \"Conc\", Name: w.Unit, Tags: [w.Index]}]}); //Name and Type fields are added for consistency between objects sent to the analyzer\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t});\r\n\t\treturn conc;\r\n\t}\r\n}","//**************************************************************************\r\n// RESULT object - Handling of data and parameters attached to a result file\r\n//**************************************************************************\r\nclass Result {\r\n\tconstructor(data) { //Build a result object from data sent by Import_Form\r\n\t\tthis.Input = data.Input;\r\n\t\tthis.Name = data.Name;\r\n\t\tthis.Size = data.Parser.SelectedRows + \" rows\";\r\n\t\tthis.Parser = data.Parser;\r\n\t\tthis.Mapper = undefined;\r\n\t\tthis.Mapping = undefined;\r\n\t\tthis.ParamSelected = 0; //Number of parameter selected\r\n\t\tthis.PlatesID = []; //Array containing the plates ID, in the order they were found in the file\r\n\t\tthis.Parameters = [];\r\n\t\tdata.Headers.forEach(function(h, i) { //Build the array of Parameter objects\r\n\t\t\tthis.Parameters.push(new Parameter(h));\r\n\t\t}, this);\r\n\t\tthis.Validated = false; //Whether the result file has been validated\r\n\t\tthis.Info = \"\";\r\n\t\tResult.updateParameters(this); //Parameters available / selected info\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic selected(r, sel) { //Update the number of parameter selected field for the result given\r\n\t\tr.ParamSelected = sel;\r\n\t\tr.Info = r.Parameters.length + \" available,<br>\" + sel + \" selected\";\r\n\t}\r\n\tstatic updateParameters(r) { //Update parameters Selected/Numeric properties based on mapping, and give information on the number of parameters available/selected\r\n\t\tlet sel = 0;\r\n\t\tif(r.Mapping) { //Use the mapping data if defined\r\n\t\t\tlet get = r.Mapping[Mapper.import().Name]; //An array of booleans indicating if the parameter is selected or not\r\n\t\t\tlet numeric = r.Mapping[Mapper.numeric().Name]; //An array of booleans as well\r\n\t\t\tr.Parameters.forEach(function(p, i) {\r\n\t\t\t\tif(get) {\r\n\t\t\t\t\tp.Selected = get[i]; //Update the selection based on mapping\r\n\t\t\t\t\tif(p.Selected) {sel++} //Log the number of selected parameters\r\n\t\t\t\t}\r\n\t\t\t\tif(numeric) {\r\n\t\t\t\t\tp.Numeric = numeric[i];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.selected(r, sel);\r\n\t}\r\n\tstatic updateMapping(r) { //Update mapping configuration based on parameters Selected properties, and give information on the number of parameters available/selected\r\n\t\tlet sel = 0;\r\n\t\tlet m = r.Mapping[Mapper.import().Name]; //An array of booleans indicating if the parameter is selected or not\r\n\t\tr.Parameters.forEach(function(p, i) {\r\n\t\t\tm[i] = p.Selected; //Update the mapping based on selection \r\n\t\t\tif(p.Selected) {sel++} //Log the number of selected parameters\r\n\t\t});\r\n\t\tthis.selected(r, sel);\r\n\t}\r\n\tstatic getAsJPGControl(result, paramIndex) { //Returns an object suitable to create a button (using the LinkCtrl constructor) that will output the parameter with the desired index, for the result passed, as a jpg\r\n\t\tlet p = result.Parameters[paramIndex];\r\n\t\tlet plateIndex = Editor.ResultManager.PlateSelect.Selected;\r\n\t\tlet action = function() { //The click action for the button\r\n\t\t\tlet canvas = document.createElement(\"canvas\"); //Create an empty canvas element\r\n\t\t\tcanvas.height = p.Grid.height; //Define its size to match that of the Grid\r\n\t\t\tcanvas.width = p.Grid.width;\r\n\t\t\tlet ctx = canvas.getContext(\"2d\");\r\n\t\t\tctx.fillStyle = \"white\";\r\n\t\t\tctx.fillRect(0, 0, canvas.width, canvas.height); //Apply a white background first, to prevent transparent pixels from turning black\r\n\t\t\tctx.drawImage(p.Grid, 0, 0); //Draw the grid, drop the highlight\r\n\t\t\tlet href = canvas.toDataURL('image/jpeg');\r\n\t\t\tReporter.printable(\"<p><b>\" + result.Name + \" (Plate: \" + plateIndex + \") - \" + p.Name + \"</b></p><img src=\\\"\" + href + \"\\\"></img>\");\r\n\t\t}\r\n\t\treturn {Label: \"jpg\", Title: \"Click here to view this heatmap as a .jpg image file\", Click: action};\r\n\t}\r\n\tstatic getAsHTMLControl(result, paramIndex) { //Returns an object suitable to create a button (using the LinkCtrl constructor) that will output the parameter with the desired index, for the result passed, as an html array\r\n\t\tlet p = result.Parameters[paramIndex];\r\n\t\tlet action = function() { //The click action for the button\r\n\t\t\tlet id = \"Form_GetAsHTML\";\r\n\t\t\tlet output = id + \"_Output\";\r\n\t\t\tlet plateIndex = Editor.ResultManager.PlateSelect.Selected;\r\n\t\t\tForm.open({ //Open an empty form with waiting message\r\n\t\t\t\tID: id,\r\n\t\t\t\tHTML: \"<div style=\\\"max-height: 500px; overflow: auto\\\"><p><b>\" + result.Name + \" (Plate: \" + plateIndex + \") - \" + p.Name + \"</b></p><div id=\" + output + \"><span class=\\\"Error\\\">Resolving values, please wait...</span></div></div>\",\r\n\t\t\t\tSize: 700,\r\n\t\t\t\tTitle: \"Parameter as HTML\",\r\n\t\t\t\tButtons: [\r\n\t\t\t\t\t{Label: \"Printable Version\", Click: function() {\r\n\t\t\t\t\t\tReporter.printable(GetId(output).parentElement.innerHTML);\r\n\t\t\t\t\t}, Title: \"Display the table in a new window to allow easy printing or copy/pasting to other applications\"},\r\n\t\t\t\t\t{Label: \"Close\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)} },\r\n\t\t\t\t],\r\n\t\t\t});\r\n\t\t\tresult.getValues(plateIndex, paramIndex).then(function(data) { //Fetch the data, then build the html table\r\n\t\t\t\tif(p.Numeric) { //Convert text into numbers\r\n\t\t\t\t\tdata = Result.cleanValues(data);\r\n\t\t\t\t}\r\n\t\t\t\tlet o = Parameter.getMinMax(p, data, Editor.ResultManager.extremumObject());\r\n\t\t\t\tlet grad = Editor.ResultManager.gradColors();\r\n\t\t\t\tlet r = Editor.Plate.Rows;\r\n\t\t\t\tlet c = Editor.Plate.Cols;\r\n\t\t\t\tlet html = \"<table style=\\\"text-align: center\\\"><tr><th></th>\";\r\n\t\t\t\tfor(let j=0; j<c; j++) { //Headers, for each col\r\n\t\t\t\t\thtml += \"<th>\" + (j + 1) + \"</th>\";\r\n\t\t\t\t}\r\n\t\t\t\thtml += \"</tr>\";\r\n\t\t\t\tfor(let i=0; i<r; i++) { //Travel all the rows\r\n\t\t\t\t\thtml += \"<tr><th>\" + Well.alphabet(i) + \"</th>\";\r\n\t\t\t\t\tfor(let j=0; j<c; j++) { //Travel all the cols\r\n\t\t\t\t\t\tlet val = data[i * c + j];\r\n\t\t\t\t\t\tlet bgColor = \"rgb(255, 255, 255)\"; //White\r\n\t\t\t\t\t\tif(val === undefined) {val = \"<span class=\\\"Error\\\">&Oslash;</span>\"}\r\n\t\t\t\t\t\telse {bgColor = CSSCOLORS.heatmap(val, o.Min, o.Max, grad)} //set bgColor as the heatmap color\r\n\t\t\t\t\t\tlet color = CSSCOLORS.font(bgColor, \"RGB_Unnamed\"); //Adapt font (black/white) depending on the background\r\n\t\t\t\t\t\thtml += \"<td style=\\\"background-color:\" + bgColor + \"; color: \" + color + \"; padding: 0.2em; border: 1px solid black\\\">\" + val + \"</td>\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\thtml += \"</tr>\";\r\n\t\t\t\t}\r\n\t\t\t\thtml += \"</table>\";\r\n\t\t\t\tGetId(output).innerHTML = html; //Display the table\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn {Label: \"html\", Title: \"Click here to view this heatmap as an html array\", Click: action}\r\n\t}\r\n\tstatic cleanValues(output) { //Clean the array of values recovered from the Mapper, to ensure the conversion to number and correct handling of empty strings\r\n\t\treturn output.map(function(v) {\r\n\t\t\treturn Mapper.cleanValue(v);\r\n\t\t});\r\n\t}\r\n\t//Methods\r\n\tdraw(plateIndex, GradColors, tab, I) { //Draw heatmap for this result and the plateIndex selected\r\n\t\tlet plate = Editor.Plate;\r\n\t\tthis.Parameters.forEach(function(p, i) { //For each parameters\r\n\t\t\tif(p.Selected) { //If this parameter is selected\r\n\t\t\t\tp.resize(plate); //Resize the canvases to match the plate\r\n\t\t\t\tp.grid(plate);\r\n\t\t\t\tthis.getValues(plateIndex, i).then(function(output) { //Collect the values for this parameter, then build the heatmap\r\n\t\t\t\t\tif(p.Numeric) { //Process the array if this parameter has been selected as numerical\r\n\t\t\t\t\t\toutput = Result.cleanValues(output);\r\n\t\t\t\t\t\tlet o = Parameter.getMinMax(p, output, I);\r\n\t\t\t\t\t\toutput.forEach(function(v, i) { //Process the array\r\n\t\t\t\t\t\t\tp.heatmap(v, i, plate, GradColors, o.Min, o.Max);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { //For textual values, simply output as it is\r\n\t\t\t\t\t\toutput.forEach(function(v, i) { //Process the array\r\n\t\t\t\t\t\t\tp.txt(v, i, plate);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tp.draw(this, i);\r\n\t\t\t\t\ttab.style.height = \"unset\"; //Release the height to let the container adjust to its new content\r\n\t\t\t\t}.bind(this));\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\treturn this;\r\n\t}\r\n\tgetValues(plateIndex, paramIndex) { //Returns a promise that will fulfill with the values for the desired plate / param\r\n\t\tlet args = {\r\n\t\t\tPlate: plateIndex, //Name of the plate where to look the data\r\n\t\t\tColumn: paramIndex, //Index of the column containing the data to extract\r\n\t\t\tFindAll: true,\r\n\t\t}\r\n\t\treturn this.Mapper.find(this, args);\r\n\t}\r\n\tgetValue(param, well) { //A promise that resolve with the value of the parameter at the given well location\r\n\t\tlet plateIndex = Editor.ResultManager.PlateSelect.Selected; //Plate selected for heatmap display\r\n\t\tlet args = {\r\n\t\t\tPlate: plateIndex, //Name of the plate where to look the data\r\n\t\t\tWell: well.Index, //Index of the well where to find the data\r\n\t\t\tDefault: \"\", //Default fallback if the element needed is outside the list\r\n\t\t\tColumn: param, //Index of the column containing the data to extract\r\n\t\t}\r\n\t\treturn this.Mapper.find(this, args); //Return a promise that will fulfill with the value of the item\r\n\t}\r\n\t//**************************************************************************\r\n\t//Works well for small files, need stream-write capabilities for bigger ones\r\n\t//**************************************************************************\r\n\tpushLayout(rowLimit) { //Push the result file with the layout data\r\n\t\tlet aborted = false;\r\n\t\tlet w = this.Mapping[Mapper.well().Name];\r\n\t\tlet plate = Editor.Plate;\r\n\t\tlet data = [this.Parser.Headers.concat([\"Area\", \"Value\", \"Unit\"])]; //Headers for the file\r\n\t\treturn new Promise(function(resolve) {\r\n\t\t\tlet ranges = Area.getRanges({HasDefinition: true}); //Get only the ranges that have definitions\r\n\t\t\tlet promises = [];\r\n\t\t\tranges.forEach(function(r) { //Loop the ranges to get the resolved names\r\n\t\t\t\tpromises.push(Definition.getAsPlate(r.Definition));\r\n\t\t\t});\r\n\t\t\tPromise.all(promises).then(function(def) { //Wait for the resolution of all the names to continue with result streaming\r\n\t\t\t\tlet resolved = {};\r\n\t\t\t\tranges.forEach(function(r, i) {\r\n\t\t\t\t\tresolved[r.Name] = def[i].Definition;\r\n\t\t\t\t});\r\n\t\t\t\tthis.Parser.stream(function(row, selected, parser) { //Stream the file to build the output\r\n\t\t\t\t\tlet here = Well.parseIndex(row[w], plate); //Location of the well\r\n\t\t\t\t\tif(here !== undefined) { //If this well is within the plate boundary\r\n\t\t\t\t\t\tplate.Layers.forEach(function(l) { //Loop the layers\r\n\t\t\t\t\t\t\tlet well = l.Wells[here.Index];\r\n\t\t\t\t\t\t\trow = row.concat(Well.layoutData(well, resolved)); //Push the layout data\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdata.push(row); //Push the fully completed row to the output\r\n\t\t\t\t\t\tif(data.length == rowLimit) { //Protection for big files, until we can do better...\r\n\t\t\t\t\t\t\taborted = true;\r\n\t\t\t\t\t\t\tparser.abort();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}.bind(this), function() { //Parsing Complete\r\n\t\t\t\t\tresolve({Aborted: aborted, Data: data});\r\n\t\t\t\t});\r\n\t\t\t}.bind(this));\r\n\t\t\t/*this.Parser.stream(function(row, selected, parser) { //Stream the file to build the output\r\n\t\t\t\tconsole.log(\"got row\", row);\r\n\t\t\t\tlet here = Well.parseIndex(row[w], plate); //Location of the well\r\n\t\t\t\tif(here !== undefined) { //If this well is within the plate boundary\r\n\t\t\t\t\tdata.push( //Push a promise that will fulfill with the data for the entire row \r\n\t\t\t\t\t\tnew Promise(function(resolveRow) {\r\n\t\t\t\t\t\t\tlet p = []; //Array of promises\r\n\t\t\t\t\t\t\tplate.Layers.forEach(function(l) { //Loop the layers\r\n\t\t\t\t\t\t\t\tlet well = l.Wells[here.Index];\r\n\t\t\t\t\t\t\t\tp.push(Well.layoutData(well)); //Push a promise that will resolve with the layout data at this well and layer\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tconsole.log(\"pushed promises for well to all layers\");\r\n\t\t\t\t\t\t\tPromise.all(p).then(function(layout) { //When the layout data are recovered for all layers, concat to the row and push to output data\r\n\t\t\t\t\t\t\t\tconsole.log(\"Got promises for well, resolving row\");\r\n\t\t\t\t\t\t\t\tlayout.forEach(function(l) {row = row.concat(l)});\r\n\t\t\t\t\t\t\t\tresolveRow(row);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}) //No separator here, as we are in a push()\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\t//***************************************************\r\n\t\t\t\t//Protection for big files, until we can do better...\r\n\t\t\t\tif(data.length == rowLimit) {\r\n\t\t\t\t\taborted = true;\r\n\t\t\t\t\tparser.abort();\r\n\t\t\t\t\tconsole.log(\"Too many rows, Aborted\");\r\n\t\t\t\t}\r\n\t\t\t\t//***************************************************\r\n\t\t\t}.bind(this), function() { //Parsing Complete\r\n\t\t\t\tconsole.log(\"Stream complete\");\r\n\t\t\t\tPromise.all(data).then(function(out) { //Wait for all rows to complete then resolve\r\n\t\t\t\t\tresolve({Aborted: aborted, Data: out});\r\n\t\t\t\t}); \r\n\t\t\t});*/\r\n\t\t}.bind(this));\r\n\t}\r\n}","//**************************************************************\r\n// RESULTMANAGER object - Handling of results data for the plate\r\n//**************************************************************\r\nclass ResultManager {\r\n\tconstructor(root, source) { //root is the root ID for drawing, source is the RespTable with the result objects\r\n\t\tthis.Results = source;\r\n\t\tthis.Anchors = {\r\n\t\t\tRoot: root,\r\n\t\t\tMap_ResultTable: root + \"_ResultTable\",\r\n\t\t\tMap_Parameters: root + \"_Parameters\",\r\n\t\t\tResultTab: root + \"_ResultTab\",\r\n\t\t\tHeatmap: root + \"_Heatmap\",\r\n\t\t\tHeatmapOptions: root + \"_HeatmapOptions\",\r\n\t\t\tExtremums: root + \"_Extremums\",\r\n\t\t\tExtremumSource: root + \"_ExtremumSource\",\r\n\t\t\tPlateSelect: root + \"_PlateSelect\",\r\n\t\t\tLayerSelect: root + \"_LayerSelect\",\r\n\t\t\tPairing: root + \"_Pairing\",\r\n\t\t}\r\n\t\tthis.ResultTab = undefined;\r\n\t\tlet action = function(v) {this.draw(this.Results.Selected[0])}.bind(this);\r\n\t\tthis.PlateSelect = LinkCtrl.new(\"Select\", {ID: this.Anchors.PlateSelect, Title: \"Select the plate to use for display\", Default: 0, Label: \"Plate\", List: [1], NavBar: true, Lookup: true, Change: action});\r\n\t\tthis.LayerSelect = LinkCtrl.new(\"Select\", {ID: this.Anchors.LayerSelect, Title: \"Select the layer that will be used to display information in the tooltip\", Default: 0, NavBar: true, Label: \"Layer\", List: [1]});\r\n\t\tthis.HeatmapOptions = {\r\n\t\t\tLow: LinkCtrl.new(\"Color\", {ID: this.Anchors.HeatmapOptions, Title: \"Color for the lowest value\", Default: \"lightblue\", Label: \"0\", Chain: {Index: 0}, Change: action}),\r\n\t\t\tMedium: LinkCtrl.new(\"Color\", {ID: this.Anchors.HeatmapOptions, Title: \"Color for the average value\", Default: \"white\", Label: \"50\", Chain: {Index: 1}, Change: action}),\r\n\t\t\tHigh: LinkCtrl.new(\"Color\", {ID: this.Anchors.HeatmapOptions, Title: \"Color for the highest value\", Default: \"tomato\", Label: \"100\", Chain: {Index: 2, Last: true}, Change: action}),\r\n\t\t}\r\n\t\tthis.ExtremumSource = LinkCtrl.new(\"Select\", {ID: this.Anchors.ExtremumSource, Default: 0, Label: \"Source\", List: [\"Global\", \"Plate\", \"Custom\"], Change: function(v) {\r\n\t\t\tthis.extremum(v);\r\n\t\t}.bind(this), Title: \"Source of the min and max values to build the heatmap. Global: use parameter min/max values from the entire file; Plate: use parameter min/max values from the selected plate only; Custom: manually entered min and max values (applies to all parameters)\"}),\r\n\t\tthis.Extremums = {\r\n\t\t\tMin: LinkCtrl.new(\"Number\", {ID: this.Anchors.Extremums, Default: 0, Label: \"Min\", Chain: {Index: 0}, Title: \"Custom value for the minimum\"}),\r\n\t\t\tMax: LinkCtrl.new(\"Number\", {ID: this.Anchors.Extremums, Default: 0, Label: \"Max\", Chain: {Index: 1, Last: true}, Title: \"Custom value for the maximum\"}),\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t//Static methods\r\n\t\r\n\t//Methods\r\n\tinit() { //Prepare the html\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<div style=\\\"overflow: auto\\\">\"; //Options ribbon\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Plate view</legend><div id=\\\"\" + this.Anchors.PlateSelect + \"\\\"></div></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Pairing</legend><div id=\\\"\" + this.Anchors.Pairing + \"\\\"></div></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Linked Layer</legend><div id=\\\"\" + this.Anchors.LayerSelect + \"\\\"></div></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Heatmap</legend><div id=\\\"\" + this.Anchors.HeatmapOptions + \"\\\"></div></fieldset>\";\r\n\t\t\thtml += \"<fieldset style=\\\"float: left\\\"><legend>Min & Max</legend>\";\r\n\t\t\t\thtml += \"<div id=\\\"\" + this.Anchors.ExtremumSource + \"\\\" style=\\\"float: left\\\"></div>\";\r\n\t\t\t\thtml += \"<div id=\\\"\" + this.Anchors.Extremums + \"\\\" style=\\\"float: left; display: none; margin-left: 5px\\\"></div>\"; //Custom values for the min/max\r\n\t\t\thtml += \"</fieldset>\";\r\n\t\thtml += \"</div>\";\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.ResultTab + \"\\\" class=\\\"LinkCtrl_Tab LinkCtrl_Round\\\" style=\\\"margin-top: 10px; padding-left: 10px;\\\"><p>Click on a result file to display heatmaps for selected parameters</p></div>\"; //Result tab\r\n\t\tGetId(this.Anchors.Root).innerHTML = html;\r\n\t\tthis.PlateSelect.init();\r\n\t\tthis.LayerSelect.init();\r\n\t\tthis.ExtremumSource.init();\r\n\t\tif(Editor.Plate) {this.layerUpdate()} //Update the layer selection control\r\n\t\tObject.values(this.HeatmapOptions).forEach(function(o) {o.init()});\r\n\t\tObject.values(this.Extremums).forEach(function(o) {o.init()});\r\n\t\tlet update = LinkCtrl.button({Label: \"Update\", Title: \"Click to redraw the heatmaps with the current custom values\", Click: function() {\r\n\t\t\tlet r = this.Results.Selected[0]; //The selected result\r\n\t\t\tthis.draw(r);\r\n\t\t}.bind(this)});\r\n\t\tlet ext = GetId(this.Anchors.Extremums);\r\n\t\text.insertAdjacentHTML(\"beforeend\", \"&nbsp;\"); //Space for the button\r\n\t\text.append(update);\r\n\t\tlet hm = LinkCtrl.button({Label: \"More...\", Title: \"Click here to select templates and see more options for heatmap colors\", Click: function() {\r\n\t\t\tthis.heatmapTemplates();\r\n\t\t}.bind(this)});\r\n\t\tlet opt = GetId(this.Anchors.HeatmapOptions);\r\n\t\topt.insertAdjacentHTML(\"beforeend\", \"&nbsp;\"); //Space for the button\r\n\t\topt.append(hm);\r\n\t\treturn this;\r\n\t}\r\n\tlayerUpdate() { //Update the LayerSelect control with a list corresponding to the current number of layers\r\n\t\tlet list = [];\r\n\t\tlet l = Editor.Plate.Layers.length;\r\n\t\tfor(let i=0; i<l; i++) {list.push(i+1)}\r\n\t\tthis.LayerSelect.updateList(list);\r\n\t\treturn this;\r\n\t}\r\n\textremum(source) { //Handle changes for the extremums options\r\n\t\tif(source == 2) {GetId(this.Anchors.Extremums).style.display = \"block\"} //Custom, set the visibility of the min/max\r\n\t\telse { //Draw straight in the other cases\r\n\t\t\tGetId(this.Anchors.Extremums).style.display = \"none\";\r\n\t\t\tlet r = this.Results.Selected[0]; //The selected result\r\n\t\t\tthis.draw(r);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\taddResults(results) { //Add inputs passed to the array of results\r\n\t\tlet R = this.Results;\r\n\t\tlet first = R.Array.length; //Index of the first result element that will be added\r\n\t\tif(first == 0) {this.init()}\r\n\t\tR.Array = R.Array.concat(results);\r\n\t\tR.setValue([first]);\r\n\t\treturn this;\r\n\t}\r\n\tmapParameters(inputs, BackToImport) { //Allow mapping and selection of parameters for available results\r\n\t\tlet concat = true; //Whether the inputs passed should be concatenated to the results if the mapping is accepted\r\n\t\tif(inputs === undefined) { //If nothing is passed, we are in edition mode, no need to concatenate\r\n\t\t\tinputs = this.Results.Array;\r\n\t\t\tconcat = false;\r\n\t\t}\r\n\t\tif(inputs.length == 0) {return this} //No results available\r\n\t\tMapper.map(inputs, {Validate: true, BackToImport: BackToImport,\r\n\t\t\tDone: function() { //What to do on mapping completion\r\n\t\t\t\tif(concat) {this.addResults(inputs)} //Concat the inputs to the results\r\n\t\t\t\tinputs.forEach(function(r) { //For each inputs\r\n\t\t\t\t\tr.Mapper = Mapper.new(r.Mapping); //Create the mapper object\r\n\t\t\t\t\tResult.updateParameters(r); //Update the selected parameters\r\n\t\t\t\t});\r\n\t\t\t\tthis.Results.update(); //Update the result table\r\n\t\t\t\tthis.draw(this.Results.Selected[0]); //Draw the selected result\r\n\t\t\t}.bind(this), OnChange: function(r) { //What to do on change of mapping config\r\n\t\t\t\tr.Validated = false; //Ensures that the file is scanned again if mapping configuration is changed\r\n\t\t\t\tResult.updateParameters(r);\r\n\t\t\t\tthis.Results.update(); //Update the result table\r\n\t\t\t}.bind(this), Parameters: [ //Parameters to be mapped\r\n\t\t\t\tMapper.well({Required: true}), //For results, a well mapping is required\r\n\t\t\t\tMapper.plate(),\r\n\t\t\t\tMapper.import(),\r\n\t\t\t\tMapper.numeric(),\r\n\t\t\t],\r\n\t\t});\r\n\t}\r\n\tdraw(result, I) { //Draw the data for result object passed\r\n\t\tlet tab = GetId(this.Anchors.ResultTab);\r\n\t\tif(result.Validated == false) { //Result not validated\r\n\t\t\ttab.innerHTML = \"<p class=\\\"Error\\\" style=\\\"text-align: center\\\">Result file not validated</p>\";\r\n\t\t\tif(I === undefined) {this.validate(result)} //Prompt to validate, will not show if a second parameter is provided, which happens when the plate is resized\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\ttab.style.height = tab.clientHeight + \"px\"; //Lock the panel in its present state\r\n\t\tlet array = [];\r\n\t\tlet tabs = []; //Array to hold the new tabs for the TabControl\r\n\t\tthis.PlateSelect.updateList(result.PlatesID);\r\n\t\tlet plateIndex = this.PlateSelect.getValue();\r\n\t\tPairing.resize(result); //Resize the Pairing array in case of change of plate size\r\n\t\tPairing.setLinkedPlate(result, plateIndex, this.Anchors.Pairing); //Update pairing information for the selected plate\r\n\t\tthis.ResultTab = new TabControl({ //Create the TabControl to initialize the tabs as TabPanel objects\r\n\t\t\tID: this.Anchors.ResultTab,\r\n\t\t\tMultiple: true,\r\n\t\t\tTabs: [],\r\n\t\t\tAfterDelete: function(l) {this.deleteParam(l)}.bind(this),\r\n\t\t});\r\n\t\tlet index = 0; //Tracker for the tab index\r\n\t\tthis.ResultTab.init(); //Draw the tabControl\r\n\t\tresult.Parameters.forEach(function(p, i) { //Loop the parameters to build the corresponding Heatmaps\r\n\t\t\tif(p.Selected) { //Only selected parameters should be used\r\n\t\t\t\tp.ID = this.Anchors.Heatmap + \"_\" + index;\r\n\t\t\t\tthis.ResultTab.addTab({ //Add a tab for each parameter to output\r\n\t\t\t\t\tLabel: p.Name,\r\n\t\t\t\t\tSetActive: true,\r\n\t\t\t\t\tControls: [\"Delete\"],\r\n\t\t\t\t\tContent: {Type: \"HTML\", Value: \"<fieldset><legend>\" + p.Name + \" &bull; </legend><div id=\\\"\" + p.ID + \"\\\" style=\\\"position: relative\\\"><span class=\\\"Error\\\">Preparing preview, please wait...</span></div></fieldset>\"}\r\n\t\t\t\t});\r\n\t\t\t\tlet b = LinkCtrl.buttonBar([ //Create the button bar\r\n\t\t\t\t\tResult.getAsJPGControl(result, i),\r\n\t\t\t\t\tResult.getAsHTMLControl(result, i),\r\n\t\t\t\t], true); //The second argument is to get the buttonbar inline \r\n\t\t\t\tb.style.fontWeight = \"normal\";\r\n\t\t\t\tb.style.fontSize = \"0.7em\";\r\n\t\t\t\tGetId(p.ID).previousSibling.append(b); //Append the button\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tlet plate = this.PlateSelect.Selected;\r\n\t\tresult.draw(plate, this.gradColors(), tab, this.extremumObject()); //Draw the Heatmaps, using the selected source for min/max\r\n\t\treturn this;\r\n\t}\r\n\textremumObject() { //Return an object containing the min/max properties needed to build a heatmap\r\n\t\tswitch(this.ExtremumSource.Selected) { \r\n\t\t\tcase \"Global\": return undefined; //The global values are stored at the parameter level\r\n\t\t\tcase \"Plate\": return {Local: true};\r\n\t\t\tcase \"Custom\": return {Min: this.Extremums.Min.getValue(), Max: this.Extremums.Max.getValue()};\r\n\t\t}\r\n\t}\r\n\tgradColors() { //Return the colors for the heatmap gradient\r\n\t\treturn [\r\n\t\t\tCSSCOLORS.fetchRGB(this.HeatmapOptions.Low.getValue()),\r\n\t\t\tCSSCOLORS.fetchRGB(this.HeatmapOptions.Medium.getValue()),\r\n\t\t\tCSSCOLORS.fetchRGB(this.HeatmapOptions.High.getValue())\r\n\t\t];\r\n\t}\r\n\tvalidate(result) { //Validate the well data and assign min/max values for all parameters\r\n\t\tlet id = \"Form_ValidateResult\"; //Root ID for the form\r\n\t\tlet report = id + \"_Output\";\r\n\t\tlet lineCount = id + \"_LineCount\";\r\n\t\tlet html = \"<div id=\\\"\" + report + \"\\\"><p class=\\\"Error\\\">Validating file, please wait...</p><p style=\\\"display:none\\\">Rows processed: <span id=\\\"\" + lineCount + \"\\\">0</span></p></div>\"; //Prepare the html for the form\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: html,\r\n\t\t\tTitle: \"Data validation\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Back to mapping\", Icon: {Type: \"Back\", Space: true}, Click: function() {\r\n\t\t\t\t\tthis.mapParameters();\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}.bind(this)},\r\n\t\t\t\t{Label: \"Done\", Icon: {Type: \"Ok\", Space: true, Color: \"Green\"}, Click: function() {\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\tif(result.Validated) {this.draw(result)}\r\n\t\t\t\t}.bind(this)},\r\n\t\t\t],\r\n\t\t});\r\n\t\tlet plate = Editor.Plate;\r\n\t\tif(plate === undefined) {GetId(report).children[0].innerHTML = \"No plate defined, cannot validate the well data now\"; return} //Failure \r\n\t\tGetId(report).children[1].style.display = \"block\";\r\n\t\tMapper.scan(result, {Log: true, MinMax: true, Custom: function(output) { //Custom function to run at each row\r\n\t\t\tlet selected = output.Items;\r\n\t\t\tif(500 * Math.round(selected / 500) - selected == 0 && GetId(lineCount)) {GetId(lineCount).innerHTML = selected} //Only once every 500 lines to save FPS\r\n\t\t}}).then(function(output) { //After the scan is complete, report the results\r\n\t\t\tlet out = \"\";\r\n\t\t\tif(output.Items > 0) { //OK\r\n\t\t\t\tresult.Validated = true;\r\n\t\t\t\tresult.PlatesID = output.PlatesID;\r\n\t\t\t\tout += \"<p class=\\\"Success\\\" style=\\\"text-align: center\\\">Validation successful!</p>\";\r\n\t\t\t\tout += \"<ul><li>Valid wells: \" + output.Items + \"</li>\";\r\n\t\t\t\tout += \"<li>Plates found: \" + output.PlatesID.length + \"</li></ul>\";\r\n\t\t\t}\r\n\t\t\telse { //No valid wells found\r\n\t\t\t\tresult.Validated = false;\r\n\t\t\t\tresult.PlatesID = [];\r\n\t\t\t\tout += \"No valid well data found\";\r\n\t\t\t}\r\n\t\t\tif(GetId(lineCount)) {GetId(lineCount).innerHTML = output.Items}\r\n\t\t\tif(GetId(report)) {GetId(report).innerHTML = out}\r\n\t\t\tResult.updateParameters(result);\r\n\t\t\tthis.Results.update();\r\n\t\t}.bind(this));\r\n\t}\r\n\thighlight(array) { //Draw the highlight image at the coordinates provided. Each element in array is an object specifying the image to draw and the coordinates x and y\r\n\t\tlet sel = this.Results.Selected; //The selected result file\r\n\t\tif(sel.length == 0) {return this} //No result selected\r\n\t\tsel[0].Parameters.forEach(function(p) { //For all parameters in the selected file\r\n\t\t\tif(p.Selected) {p.highlight(array)} //To the highlight for selected parameters\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tdeleteParam(l) { //Unselect the parameter of index l for the result file selected. The index l is not the index in the Parameters array! It is the tab index\r\n\t\tlet r = this.Results.Selected[0]; //The selected result\r\n\t\tlet selected = r.Parameters.filter(function(p) {return p.Selected}); //Start by selecting only the selected parameters\r\n\t\tselected[l].Selected = false; //Then the index is directly the position in the array, update the parameter\r\n\t\tResult.updateMapping(r);\r\n\t\tthis.Results.update();\r\n\t\treturn this;\r\n\t}\r\n\tdeleteResult(r) { //Delete the result object passed by removing the Heatmap displayed, if any\r\n\t\tif(this.Results.Array.length > 1) {this.init()} //At least one result remain after deletion\r\n\t\telse {\r\n\t\t\tGetId(Editor.Anchors.Main.Results).innerHTML = \"<p>Load a result file to continue</p>\";\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\theatmapTemplates() { //Open a form to display heatmap templates and other options for heatmap colors\r\n\t\tlet id = \"Form_HeatmapTemplate\";\r\n\t\tlet current = id + \"_Colors\";\r\n\t\tlet template = id + \"_Template\";\r\n\t\tlet colors = {\r\n\t\t\tLow: LinkCtrl.new(\"Color\", {ID: current, Title: \"Color for the lowest value\", Default: this.HeatmapOptions.Low.getValue(), Label: \"0\", Chain: {Index: 0}}),\r\n\t\t\tMedium: LinkCtrl.new(\"Color\", {ID: current, Title: \"Color for the average value\", Default: this.HeatmapOptions.Medium.getValue(), Label: \"50\", Chain: {Index: 1}}),\r\n\t\t\tHigh: LinkCtrl.new(\"Color\", {ID: current, Title: \"Color for the highest value\", Default: this.HeatmapOptions.High.getValue(), Label: \"100\", Chain: {Index: 2, Last: true}}),\r\n\t\t}\r\n\t\tlet HMtemplates = CSSCOLORS.HMtemplates();\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<div style=\\\"float: left; text-align: center\\\">\";\r\n\t\t\thtml += \"<p><b>Selected colors:</b></p>\";\r\n\t\t\thtml += \"<div id=\\\"\" + current + \"\\\"></div>\";\r\n\t\thtml += \"</div>\";\r\n\t\thtml += \"<div style=\\\"margin-left:200px\\\">\";\r\n\t\t\thtml += \"<p><b>Templates:</b></p>\";\r\n\t\t\thtml += \"<div id=\\\"\" + template + \"\\\" style=\\\"overflow: auto\\\">\";\r\n\t\t\tHMtemplates.forEach(function(h, i) {\r\n\t\t\t\thtml += \"<label class=\\\"LinkCtrl LinkCtrl_Round LinkCtrl_Resting\\\" style=\\\"margin: 5px\\\" name=\\\"\" + i + \"\\\" title=\\\"Click on the template to apply its colors\\\">\";\r\n\t\t\t\th.forEach(function(c) {\r\n\t\t\t\t\thtml += \"<span style=\\\"background-color: \" + c + \"; border: 1px solid black; margin-right: 2px\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\";\r\n\t\t\t\t});\r\n\t\t\t\thtml += \"</label>\";\r\n\t\t\t\tif(i % 2 == 1) {html += \"<br>\"}\r\n\t\t\t});\r\n\t\t\thtml += \"</div>\";\r\n\t\thtml += \"</div>\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: html,\r\n\t\t\tTitle: \"Heatmaps\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Done\", Icon: {Type: \"Ok\", Space: true, Color: \"Green\"}, Click: function() { //Assign the selected colors to the controls and redraw the plate\r\n\t\t\t\t\tthis.HeatmapOptions.Low.setValue(colors.Low.getValue());\r\n\t\t\t\t\tthis.HeatmapOptions.Medium.setValue(colors.Medium.getValue());\r\n\t\t\t\t\tthis.HeatmapOptions.High.setValue(colors.High.getValue());\r\n\t\t\t\t\tthis.draw(this.Results.Selected[0]);\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}.bind(this)}, \r\n\t\t\t\t{Label: \"Cancel\", Icon: {Type: \"Cancel\", Space: true, Color: \"Red\"}, Click: function() {Form.close(id)}}\r\n\t\t\t],\r\n\t\t\tonInit: function() { //Init the linkCtrl with the form\r\n\t\t\t\tObject.values(colors).forEach(function(c) {c.init()});\r\n\t\t\t\tGetId(template).addEventListener(\"click\", function(e) { //Event attached to the main template div\r\n\t\t\t\t\tlet t = e.target;\r\n\t\t\t\t\tswitch(t.nodeName) {\r\n\t\t\t\t\t\tcase \"SPAN\": t = t.parentElement; break; //The click happened on the color span, rebase to the hosting label\r\n\t\t\t\t\t\tcase \"LABEL\": break; //the click happened on the hosting label\r\n\t\t\t\t\t\tdefault: return; //Any other case, we don't care\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet index = Number(t.attributes.name.value); //Index of the heatmap\r\n\t\t\t\t\tcolors.Low.setValue(HMtemplates[index][0]); //Redefine the controls with template colors\r\n\t\t\t\t\tcolors.Medium.setValue(HMtemplates[index][1]);\r\n\t\t\t\t\tcolors.High.setValue(HMtemplates[index][2]);\r\n\t\t\t\t});\r\n\t\t\t\tlet b = LinkCtrl.button({Label: \"Invert\", Title: \"Click here to invert the color gradient\", Click: function() { //Invert button\r\n\t\t\t\t\tlet low = colors.Low.getValue();\r\n\t\t\t\t\tlet high = colors.High.getValue();\r\n\t\t\t\t\tcolors.Low.setValue(high);\r\n\t\t\t\t\tcolors.High.setValue(low);\r\n\t\t\t\t}});\r\n\t\t\t\tlet here = GetId(current);\r\n\t\t\t\there.insertAdjacentHTML(\"beforeend\", \"<br><br>\");\r\n\t\t\t\there.append(b);\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\t//TO BE UPDATED WITH STREAM-WRITE CAPABILITIES WHEN POSSIBLE...\r\n\tpushLayout(r) { //Merge layout data with the result file provided\r\n\t\tlet limit = 5000;\r\n\t\tif(r.Validated == false) { //Cannot process unvalid result file\r\n\t\t\tEditor.Console.log({Message: \"The selected result has not been validated. Update mapping parameter and try again.\", Gravity: \"Error\"});\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tlet id = \"Form_PushLayout\";\r\n\t\tlet output = id + \"_output\";\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<fieldset><legend>Notice</legend>Use this tool to push the layout data into the current result file.<p class=\\\"Error\\\">Only \" + limit + \" rows will be processed, to prevent the browser to run out of memory.</p>\";\r\n\t\thtml += \"Range data will be resolved to their definition (if they exist) for the definition plate currently selected.<br>\";\r\n\t\thtml += \"Please ensure the desired plate is selected before continuing.</fieldset>\";\r\n\t\thtml += \"<div><p id=\\\"\" + output + \"\\\">Press the start button below when ready to continue</div>\";\r\n\t\tlet start = function() {\r\n\t\t\tGetId(output).innerHTML = \"<span class=\\\"Error\\\">Preparing file, please wait...</span>\";\r\n\t\t\tr.pushLayout(limit).then(function(out) { //run asynchronously\r\n\t\t\t\tlet save = Papa.unparse(out.Data, {delimiter: \"\\t\"});\r\n\t\t\t\tlet target = GetId(output); //Important to access the element after the file has been generated\r\n\t\t\t\tif(target) { //If the form is still open and the operation has not been cancelled\r\n\t\t\t\t\tlet url = URL.createObjectURL(new Blob([save], {type: 'text/plain;charset=utf-8'}));\r\n\t\t\t\t\tlet msg = \"<span class=\\\"Success\\\">Completed.</span>\";\r\n\t\t\t\t\tif(out.Aborted) {msg = \"<span class=\\\"Error\\\">Aborted after \" + limit + \" rows!<br>Consider reducing the size of your file.</span>\"}\r\n\t\t\t\t\ttarget.innerHTML = msg + \"<p>Click <a href=\\\"\" + url + \"\\\" download=\\\"Merged_Data.txt\\\">here</a> to download the generated file</p>\";\r\n\t\t\t\t\tForm.replaceButtons(id, [{Label: \"Close\", Click: function() {URL.revokeObjectURL(url); Form.close(id)}}]); //Revoke the URL has it is no longer useful\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: html,\r\n\t\t\tSize: 500,\r\n\t\t\tTitle: \"Push layout\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Start\", Click: start},\r\n\t\t\t\t{Label: \"Cancel\", Click: function() {Form.close(id)}},\r\n\t\t\t],\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n}","//***************************************************************\r\n//TYPEMAP Object - To handle compatibility of types in the plate\r\n//***************************************************************\r\nclass TypeMap {\r\n\tconstructor(plate) {\r\n\t\tthis.Plate = plate;\r\n\t\tthis.Map = Array(plate.Rows * plate.Cols); //Start with an empty array\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic valueForType(type) { //Return the value for type\r\n\t\tswitch(type) {\r\n\t\t\tcase \"Positive Control\": return 0;\r\n\t\t\tcase \"Negative Control\": return 1;\r\n\t\t\tcase \"Sample\": return 2;\r\n\t\t\tcase \"Range\": return 3;\r\n\t\t\tcase \"Mixed+\": return 4;\r\n\t\t\tcase \"Mixed-\": return 5;\r\n\t\t\tdefault: return 6;\r\n\t\t}\r\n\t}\r\n\tstatic symbolForValue(value) { //Return the symbol representing the type stored as value\r\n\t\tswitch(value) {\r\n\t\t\tcase 0: return \"+\";\r\n\t\t\tcase 1: return \"-\";\r\n\t\t\tcase 2: return \"S\";\r\n\t\t\tcase 3: return \"R\";\r\n\t\t\tcase 4: return \"M+\";\r\n\t\t\tcase 5: return \"M-\";\r\n\t\t\tdefault: return \"&nbsp;\";\r\n\t\t}\r\n\t}\r\n\tstatic colorForValue(value) { //Return the css color name associated with the type\r\n\t\tswitch(value) {\r\n\t\t\tcase 0: return \"lightgreen\";\r\n\t\t\tcase 1: return \"lightsalmon\";\r\n\t\t\tcase 2: return \"white\";\r\n\t\t\tcase 3: return \"lightcyan\";\r\n\t\t\tcase 4: return \"khaki\";\r\n\t\t\tcase 5: return \"plum\";\r\n\t\t\tdefault: return \"white\";\r\n\t\t}\r\n\t}\r\n\tstatic matrix(a, b) { //Return the type value of comparing the 2 incoming type values\r\n\t\tlet M = [ //Compatibility matrix. Types are in order +/-/S/R/M+/M-/unknown\r\n\t\t\t[ 0,-1, 4, 4, 4,-1, 6],\r\n\t\t\t[-1, 1, 5, 5,-1, 5, 6],\r\n\t\t\t[ 4, 5, 2, 2, 4, 5, 6],\r\n\t\t\t[ 4, 5, 2, 3, 4, 5, 6],\r\n\t\t\t[ 4,-1, 4, 4, 4,-1, 6],\r\n\t\t\t[-1, 5, 5, 5,-1, 5, 6],\r\n\t\t\t[ 6, 6, 6, 6, 6, 6, 6],\r\n\t\t];\r\n\t\treturn M[a][b];\r\n\t}\r\n\tstatic checkCompatibility(a, b, strict) { //Check compatibility of the two types provided\r\n\t\tif(a === undefined || b === undefined) {return true} //Always compatible with nothing\r\n\t\tif(a == -1 || b == -1) {return false} //Incompatibility will propagate\r\n\t\tlet result = this.matrix(a, b);\r\n\t\tif(result == -1) {return false} //Overall between positive and negative control is always rejected\r\n\t\tif(strict && result > 3) {return false} //Types are not \"pure\" or not compatible, reject in strict mode\r\n\t\telse {return true}\r\n\t}\r\n\tstatic reduce(array) { //Reduce the array of type provided and return the final value\r\n\t\tif(array.length > 0) { //At least one element remaining\r\n\t\t\tlet t = array.reduce(function (a, b) {\r\n\t\t\t\treturn TypeMap.matrix(a, b);\r\n\t\t\t});\r\n\t\t\treturn t;\r\n\t\t}\r\n\t\treturn undefined; //Fallback if array is empty\r\n\t}\r\n\tstatic getConflicts(map) { //Check the map provided and return the array of index for which conflicts are found\r\n\t\tvar out = [];\r\n\t\tmap.Map.forEach(function(m, i) {\r\n\t\t\tif(m > 3) {out.push(i)}\r\n\t\t});\r\n\t\treturn out;\r\n\t}\r\n\t//Methods\r\n\tget(index) { //Return the type at the index location\r\n\t\treturn this.Map[index];\r\n\t}\r\n\ttypes(index, l) { //Return the array of types for all layer except l, at the index location.\r\n//*********************************************************\r\n//Can be used with l=-1 to retrieve types across all layers\r\n//However, it is much easier to use Map[index] in this case\r\n//*********************************************************\r\n\t\tlet types = [];\r\n\t\tthis.Plate.Layers.forEach(function(L) { //Collect the types at location index, across the layers, excluding l\r\n\t\t\tif(L.Index != l) { //All layers excluding l\r\n\t\t\t\tlet w = L.Wells[index];\r\n\t\t\t\tif(w.Area) { //If an area is defined\r\n\t\t\t\t\ttypes.push(TypeMap.valueForType(w.Area.Type));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn types;\r\n\t}\r\n\tlog(index, type) { //Log the type provided at position index\r\n\t\tlet a = this.Map[index];\r\n\t\tlet b = TypeMap.valueForType(type);\r\n\t\tif(a !== undefined) {this.Map[index] = TypeMap.matrix(a, b)} //A value has already been defined.\r\n\t\telse {this.Map[index] = b} //This position was empty\r\n\t\treturn this;\r\n\t}\r\n\tunlog(index, l) { //Recompute the type that will remain at position index after removal of the type on layer l\r\n\t\tlet types = this.types(index, l); //Recover the array of types\r\n\t\tthis.Map[index] = TypeMap.reduce(types); //Update with new computed type\r\n\t}\r\n\tresize(r, c) { //Resize the Map array to new dimensions provided\r\n\t\tlet oldRows = this.Plate.Rows; //Old dimensions\r\n\t\tlet oldCols = this.Plate.Cols;\r\n\t\tlet temp = []; //The new Map array\r\n\t\tlet i = 0;\r\n\t\twhile(i < r) {\r\n\t\t\tlet j = 0;\r\n\t\t\twhile(j < c) {\r\n\t\t\t\tif(j < oldCols && i < oldRows) { //Salvage the old data\r\n\t\t\t\t\tlet oldData = this.Map[oldCols * i + j];\r\n\t\t\t\t\tif(oldData) {temp.push(oldData)}\r\n\t\t\t\t\telse {temp.push(undefined)}\r\n\t\t\t\t}\r\n\t\t\t\telse {temp.push(undefined)}\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tthis.Map = temp;\r\n\t\treturn this;\r\n\t}\r\n\tdraw() { //Draw the map as an html array\r\n\t\tlet r = this.Plate.Rows;\r\n\t\tlet c = this.Plate.Cols;\r\n\t\tlet html = \"<table class=\\\"PlateTable\\\"><tr><th></th>\";\r\n\t\tfor(let j=0;j<c;j++) { //Headers, for each col\r\n\t\t\thtml += \"<th>\" + (j + 1) + \"</th>\";\r\n\t\t}\r\n\t\thtml += \"</tr>\";\r\n\t\tfor(let i=0;i<r;i++) { //For each row\r\n\t\t\thtml += \"<tr><th>\" + Well.alphabet(i) + \"</th>\";\r\n\t\t\tfor(let j=0;j<c;j++) { //For each col\r\n\t\t\t\tlet v = this.Map[i * c + j];\r\n\t\t\t\thtml += \"<td style=\\\"background-color: \" + TypeMap.colorForValue(v) + \"\\\">\" + TypeMap.symbolForValue(v) + \"</td>\";\r\n\t\t\t}\r\n\t\t\thtml += \"</tr>\";\r\n\t\t}\r\n\t\thtml += \"</table>\";\r\n\t\thtml+= \"<p style=\\\"font-size:0.8em\\\">+: Positive Control; -: Negative Control; S: Sample; R: Range; M+/-: Mixed sample or range with control</p>\"\r\n\t\treturn html;\r\n\t}\r\n}","//*************************************************\r\n// WELL object - Well is a collection of properties\r\n//*************************************************\r\nclass Well {\r\n\tconstructor(I) {\r\n\t\tthis.Layer = I.Layer; //Parent Layer object\r\n\t\tthis.Index = I.Index; //Index in the parent Wells array\r\n\t\tthis.Row = I.Row;\r\n\t\tthis.Col = I.Col;\r\n\t\tthis.Value = undefined; //The value of the concentration, as a number\r\n\t\tthis.Conc = undefined; //A string representing the formatted value of the concentration, used for display\r\n\t\tthis.Unit = undefined; //The unit attached to the concentration\r\n\t\tthis.RangeIndex = 1; //Index of the well in the range\r\n\t\tthis.Area = undefined; //Area contained in this well\r\n//*************************************\r\n//Indicators for the status of the well\r\n\t\tthis.Selected = false;\r\n\t\tthis.Duplicate = false;\r\n\t\tthis.Error = false;\r\n//*************************************\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic alphabet(c) { //Return a string matching the column index given\r\n\t\tvar A = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\r\n\t\tif(c < 26) {return A[c]}\r\n\t\telse {return \"A\" + A[c-26]} //This is enough to cover all the 48 rows allowed\r\n\t}\r\n\tstatic dose(w) { //Return a string for the dose in this well\r\n\t\tif(w === undefined || w.Conc === undefined) {return \"\"}\r\n\t\tif(w.Unit == \"MOI\") {return \"MOI \" + w.Conc} //Unit goes first\r\n\t\tif(w.Unit == \"%\" || w.Unit == \"×\") {return w.Conc + w.Unit} //No space\r\n\t\treturn w.Conc + \" \" + w.Unit; //Normal case\r\n\t}\r\n\tstatic parseIndex(w, plate) { //Parse the index corresponding to the well name provided as a string, in the current plate dimensions\r\n\t\tif(w === undefined || plate === undefined || w.search === undefined) {return}\r\n\t\tlet c = plate.Cols;\r\n\t\tlet r = plate.Rows;\r\n\t\tlet i = w.search(/[a-z]{1,2}[0-9]{1,3}/i);\r\n\t\tif(i < 0) {return} //Not a valid well name\r\n\t\tlet letters = w.match(/[a-z]{1,2}/i); //Parse well name from string. Accept both AX and A0X formats\r\n\t\tlet digits = w.match(/[0-9]{1,3}/);   //\r\n\t\tlet col = parseInt(digits, 10) - 1; //will remove trailing 0 if any (case A0X format)\r\n\t\tif(col >= c) {return} //Outside plate dimensions\r\n\t\tlet row = Well.rowIndex(letters);\r\n\t\tif(row === undefined || row >= r) {return}\r\n\t\treturn {Index: row * c + col, Row: row, Col: col};\r\n\t}\r\n\tstatic rowIndex(a) { //Parse the row index for the provided string\r\n\t\tif(a.length == 1) {return parseInt(a, 36) - 10}\r\n\t\tif(a.length == 2) {return (parseInt(a.charAt(0), 36) - 9) * 26 + parseInt(a.charAt(1), 36) - 10}\r\n\t}\r\n\tstatic layoutData(well, resolvedDef) { //Return the layout data for the current well, as an array, using the provided definitions\r\n\t\tlet data = [\"\"]; //Start with an empty placeholder for the area\r\n\t\tif(well.Value) {data.push(well.Value, well.Unit)}\r\n\t\telse {data.push(\"\", \"\")} //Need to push something to conserve the right number/order in columns\r\n\t\tlet a = well.Area;\r\n\t\tif(a) { //If an area is present\r\n\t\t\tif(a.Type == \"Range\") { //Specific case for range\r\n\t\t\t\tif(a.Definition) { //There is a definition attached to this range\r\n\t\t\t\t\tdata[0] = resolvedDef[a.Name][well.Index];\r\n\t\t\t\t}\r\n\t\t\t\telse { //Use generic names\r\n\t\t\t\t\tdata[0] = a.Name + \" #\" + well.RangeIndex;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {data[0] = a.Name} //The rest is straightforward\r\n\t\t}\r\n\t\treturn data;\r\n\t}\r\n//*******************\r\n//SAVE & LOAD METHODS\r\n//*******************\r\n\tstatic save(w) { //Return a simplified version of the well object for saving\r\n\t\treturn {\r\n\t\t\tIndex: w.Index,\r\n\t\t\tValue: w.Value,\r\n\t\t\tUnit: w.Unit,\r\n\t\t\tRangeIndex: w.RangeIndex\r\n\t\t}\r\n\t}\r\n//*******************\r\n\t//Getter\r\n\tget Name() {\r\n\t\treturn Well.alphabet(this.Col) + (this.Row + 1);\r\n\t}\r\n\t//Methods\r\n\tx(space) { //Return the x coordinate for this well on the canvas, calculated based on space (size + margin)\r\n\t\treturn (this.Col + 1) * space;\r\n\t}\r\n\ty(space) { //Return the y coordinate for this well on the canvas, calculated based on space (size + margin)\r\n\t\treturn (this.Row + 1) * space;\r\n\t}\r\n\tcontent(ctx, size, margin) {\r\n\t\tlet space = size + margin;\r\n\t\tlet half = margin / 2;\r\n\t\tlet x = this.x(space);\r\n\t\tlet y = this.y(space);\r\n\t\tctx.clearRect(x - half, y - half, size + margin, size + margin);\r\n\t\tctx.save();\r\n\t\tif(this.Selected || this.Duplicate || this.Error) { //Highlight the well to mark its state\r\n\t\t\tctx.strokeStyle = \"dodgerblue\";\r\n\t\t\tif(this.Duplicate) {\r\n\t\t\t\tctx.strokeStyle = \"darkorange\";\r\n\t\t\t\tthis.Duplicate = false;\r\n\t\t\t}\r\n\t\t\tif(this.Error) {\r\n\t\t\t\tctx.strokeStyle = \"darkred\";\r\n\t\t\t\tthis.Error = false;\r\n\t\t\t}\r\n\t\t\tctx.lineWidth = 3;\r\n\t\t\tctx.strokeRect(x, y, size, size);\r\n\t\t\tif(this.Area) {\r\n\t\t\t\tctx.lineWidth = 1;\r\n\t\t\t\tctx.strokeStyle = \"black\";\r\n\t\t\t\tctx.strokeRect(x + half, y + half, size - margin, size - margin);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.Area) { //Area information\r\n\t\t\tctx.fillStyle = this.Area.Color;\r\n\t\t\tctx.fillRect(x + half + 1 , y + half + 1, size - margin - 2, size - margin - 2);\r\n\t\t\tif(this.Area.Type == \"Range\") {\r\n\t\t\t\tctx.fillStyle = CSSCOLORS.font(this.Area.Color); //Color for text\r\n\t\t\t\tctx.font = (Math.floor(margin / 2) * 4 + 3) + \"px arial\";\r\n\t\t\t\tctx.textAlign = \"center\";\r\n\t\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\t\tctx.fillText(this.RangeIndex, x + size * 0.5, y + size * 0.4, size); //MaxWidth specified to avoid excessive overlap\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(this.Conc) { //Concentration information\r\n\t\t\tif(this.Area) {ctx.fillStyle = CSSCOLORS.font(this.Area.Color)} //Color for text\r\n\t\t\telse {ctx.fillStyle = \"black\"}\r\n\t\t\tctx.font = (Math.floor(margin / 2) * 2 + 3) + \"px arial\";\r\n\t\t\tctx.textAlign = \"center\";\r\n\t\t\tctx.textBaseline = \"middle\";\r\n\t\t\tctx.fillText(Well.dose(this), x + size * 0.5, y + size * 0.75, size); //MaxWidth specified to avoid excessive overlap\r\n\t\t}\r\n\t\tctx.restore();\r\n\t\treturn this;\r\n\t}\r\n\ttag(a, I) { //Tag the well with area a\r\n\t\tif(I.Keep == false) {this.Selected = false}\r\n\t\tif(this.Area) { //Area already defined here\r\n\t\t\tif(this.Area.Name == a.Name) {this.Duplicate = true; return this} //Tagging in duplicate\r\n\t\t\tif(I.Lock) {this.Error = true; return this} //Trying to change the area when lock option is ON\r\n\t\t\tvar t = TypeMap.reduce(I.Map.types(this.Index, I.Layer.Index)); //Type of everything minus the area defined here, because it can be replaced\r\n\t\t}\r\n\t\telse { //No area defined in the well\r\n\t\t\tvar t = I.Map.get(this.Index) //Type at this location when no area is defined here is directly obtained from the map\r\n\t\t}\r\n\t\tlet bool = TypeMap.checkCompatibility(t, TypeMap.valueForType(a.Type), I.Strict); //Check compatibility\r\n\t\tif(!bool) {this.Error = true; return this} //Not compatible :(\r\n\t\tif(this.Area) {this.untag(I)} //Compatible, remove the area tagged if any, so that the new area can be added\r\n\t\tthis.Area = a; //Finally, tag with the new area\r\n\t\tif(a.Type == \"Range\" && a.Custom) {this.RangeIndex = I.RangeIndex} //Proceed to custom tagging here\r\n\t\tI.Map.log(this.Index, a.Type); //Log the type at this location\r\n\t\treturn this;\r\n\t}\r\n\tuntag(I) { //Untag the well\r\n\t\tif(I.Keep == false) {this.Selected = false}\r\n\t\tlet a = this.Area;\r\n\t\tif(a) { //Do something if the well had some area defined\r\n\t\t\tArea.unlog(a, I.Layer, this); //Remove this well from the list of wells belonging to this area\r\n\t\t\tI.Map.unlog(this.Index, I.Layer.Index); //Update the map of types\r\n\t\t\tif(a.Type == \"Range\") { //Special case for ranges\r\n\t\t\t\tif(a.Custom) {this.RangeIndex = 0} //For customized numbering, remove the value now\r\n\t\t\t\tlet name = a.Name;\r\n\t\t\t\tlet index = I.Results.Ranges.findIndex(function(r) {return r.Name == name}); //Look whether this area already exist in the Ranges array\r\n\t\t\t\tif(index == -1) {\r\n\t\t\t\t\tI.Results.Ranges.push(a); //Add the area only if not already present\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.Area = undefined;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\ttagConc(I) { //Tag the well with concentration given\r\n\t\tthis.Value = I.Value;\r\n\t\tthis.Conc = Decimal.format(I.Value, I.Digit);\r\n\t\tthis.Unit = I.Unit;\r\n\t\treturn this;\r\n\t}\r\n\tuntagConc() { //UnTag the well with concentration given\r\n\t\tthis.Value = undefined;\r\n\t\tthis.Conc = undefined;\r\n\t\tthis.Unit = undefined;\r\n\t\treturn this;\r\n\t}\r\n\tchangeDigit(digit) { //Update the digit representation of the concentration\r\n\t\tthis.Conc = Decimal.format(this.Value, digit);\r\n\t\treturn this;\r\n\t}\r\n}"]}
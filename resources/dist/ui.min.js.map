{"version":3,"sources":["ui-objects/Form.js","ui-objects/LinkCtrl.js","ui-objects/RespTable.js","ui-objects/TabControl.js","ui-objects/TabPanel.js","ui-objects/LinkCtrl/LinkCtrl_Checkbox.js","ui-objects/LinkCtrl/LinkCtrl_Color.js","ui-objects/LinkCtrl/LinkCtrl_File.js","ui-objects/LinkCtrl/LinkCtrl_Number.js","ui-objects/LinkCtrl/LinkCtrl_Radio.js","ui-objects/LinkCtrl/LinkCtrl_Select.js","ui-objects/LinkCtrl/LinkCtrl_Text.js","ui-objects/LinkCtrl/LinkCtrl_TextArea.js"],"names":["Form","[object Object]","I","undefined","console","error","id","ID","this","Dialogs","addMask","document","getElementsByClassName","remove","initForm","f","GetId","closeMask","Location","buttons","warn","replaceWith","footer","Buttons","mask","createElement","className","body","lastChild","insertAdjacentElement","append","addEventListener","e","move","bind","size","Size","style","width","left","window","innerWidth","pageXOffset","top","innerHeight","pageYOffset","innerHTML","header","onInit","onCancel","close","html","Title","HTML","forEach","b","i","insertAdjacentHTML","LinkCtrl","button","m","Moving","Top","StartY","clientY","Left","StartX","clientX","offsetTop","offsetLeft","data","dataType","fileName","DataType","FileName","url","URL","createObjectURL","Blob","type","open","Label","Click","revokeObjectURL","Default","Value","ControlLeft","NewLine","Preserve","change","Change","v","Chain","Index","Disabled","Me","Control","LinkCtrl_Checkbox","LinkCtrl_Text","LinkCtrl_TextArea","LinkCtrl_Number","LinkCtrl_Select","LinkCtrl_Color","LinkCtrl_Radio","LinkCtrl_File","span","classes","whiteSpace","title","Icon","icon","Inline","div","Space","Active","Attributes","a","Name","position","Type","filter","Color","Classes","getClass","HasLabel","length","txt","ForceMiddle","c","RightOnly","Last","LeftOnly","container","bindEvents","me","updateValue","setValue","focus","RespTable","Array","Multiple","Headers","Fields","RowNumbers","FullWidth","MaxHeight","Delegate","onSelect","onDelete","onUpdate","NoControls","Length","SelectedIndices","indices","r","Selected","push","bar","buttonBar","confirmForm","empty","removeRows","up","down","bottom","prepend","OldSelection","OldIndices","target","nodeName","On","Function","Cancel","index","parentElement","rowIndex","update","Action","headers","O","Status","extractData","cell","h","out","keys","Object","values","findIndex","k","val","table","rows","newArray","found","includes","l","s","temp","splice","unshift","firstChild","display","field","value","action","next","arg","TabControl","Tabs","LastKey","AutoInit","Stack","Layout","AfterDelete","t","Key","Parent","TabPanel","init","key","label","set","array","classList","contains","add","initHeader","initContent","source","Anchors","Header","click","Number","getAttribute","getTabIndex","hasAttribute","deleteConfirm","fold","jumpTo","addTab","addTabHTML","SetActive","tab","children","ui","deleteTab","tabs","delete","name","rename","Controls","Content","root","initContentInternal","classHeader","appendControls","o","dom","content","C","as","split","updateState","nextElementSibling","super","newVal","checked","DOMlist","replace","Form_Color","Caller","after","backgroundColor","Accept","DragMsg","msg","multiple","accept","fileInfo","dropMsg","input","clear","previousElementSibling","files","drop","preventDefault","dataTransfer","valid","formatSupported","format","endsWith","diff","Min","Infinity","Max","Step","htmlInput","color","min","max","disabled","List","labels","newValue","item","selected","isNaN","oldLabel","NavBar","Lookup","Query","Values","LastVisited","middle","htmlInternal","htmlLookup","htmlOptions","selectedIndex","lookup","text","timeout","setTimeout","LU","query","p","Promise","resolve","result","RG","RegExp","test","clearTimeout","then","back","previousSibling","first","nextSibling","last","list","select"],"mappings":"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","file":"ui.min.js","sourcesContent":["//*********************************************************************************\r\n// FORM object - Object representing a form that will pop-up to request user inputs\r\n//*********************************************************************************\r\nclass Form {\r\n\tconstructor() {}\r\n\t//Static Methods\r\n\tstatic open(I) { //Open the form with the provided options: ID, Title, Size, Buttons, HTML, OnInit\r\n\t\tif(I === undefined) {console.error(\"No options provided to Form.open(). Aborted\"); return} //Check for options\r\n\t\tlet id = I.ID;\r\n\t\tif(id === undefined || id === \"\") {console.error(\"No id provided to Form.open(). Aborted\"); return} //Check for id\r\n\t\tif(this.Dialogs) { //Property already defined, add the mask only if no dialog opened\r\n\t\t\tif(this.Dialogs == 0) {this.addMask()}\r\n\t\t\tthis.Dialogs++;\r\n\t\t}\r\n\t\telse { //First use, create the static property and add the mask\r\n\t\t\tthis.Dialogs = 1;\r\n\t\t\tthis.addMask();\r\n\t\t}\r\n\t\tif(this.Dialogs > 1) { //Remove the mask and append a new one to allow only the last form to be active\r\n\t\t\tdocument.getElementsByClassName(\"Form_Mask\")[0].remove();\r\n\t\t\tthis.addMask(); //Calling this method ensures the mask is after the previous form and will have the move event attached\r\n\t\t}\r\n\t\tthis.initForm(I); //Create the form\r\n\t}\r\n\tstatic close(id) { //Close the form with the provided id\r\n\t\tif(id === undefined || id === \"\") {console.error(\"No options provided to Form.close(). Aborted\"); return} //Check for id\r\n\t\tlet f = GetId(id);\r\n\t\tif(f) {f.remove()} //Remove the form if it exists\r\n\t\tthis.closeMask(); //Remove the mask\r\n\t\tif(this.Dialogs) { \r\n\t\t\tthis.Dialogs--;\r\n\t\t\tif(this.Dialogs > 0) {this.addMask({Location: \"beforebegin\"})} //If there are remaining forms, add the mask before the last form\r\n\t\t}\r\n\t}\r\n\tstatic replaceButtons(id, buttons) { //Replace the buttons of the form with the provided id, using the new buttons provided in input (array of button objects)\r\n\t\tlet f = GetId(id);\r\n\t\tif(f === null) {console.warn(\"Form '\" + id + \"' not accessible for buttons replacement\"); return this}\r\n\t\tif(buttons === undefined) {buttons = []}\r\n\t\tlet footer = f.getElementsByClassName(\"Form_Footer\");\r\n\t\tfooter[0].replaceWith(this.footer({Buttons: buttons}));\r\n\t}\r\n\t//These methods are for internal use and should not be called directly\r\n\tstatic addMask(I) { //Create a mask in the document to create the background and give modal effect\r\n\t\tlet mask = document.createElement(\"div\");\r\n\t\tmask.className = \"Form_Mask\";\r\n\t\tif(I && I.Location) {document.body.lastChild.insertAdjacentElement(I.Location, mask)} //Location provided\r\n\t\telse {document.body.append(mask)} //Default\r\n\t\tmask.addEventListener(\"mousemove\", function(e) {this.move(e)}.bind(this)); //Move event taken over by the mask, in case the movement from the header are too fast\r\n\t}\r\n\tstatic closeMask() { //Remove the mask to free the page\r\n\t\tlet mask = document.getElementsByClassName(\"Form_Mask\")[0];\r\n\t\tif(mask) {mask.remove()}\r\n\t}\r\n\tstatic initForm(I) { //Create the div that will host the form\r\n\t\tlet f = document.createElement(\"div\");\r\n\t\tf.className = \"Form_Wrapper\";\r\n\t\tf.id = I.ID;\r\n\t\tlet size = (I.Size || 400);\r\n\t\tf.style.width = size + \"px\";\r\n\t\tf.style.left = ((window.innerWidth - size) / 2) + window.pageXOffset + (15 * (this.Dialogs - 1)) + \"px\"; //Position the form at the center of the page, with an offset in case of multiple forms\r\n\t\tf.style.top = (window.innerHeight / 4) + window.pageYOffset + (15 * (this.Dialogs - 1)) + \"px\"; //Position the form close to the top, with an offset in case of multiple forms\r\n\t\tf.innerHTML = this.header(size, I) + this.body(I);\r\n\t\tf.append(this.footer(I)); //Footer is created as a node and added\r\n\t\tdocument.body.append(f); //Add the element to the page\r\n\t\tif(I.onInit) {I.onInit()} //User function to run on opening the dialog\r\n\t\tf.getElementsByClassName(\"Form_Closure\")[0].addEventListener(\"click\", function() { //Add a closure event on the red cross button in the right corner\r\n\t\t\tif(I.onCancel) {I.onCancel()}\r\n\t\t\tForm.close(f.id);\r\n\t\t});\r\n\t\tf.getElementsByClassName(\"Form_Header\")[0].addEventListener(\"mousemove\", function(e) {this.move(e, f)}.bind(this)); //Move event on the header\r\n\t\tf.addEventListener(\"mousemove\", function(e) {this.move(e)}.bind(this)); //Move event on the form div to take over mouse movements too fast and \"spilling over\"\r\n\t}\r\n\tstatic header(size, I) { //Header of the form. Receives the options as well as the desired width for the form\r\n\t\tlet html = \"<div class=\\\"Form_Header\\\">\";\r\n\t\tif(I.Title) { //Title of the dialog\r\n\t\t\tlet w = size - 50; //Leave some space for the closure\r\n\t\t\thtml += \"<div class=\\\"Form_Title\\\" style=\\\"width: \" + w + \"px\\\">\" + I.Title + \"</div>\";\r\n\t\t}\r\n\t\thtml += \"<div class=\\\"Form_Closure\\\" title=\\\"Close\\\">&times;</div>\";\r\n\t\thtml += \"</div>\";\r\n\t\treturn html;\r\n\t}\r\n\tstatic body(I) { //Form body\r\n\t\tlet html = \"<div class=\\\"Form_Body\\\">\";\r\n\t\tif(I.HTML) {html += I.HTML}\r\n\t\thtml += \"</div>\";\r\n\t\treturn html;\r\n\t}\r\n\tstatic footer(I) { //Footer section with buttons. Created as a node because buttons have functions attached to them\r\n\t\tlet footer = document.createElement(\"div\");\r\n\t\tfooter.className = \"Form_Footer\";\r\n\t\tif(I.Buttons) {\r\n\t\t\tI.Buttons.forEach(function(b, i) {\r\n\t\t\t\tif(i > 0) {footer.insertAdjacentHTML(\"beforeend\", \"&nbsp;\")} //To space the buttons evenly\r\n\t\t\t\tfooter.append(LinkCtrl.button(b));\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn footer;\r\n\t}\r\n\tstatic move(e, f) { //Move the form f following mouse position in event e\r\n\t\tif(e.buttons == 1) {\r\n\t\t\tlet m = this.Moving;\r\n\t\t\tif(m) {\r\n\t\t\t\tlet f = this.Moving.Form;\r\n\t\t\t\tf.style.top = (m.Top - (m.StartY - e.clientY)) + \"px\";\r\n\t\t\t\tf.style.left = (m.Left - (m.StartX - e.clientX)) + \"px\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(f) {\r\n\t\t\t\t\tthis.Moving = {StartX: e.clientX, StartY: e.clientY, Top: f.offsetTop, Left: f.offsetLeft, Form: f}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {this.Moving = undefined}\r\n\t}\r\n\tstatic download(data, I) { //Open a form providing a link allowing download of the data\r\n\t\tlet dataType = \"text/plain;charset=utf-8\";\r\n\t\tlet fileName = \"download.txt\";\r\n\t\tif(I.DataType) {dataType = I.DataType}\r\n\t\tif(I.FileName) {fileName = I.FileName}\r\n\t\tlet url = URL.createObjectURL(new Blob([data], {type: dataType}));\r\n\t\tlet id = \"Form_Download\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<p>Click on the link below to download and save your file:</p><p style=\\\"text-align: center;\\\"><a href=\\\"\" + url + \"\\\" download=\\\"\" + fileName + \"\\\">\" + fileName + \"</a></p>\",\r\n\t\t\tTitle: \"Download file\",\r\n\t\t\tButtons: [{Label: \"Close\", Click: function() {URL.revokeObjectURL(url); Form.close(id)}}], //Revoke the URL has it is no longer useful\r\n\t\t});\r\n\t}\r\n}","//***********************************************************************************************\r\n// LINKCTRL object - Extension of the HTML controls for direct interaction with object properties\r\n//***********************************************************************************************\r\nclass LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tthis.ID = I.ID; //ID of the html element containing the control\r\n\t\tthis.Default = I.Default; //Default value of the control upon initialization\r\n\t\tthis.Value = I.Default; //Keeping the value in the object ensures that it can be recovered even after the html control is destroyed\r\n\t\tthis.Title = (I.Title || \"\"); //Text used to populate the title field of the label\r\n\t\tthis.Label = (I.Label || \"\"); //Test used as label for the control\r\n\t\tthis.ControlLeft = (I.ControlLeft || false);//Whether the control should be at the left of the label, instead of the right\r\n\t\tthis.NewLine = (I.NewLine || false); //Whether to go to the next line AFTER this control\r\n\t\tthis.Preserve = (I.Preserve || false); //Whether to preserve previous content or not.\r\n\t\tthis.change = (I.Change || function(v) {}.bind(this)); //Additional function to run in case the value of the control is changed. The function will receive the new value\r\n\t\tthis.Chain = I.Chain; //An object composed of the mandatory \"Index\" property and optional \"Last\" property, to control the chaining. If undefined, the chaining is off (standalone control)\r\n\t\tif(this.Chain) {this.Index = this.Chain.Index} //In case of chaining, the index of the control in the chain.\r\n\t\telse { //Defining an index allow to chain elements by \"sticking\" them together in a control bar. Useful for vertical layout\r\n\t\t\tif(I.Index && I.Index > -1) {this.Index = I.Index}\r\n\t\t\telse {this.Index = 0}\r\n\t\t}\r\n\t\tthis.Disabled = I.Disabled; //To init the control in a disable stage\r\n\t\tthis.Me = this.ID + \"_\" + this.Index;\r\n\t\tthis.Control = this.Me + \"_Control\";\r\n\t}\r\n\t//Static methods\r\n\tstatic new(type, I) { //Create a new LnkCtrl object of the desired type\r\n\t\tif(I === undefined) {console.error(\"Required options missing for LinkCtrl. Aborted.\"); return} //Check for required options\r\n\t\tif(I.ID === undefined || I.ID == \"\") {console.error(\"Required ID missing for LinkCtrl. Aborted.\"); return}\r\n\t\tif(I.Default === undefined) {console.error(\"Required default value missing for LinkCtrl. Aborted.\"); return}\r\n\t\tswitch(type) { //Create the desired element\r\n\t\t\tcase \"Checkbox\": return new LinkCtrl_Checkbox(I);\r\n\t\t\tcase \"Text\": return new LinkCtrl_Text(I);\r\n\t\t\tcase \"TextArea\": return new LinkCtrl_TextArea(I);\r\n\t\t\tcase \"Number\": return new LinkCtrl_Number(I);\r\n\t\t\tcase \"Select\": return new LinkCtrl_Select(I);\r\n\t\t\tcase \"Color\": return new LinkCtrl_Color(I);\r\n\t\t\tcase \"Radio\": return new LinkCtrl_Radio(I);\r\n\t\t\tcase \"File\": return new LinkCtrl_File(I);\r\n\t\t\tdefault: //Exit if the type is unknown\r\n\t\t\t\tconsole.error(\"Unknown type requested for LinkCtrl (\" + type + \"). Aborted.\");\r\n\t\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tstatic button(I) { //Output the node for a button with the desired options: ID, Title, Label, Disabled, Click, Icon\r\n\t\tif(I === undefined) {console.error(\"Required options missing for Button. Aborted.\"); return} //Check for required options\r\n\t\tvar span = document.createElement(\"span\"); //Spawn the node for the button\r\n\t\tvar classes = \"LinkCtrl LinkCtrl_Round\";\r\n\t\tif(I.Disabled) {classes += \" LinkCtrl_Disabled\"}\r\n\t\telse {classes += \" LinkCtrl_Resting\"}\r\n\t\tspan.style.whiteSpace = \"pre\";\r\n\t\tspan.className = classes; //Add the class to the element\r\n\t\tif(I.ID) {span.id = I.ID}\r\n\t\tif(I.Title) {span.title = I.Title}\r\n\t\tif(I.Label) {span.innerHTML = I.Label}\r\n\t\tif(I.Icon) {\r\n\t\t\tlet icon = this.icon(I.Icon); //Generate the icon html\r\n\t\t\tif(I.Icon.Left) {span.insertAdjacentHTML(\"afterbegin\", icon)} //Icon first\r\n\t\t\telse {span.insertAdjacentHTML(\"beforeend\", icon)} //Icon last\r\n\t\t}\r\n\t\tif(I.Click && !I.Disabled) { //Attach the event if defined and the button is not disabled\r\n\t\t\tspan.addEventListener(\"click\", I.Click);\r\n\t\t}\r\n\t\treturn span;\r\n\t}\r\n\tstatic buttonBar(I, Inline) { //Output the nodes for a bar of buttons with the desired options: Buttons\r\n\t\tif(I === undefined) {console.error(\"Required buttons missing for button bar. Aborted.\"); return} //Check for required options\r\n\t\tvar div = document.createElement(\"div\"); //Spawn the container node\r\n\t\tif(Inline) {div.className = \"LinkCtrl_Inline\"}\r\n\t\tI.forEach(function(b, i) {\r\n\t\t\tif(i > 0) {div.insertAdjacentHTML(\"beforeend\", \" \")} //To space the buttons evenly\r\n\t\t\tdiv.append(this.button(b));\r\n\t\t}, this);\r\n\t\treturn div;\r\n\t}\r\n\tstatic icon(I) { //Create the html needed to display an icon, based on the provided options\r\n\t\tlet html = \"\";\r\n\t\tif(I.Space) {html += \"&nbsp;\"}\r\n\t\thtml += \"<span class=\\\"LinkCtrl_Icon\"; //Mind the initial space\r\n\t\tif(I.Active !== undefined) {\r\n\t\t\tif(I.Active) {html += \" LinkCtrl_IconActive\"}\r\n\t\t\telse {html += \" LinkCtrl_IconResting\"}\r\n\t\t}\r\n\t\tswitch(I.Size) {\r\n\t\t\tcase \"Big\": html += \" LinkCtrl_IconBig\"; break;\r\n\t\t\tcase \"Medium\": html += \" LinkCtrl_IconMedium\"; break;\r\n\t\t\tdefault: html += \" LinkCtrl_IconSmall\"; break;\r\n\t\t}\r\n\t\thtml += \"\\\"\";\r\n\t\tif(I.Title) {html += \" title=\\\"\" + I.Title + \"\\\"\"}\r\n\t\tif(I.Attributes) { //Custom attributes with values can be added\r\n\t\t\tI.Attributes.forEach(function(a) {\r\n\t\t\t\thtml += \" \" + a.Name + \"=\\\"\" + a.Value + \"\\\"\";\r\n\t\t\t});\r\n\t\t}\r\n\t\tlet position = \"\";\r\n\t\tswitch(I.Type) {\r\n\t\t\tcase \"Reset\": position = \"0px 0px\"; break;\r\n\t\t\tcase \"Setting\": position = \"-50px 0px\"; break;\r\n\t\t\tcase \"Zoom\": position = \"-100px 0px\"; break;\r\n\t\t\tcase \"Move\": position = \"-150px 0px\"; break;\r\n\t\t\tcase \"Delete\": position = \"-200px 0px\"; break;\r\n\t\t\tcase \"Edit\": position = \"0px -50px\"; break;\r\n\t\t\tcase \"Tag\": position = \"-50px -50px\"; break;\r\n\t\t\tcase \"Ok\": position = \"-100px -50px\"; break;\r\n\t\t\tcase \"Cancel\": position = \"-150px -50px\"; break;\r\n\t\t\tcase \"Back\": position = \"-200px -50px\"; break;\r\n\t\t\tcase \"Up\": position = \"0px -100px\"; break;\r\n\t\t\tcase \"Down\": position = \"-50px -100px\"; break;\r\n\t\t\tcase \"Bottom\": position = \"-100px -100px\"; break;\r\n\t\t\tcase \"Top\": position = \"-150px -100px\"; break;\r\n\t\t\tcase \"Load\": position = \"-200px -100px\"; break;\r\n\t\t\tcase \"Save\": position = \"0px -150px\"; break;\r\n\t\t\tcase \"ZoomOut\": position = \"-50px -150px\"; break;\r\n\t\t\tcase \"ZoomIn\": position = \"-100px -150px\"; break;\r\n\t\t\tcase \"New\": position = \"-150px -150px\"; break;\r\n\t\t\tcase \"Warning\": position = \"-200px -150px\"; break;\r\n\t\t\tcase \"Left\": position = \"0px -200px\"; break;\r\n\t\t\tcase \"Right\": position = \"-50px -200px\"; break;\r\n\t\t\tcase \"Last\": position = \"-100px -200px\"; break;\r\n\t\t\tcase \"First\": position = \"-150px -200px\"; break;\r\n\t\t\tdefault: position = \"-200px -200px\"; break; //Last slot is a blank icon\r\n\t\t}\r\n\t\tlet filter = \"\";\r\n\t\tswitch(I.Color) {\r\n\t\t\tcase \"Red\": filter = \" filter: sepia(100%) saturate(1500%)\"; break;\r\n\t\t\tcase \"Green\": filter = \" filter: sepia(100%) saturate(2000%) hue-rotate(100deg)\"; break;\r\n\t\t\tcase \"Yellow\": filter = \" filter: sepia(50%) hue-rotate(15deg) saturate(5000%)\"; break;\r\n\t\t\tdefault: break;\r\n\t\t}\r\n\t\thtml += \"style=\\\"background-position: \" + position + \";\" + filter + \"\\\"></span>\";\r\n\t\treturn html;\r\n\t}\r\n\t//Getter\r\n\tget Classes() { //Returns a text representing the classes to be added to the label hosting the control\r\n\t\treturn this.getClass();\r\n\t}\r\n\tget HasLabel() { //Whether a text has been provided as label\r\n\t\treturn (this.Label.length > 0); \r\n\t}\r\n\t//Methods\r\n\tgetClass(I) { //Returns a text representing the classes to be added to the label hosting the control. Can be provided options for proper control\r\n\t\tlet txt = \"\";\r\n\t\tif(this.Type == \"Checkbox\" && this.Value) {txt += \" LinkCtrl_Active\"} //For active checkbox\r\n\t\telse { //Normal case\r\n\t\t\tif(this.Disabled) {txt += \" LinkCtrl_Disabled\"}\r\n\t\t\telse {txt += \" LinkCtrl_Resting\"}\r\n\t\t}\r\n\t\tif(I && I.ForceMiddle) {return txt} //From here on, process the rounding effects based on the position of the control in the chain\r\n\t\tlet c = this.Chain;\r\n\t\tif(c) { //Chaining\r\n\t\t\tif(c.Index == 0 || c.NewLine) { //First element in the chain\r\n\t\t\t\tif(I === undefined || I.RightOnly === undefined) {txt += \" LinkCtrl_RoundL\"}\r\n\t\t\t}\r\n\t\t\telse {txt += \" LinkCtrl_Chain\"} //Note: currently, this css class is empty\r\n\t\t\tif(c.Last) { //Last element in the chain\r\n\t\t\t\tif(I && I.LeftOnly) {return txt}\r\n\t\t\t\telse {txt += \" LinkCtrl_RoundR\"}\r\n\t\t\t} \r\n\t\t}\r\n\t\telse { //No chaining, standalone control\r\n\t\t\tif(I && I.RightOnly) {txt += \" LinkCtrl_RoundR\"}\r\n\t\t\telse {\r\n\t\t\t\tif(I && I.LeftOnly) {txt += \" LinkCtrl_RoundL\"}\r\n\t\t\t\telse {txt += \" LinkCtrl_Round\"} //Default case\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn txt;\r\n\t}\r\n\tinit() { //Initialize the control on the page by appending the html in the ID container\r\n\t\tlet container = GetId(this.ID);\r\n\t\tif(container === null || container === undefined) { //Do nothing if the container does not exist\r\n\t\t\tconsole.warn(\"DOM element for LinkCtrl not found, init() method aborted\");\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tlet html = this.html();\r\n\t\tif(this.Chain && this.Chain.NewLine) {html = \"<br>\" + this.html()}\r\n\t\tif(this.Chain && this.Index > 0) {container.insertAdjacentHTML(\"beforeend\", html)} //Chaining, preserve previous content\r\n\t\telse {\r\n\t\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Preserve previous content\r\n\t\t\telse {container.innerHTML = html} //erase\r\n\t\t}\r\n\t\tthis.bindEvents();\r\n\t\treturn this; //For chaining, with .change() in particular\r\n\t}\r\n\tbindEvents() {console.warn(\"bindEvents function not defined for this control; no events attached\")} //Attach the events to the control. Specific to each control and added here only as default fallback\r\n\tsetValue(v) { //Set the value of the control, updating the html classes if possible\r\n\t\tvar me = GetId(this.Me);\r\n\t\tthis.updateValue(v, me);\r\n\t\treturn this;\r\n\t}\r\n\tgetValue() { //Return the value of the control. Identical to calling obj.Value, but added for consistency with the setValue() method\r\n\t\treturn this.Value;\r\n\t}\r\n\tsetDefault(v) { //Set the default value of the control, wihtout changing its value by itself\r\n\t\tthis.Default = v;\r\n\t\treturn this;\r\n\t}\r\n\tdefault() { //Set the value of the control to its defaults\r\n\t\treturn this.setValue(this.Default);\r\n\t}\r\n\tremove() { //Remove the element from the page\r\n\t\tvar me = GetId(this.Me);\r\n\t\tif(me === null) {return this} //Nothing to do if this control does not exist on the page\r\n\t\tme.remove(); //Delete the element\r\n\t\treturn this;\r\n\t}\r\n\tfocus() { //Set the focus to the element. This uses the native focus() of the browser and results may vary...\r\n\t\tvar me = GetId(this.Me);\r\n\t\tif(me) {me.focus()}\r\n\t\treturn this;\r\n\t}\r\n}","//***********************************************************\r\n// RESPTABLE object - Responsive Tables object representation\r\n//***********************************************************\r\nclass RespTable {\r\n\tconstructor(I) {\r\n\t\tthis.ID = I.ID; //ID of the html element containing the control\r\n\t\tthis.Array = (I.Array || []); //The array of array/object in use to populate the table, and that will be controlled internally\r\n\t\tthis.Multiple = (I.Multiple || false); //Whether multiple selection is allowed on this table or not. This will also enable unselection and possibly no selection at all\r\n\t\tthis.Headers = I.Headers; //An array of headers for the columns\r\n\t\tthis.Fields = I.Fields; //An array of fields, corresponding to attribute names to use from the objects within this Array. These will also be used as default headers if none were provided\r\n\t\tthis.RowNumbers = I.RowNumbers; //Whether the table has a first column for row numbering. If true, this index will be added and maintained internally\r\n\t\tthis.FullWidth = I.FullWidth; //Whether the table should occupy the full width of its parent container\r\n\t\tthis.MaxHeight = (I.MaxHeight || 250); //Maximum height (in px) of the table bloc\r\n\t\tthis.Delegate = I.Delegate; //An object used to delegate click events to a function (Format: {Function: function(event) {}, On: \"DIV\", Cancel: false}), Aplies on the node type provided. Cancel selection event if needed\r\n\t\tthis.onSelect = I.onSelect; //What to do after item selection. The function will receive the selected items, the previously selected items, as well as their indices; as arrays (empty array if nothing is selected)\r\n\t\tthis.onDelete = I.onDelete; // What to do on deletion. The function will receive the deleted item\r\n\t\tthis.onUpdate = I.onUpdate; //What to do after the table html has been updated. The function will receive an object {Action: \"\"} indicating the action leading to the update\r\n\t\tthis.Preserve = I.Preserve; //Keep previous content in the hosting ID or not\r\n\t\tthis.NoControls = I.NoControls; //If true, the table should not show its control at the top\r\n\t\tthis.Me = this.ID + \"_RespTable\"; //ID of the html table\r\n\t\treturn this;\r\n\t}\r\n\t//Getter\r\n\tget Length() { //Return the current number of data rows\r\n\t\treturn this.Array.length;\r\n\t}\r\n\tget SelectedIndices() { //Return an array containing the indices of the selected elements\r\n\t\tlet indices = [];\r\n\t\tthis.Array.forEach(function(r, i) {\r\n\t\t\tif(r.Selected) {indices.push(i)}\r\n\t\t});\r\n\t\treturn indices;\r\n\t}\r\n\tget Selected() { //Return an array containing the objects (elements within Array) at the selected indices\r\n\t\treturn this.Array.filter(function(a) {return a.Selected});\r\n\t}\r\n\t//Methods\r\n\tinit() { //Initialize the table\r\n\t\tlet container = GetId(this.ID);\r\n\t\tif(container === null || container === undefined) {return this} //Check\r\n\t\tlet html = \"<div\";\r\n\t\tif(this.MaxHeight > 0) {html += \" style=\\\"max-height: \" + this.MaxHeight + \"px; overflow: auto\\\"\"}\r\n\t\thtml += \"><table id=\\\"\" + this.Me + \"\\\" class=\\\"RespTable\\\"\";\r\n\t\tif(this.FullWidth) {html += \" style=\\\"width: 100%\\\"\"}\r\n\t\thtml += \">\";\r\n\t\thtml += this.html(); //The html of the table\r\n\t\thtml += \"</table></div>\";\r\n\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Append to prior contents\r\n\t\telse {container.innerHTML = html} //Erase previous contents\r\n\t\tthis.bindEvents(); //Attach the selection event\r\n\t\tif(!this.NoControls) { //Show controls for the table\r\n\t\t\tlet bar = LinkCtrl.buttonBar([ //To manipulate the inputs\r\n\t\t\t\t{Label: \"\", Title: \"Remove all items\", Icon: {Type: \"Reset\"}, Click: function() {this.confirmForm(\"RESET\", this.empty.bind(this))}.bind(this)},\r\n\t\t\t\t{Label: \"\", Title: \"Remove selected item\", Icon: {Type: \"Delete\"}, Click: function() {this.confirmForm(\"DELETE\", this.removeRows.bind(this), this.SelectedIndices)}.bind(this)},\r\n\t\t\t\t{Label: \"\", Title: \"Move selected item up\", Icon: {Type: \"Up\"}, Click: function() {this.up()}.bind(this)},\r\n\t\t\t\t{Label: \"\", Title: \"Move selected item down\", Icon: {Type: \"Down\"}, Click: function() {this.down()}.bind(this)},\r\n\t\t\t\t{Label: \"\", Title: \"Move selected item to the top\", Icon: {Type: \"Top\"}, Click: function() {this.top()}.bind(this)},\r\n\t\t\t\t{Label: \"\", Title: \"Move selected item to the bottom\", Icon: {Type: \"Bottom\"}, Click: function() {this.bottom()}.bind(this)},\r\n\t\t\t]);\r\n\t\t\tcontainer.prepend(bar); //Buttons to control the input table\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tbindEvents() { //Attach events to the table\r\n\t\tGetId(this.Me).addEventListener(\"click\", function(e) {\r\n\t\t\tlet OldSelection = this.Selected; //Selected elements at the moment of the click\r\n\t\t\tlet OldIndices = this.SelectedIndices;\r\n\t\t\tlet target = e.target;\r\n\t\t\tif(this.Delegate) {\r\n\t\t\t\tif(target.nodeName == this.Delegate.On) {this.Delegate.Function(e)}\r\n\t\t\t\tif(this.Delegate.Cancel) {return} //Prevent downstream execution of row selection\r\n\t\t\t}\r\n\t\t\tif(target.nodeName == \"TH\") {return}\r\n\t\t\tif(target.nodeName == \"TD\") {var index = target.parentElement.rowIndex - 1}\r\n\t\t\telse {var index = target.parentElement.parentElement.rowIndex - 1} //It is assumed here that climbing back only one level is sufficient to reach the td\r\n\t\t\tif(this.Multiple) {this.Array[index].Selected = !this.Array[index].Selected}\r\n\t\t\telse {\r\n\t\t\t\tthis.Array.forEach(function(r, i) {\r\n\t\t\t\t\tif(i == index) {r.Selected = true}\r\n\t\t\t\t\telse {r.Selected = false}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.update({Action: \"Select\"});\r\n\t\t\tif(this.onSelect) {this.onSelect(this.Selected, OldSelection, this.SelectedIndices, OldIndices)}\r\n\t\t}.bind(this));\r\n\t}\r\n\thtml() { //Create the html of the table using the internal Array as data source\r\n\t\tlet html = this.headers(); //Prepare the headers\r\n\t\tif(this.Array === undefined) {return html}\r\n\t\tthis.Array.forEach(function(O, i) { //Loop the internal array to create the rows\r\n\t\t\thtml += \"<tr class=\\\"RespTable_Row\"; //Each row will have a selectable behavior through this class\r\n\t\t\tif(O.Selected) { //If the option is provided, chech within the array and add the selected class as required\r\n\t\t\t\thtml += \" RespTable_Selected\";\r\n\t\t\t}\r\n\t\t\tif(O.Status && O.Status == \"Error\") {html += \" RespTable_Error\"}\r\n\t\t\thtml += \"\\\">\";\r\n\t\t\tif(this.RowNumbers) {html += \"<td>\" + (i + 1) + \"</td>\"}\r\n\t\t\tlet row = this.extractData(O); //Extract data from the object\r\n\t\t\trow.forEach(function(cell) { //Add the content for each cell\r\n\t\t\t\thtml += \"<td>\" + cell + \"</td>\";\r\n\t\t\t});\r\n\t\t\thtml += \"</tr>\";\r\n\t\t}, this);\r\n\t\treturn html;\r\n\t}\r\n\theaders() { //Prepare the headers for the array\r\n\t\tif(this.Headers) {var headers = this.Headers} //Headers were directly provided\r\n\t\telse {\r\n\t\t\tif(this.Fields) {var headers = this.Fields} //Headers are fields from object\r\n\t\t\telse {return \"\"} //No headers available, leave\r\n\t\t}\r\n\t\tvar html = \"<tr>\"; //Start a header row\r\n\t\tif(this.RowNumbers) {html += \"<th>#</th>\"}\r\n\t\theaders.forEach(function(h) { //Add the provided headers\r\n\t\t\thtml += \"<th>\" + h + \"</th>\";\r\n\t\t});\r\n\t\thtml += \"</tr>\";\r\n\t\treturn html;\r\n\t}\r\n\textractData(O) { //Extract the desired data from the input object and return them as a readable array\r\n\t\tif(this.Fields) { //In this case, an object is expected, so lookup for the attribute name supplied and returns the value\r\n\t\t\tvar out = [];\r\n\t\t\tvar keys = Object.keys(O);\r\n\t\t\tvar values = Object.values(O);\r\n\t\t\tthis.Fields.forEach(function(f) {\r\n\t\t\t\tlet index = keys.findIndex(function(k) {return(k == f)});\r\n\t\t\t\tlet val = values[index];\r\n\t\t\t\tif(index > -1) {\r\n\t\t\t\t\tif(f == \"Color\" || f == \"color\") {out.push(\"<span style=\\\"background-color: \" + val + \"; border: 1px solid black\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\")} //Colors get special treatment\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif(typeof(val) == \"boolean\") { //Booleans are outputed with a symbol\r\n\t\t\t\t\t\t\tif(val) {out.push(\"<span style=\\\"color: darkgreen; font-weight: bold;\\\">&check;</span>\")}\r\n\t\t\t\t\t\t\telse {out.push(\"<span style=\\\"color: tomato; font-weight: bold;\\\">&cross;</span>\")}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {out.push(val)}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {out.push(\"\")} //Ensure correct ordering in case the field is not found\r\n\t\t\t});\r\n\t\t\treturn out;\r\n\t\t}\r\n\t\telse {return O} //In this case, an array is expected so it can be returned as is\r\n\t}\r\n\tupdate(I) { //Update the html table\r\n\t\tlet table = GetId(this.Me);\r\n\t\tif(table === null || table === undefined) {return this} //Check\r\n\t\ttable.innerHTML = this.html(); //Replace html\r\n\t\tif(this.onUpdate) (this.onUpdate(I));\r\n\t\treturn this;\r\n\t}\r\n\taddRow(O) { //Add a row to the table with a new cell per element in array\r\n\t\tthis.Array.push(O); //Update internal array\r\n\t\tthis.update({Action: \"Add Row\"}); //Update the table\r\n\t\treturn O;\r\n\t}\r\n\tremoveRows(rows) { //Remove the rows with indices given in the provided array rows\r\n\t\tlet l = rows.length;\r\n\t\tif(l == 0) {return this} //No items\r\n\t\tlet newArray = this.Array.filter(function(a, i) { //Filter the array for elements with indices not matching the ones provided\r\n\t\t\tlet found = rows.includes(i); //Will return true if the index was found\r\n\t\t\tif(found) { //apply the onDelete function on the element\r\n\t\t\t\tif(this.onDelete) {this.onDelete(a)}\r\n\t\t\t}\r\n\t\t\treturn !found; //Return false to filter out the element\r\n\t\t}, this);\r\n\t\tthis.Array = newArray; //Update internal array\r\n\t\tthis.update({Action: \"Remove Row\"}); //Update the table\r\n\t\treturn this;\r\n\t}\r\n\tup() { //Move selected row up. Will do nothing if multiple rows are selected\r\n\t\tlet l = this.SelectedIndices.length;\r\n\t\tif(l == 0 || l > 1) {return this}\r\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move up\r\n\t\tif(s == 0) {return this} //There is nothing to do if this row is already at the top\r\n\t\tlet temp = this.Array[s-1]; //Keep a copy of the element above\r\n\t\tthis.Array[s-1] = this.Array[s]; //Replace the element above by new row\r\n\t\tthis.Array[s] = temp; //Replace the element by row above\r\n\t\tthis.update({Action: \"Up\"});\r\n\t\treturn this;\r\n\t}\r\n\tdown() { //Move selected row down. Will do nothing if multiple rows are selected\r\n\t\tlet l = this.SelectedIndices.length;\r\n\t\tif(l == 0 || l > 1) {return this}\r\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move down);\r\n\t\tif(s == (this.Length - 1)) {return this} //There is nothing to do if this row is already at the bottom\r\n\t\tlet temp = this.Array[s+1]; //Keep a copy of the element above\r\n\t\tthis.Array[s+1] = this.Array[s]; //Replace the element above by new row\r\n\t\tthis.Array[s] = temp; //Replace the element by row above\r\n\t\tthis.update({Action: \"Down\"});\r\n\t\treturn this;\r\n\t}\r\n\ttop() { //Move selected row to the top\r\n\t\tlet l = this.SelectedIndices.length;\r\n\t\tif(l == 0 || l > 1) {return this}\r\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move\r\n\t\tif(s == 0) {return this} //There is nothing to do if this row is already at the top\r\n\t\tlet temp = this.Array.splice(s, 1);\r\n\t\tthis.Array.unshift(temp[0]);\r\n\t\tthis.update({Action: \"Top\"});\r\n\t}\r\n\tbottom() { //Move selected row to the bottom\r\n\t\tlet l = this.SelectedIndices.length;\r\n\t\tif(l == 0 || l > 1) {return this}\r\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move\r\n\t\tif(s == (this.Length - 1)) {return this} //There is nothing to do if this row is already at the bottom\r\n\t\tlet temp = this.Array.splice(s, 1);\r\n\t\tthis.Array.push(temp[0]);\r\n\t\tthis.update({Action: \"Bottom\"});\r\n\t}\r\n\tempty() { //Empty the table\r\n\t\tif(this.onDelete) {\r\n\t\t\tthis.Array.forEach(function(a) {this.onDelete(a)}, this);\r\n\t\t}\r\n\t\tthis.Array = [];\r\n\t\tthis.update({Action: \"Empty\"});\r\n\t\treturn this;\r\n\t}\r\n\tsetValue(v) { //Set the selection of the table to the given array of index\r\n\t\tthis.Array.forEach(function(a, i) {\r\n\t\t\tlet found = v.includes(i); //Will return true if the index was found\r\n\t\t\tif(found) {a.Selected = true}\r\n\t\t\telse {a.Selected = false}\r\n\t\t});\r\n\t\tthis.update({Action: \"Set Value\"});\r\n\t\treturn this;\r\n\t}\r\n\tselectAll() { //Select all the rows\r\n\t\tthis.Array.forEach(function(a) {a.Selected = true});\r\n\t\tthis.update({Action: \"Set Value\"}); //Note that the action is considered a set Value here\r\n\t}\r\n\thideControls() { //Hide the control bar\r\n\t\tGetId(this.ID).firstChild.style.display = \"none\";\r\n\t\treturn this;\r\n\t}\r\n\tshowControls() { //Show the control bar\r\n\t\tGetId(this.ID).firstChild.style.display = \"block\";\r\n\t\treturn this;\r\n\t}\r\n\thasElement(field, value) { //Check if an element with its field matching value is present in the table\r\n\t\tvar found = false;\r\n\t\tvar a = this.Array;\r\n\t\tvar l = a.length;\r\n\t\tvar i = 0;\r\n\t\twhile(!found && i < l) {\r\n\t\t\tvar index = Object.keys(a[i]).findIndex(function(k) {return k == field});\r\n\t\t\tif(index > -1) {found = (Object.values(a[i])[index] == value)}\r\n\t\t\ti++;\r\n\t\t}\r\n\t\treturn found;\r\n\t}\r\n\tconfirmForm(action, next, arg) { //Open a form for confirmation of deletion action (RESET or DELETE). If approved, the function next will be called with arg as argument\r\n\t\tif (this.Length == 0) {return this}\r\n\t\tlet id = this.ID + \"_Form\";\r\n\t\tlet txt = \"The selected row(s) will be deleted.\";\r\n\t\tif(action == \"RESET\") {txt = \"This will remove all rows from this table.\"}\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<div style=\\\"text-align: center\\\"><p style=\\\"color: red;\\\">\" + txt + \"</p><p>Are you sure you want to continue?</p></div>\",\r\n\t\t\tTitle: \"Confirm deletion\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{\r\n\t\t\t\t\tLabel: \"Ok\",\r\n\t\t\t\t\tClick: function() {\r\n\t\t\t\t\t\tnext(arg);\r\n\t\t\t\t\t\tForm.close(id);\r\n\t\t\t\t\t}.bind(this),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tLabel: \"Cancel\",\r\n\t\t\t\t\tClick: function() {Form.close(id)}\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n}","//***************************************************************\r\n// TABCONTROL object - One or multiple tabs, with control options\r\n//***************************************************************\r\nclass TabControl { \r\n\tconstructor(I) { //ID and array of Tabs objects to be passed to the constructor in input\r\n\t\tthis.ID = I.ID; //Container for the tabs\r\n\t\tthis.Tabs = []; //An array of TabPanel objects\r\n\t\tthis.LastKey = 0; //Tracker to give a unique key to each TabPanel objects\r\n\t\tthis.Preserve = (I.Preserve || false); //Whether previous content in the ID container should be preserved or erased. Default is to erase previous content\r\n\t\tthis.AutoInit = (I.AutoInit || false); //Will fall as false unless explicitely defined as true\r\n\t\tthis.Multiple = (I.Multiple || false); //This allows opening of multiple panels. Only available for Menu Layout. Default is only one panel open at a time\r\n\t\tthis.Disabled = (I.Disabled || false); //Whether the navigation should be disabled for this tab\r\n\t\tthis.Stack = I.Stack; //Whether tab contents should stack on top of each other, instead of being left-floating\r\n\t\tthis.Layout = (I.Layout || \"Horizontal\"); //Layout of the tab. Horizontal is the default, were headers and contents are stacked horizontally one after another. Menu allows an 'accordion menu'-like layout, whith a header and the content directly following, altogether stacked vertically. Vertical allows the headers to be stacked in a column, followed by the contents\r\n\t\tthis.AfterDelete = (I.AfterDelete || function(i) {}); //Additional actions to be taken after deletion of a tab. The function receives the index of the deleted tab as argument\r\n\t\tif(I.Tabs) {\r\n\t\t\tI.Tabs.forEach(function(t, i) { //Create the TabPanel Object using user input\r\n\t\t\t\tt.Key = i;\r\n\t\t\t\tt.Parent = this;\r\n\t\t\t\tif(this.Disabled) {t.Disabled = true}\r\n\t\t\t\tthis.Tabs.push(new TabPanel(t));\r\n\t\t\t\tthis.LastKey++;\r\n\t\t\t}, this);\r\n\t\t}\r\n\t\tif(this.AutoInit) {this.init()} //Append the buttons on the page directly on construction\r\n\t\treturn this; //For chaining\r\n\t}\r\n\t//Methods\r\n\tgetTabIndex(key) { //Returns the index of the TabPanel object having its property Key equal to the argument provided\r\n\t\tvar l = this.Tabs.length;\r\n\t\tfor(let i=0;i<l;i++) { //Loop the tabs\r\n\t\t\tif(this.Tabs[i].Key == key) {return i}\r\n\t\t}\r\n\t\treturn -1; //Fallback if nothing is found\r\n\t}\r\n\tindexForLabel(label) { //Returns the index of the TabPanel object having its property Label equal to the argument provided\r\n\t\tvar l = this.Tabs.length;\r\n\t\tfor(let i=0;i<l;i++) { //Loop the tabs\r\n\t\t\tif(this.Tabs[i].Label == label) {return i}\r\n\t\t}\r\n\t\treturn -1; //Fallback if nothing is found\r\n\t}\r\n\tdisable() { //Set the TabControl in disabled state and update the TabPanels accordingly\r\n\t\tthis.Disabled = true;\r\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Disabled\")});\r\n\t\treturn this;\r\n\t}\r\n\tenable() { //Set the TabControl in enabled state and update the TabPanels accordingly\r\n\t\tthis.Disabled = false;\r\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Enabled\")});\r\n\t\treturn this;\r\n\t}\r\n\tactive() { //Returns the index of the active tab\r\n\t\tif(this.Multiple) { //In this case, returns an array of active elements\r\n\t\t\tvar array = [];\r\n\t\t\tthis.Tabs.forEach(function(t, i) {\r\n\t\t\t\tif(t.Active) {array.push(i)}\r\n\t\t\t});\r\n\t\t\treturn array;\r\n\t\t}\r\n\t\telse { //Only one active tab at a time, returns the index of the winner\r\n\t\t\tvar l = this.Tabs.length;\r\n\t\t\tfor(let i=0;i<l;i++) { //Loop the tabs\r\n\t\t\t\tif(this.Tabs[i].Active) {return i}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinit() { //Initialize the html for the tabs in the ID container\r\n\t\tif(this.Tabs.length == 0) {return this} //Nothing there, end of the story...\r\n\t\tvar container = GetId(this.ID);\r\n\t\tif(container === null || container === undefined) {return this} //Do nothing if the container does not exist\r\n\t\tif(!container.classList.contains(\"LinkCtrl_Tab\")) {container.classList.add(\"LinkCtrl_Tab\")}; //Add classes for the tab\r\n\t\tif(!container.classList.contains(\"LinkCtrl_Round\")) {container.classList.add(\"LinkCtrl_Round\")};\r\n\t\tvar html = \"\";\r\n\t\tswitch(this.Layout) {\r\n\t\t\tcase \"Horizontal\": //In this case, the headers are prepared first horizontally, followed by the contents\r\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\">\"; //Wrapper div for the headers\r\n\t\t\t\tthis.Tabs.forEach(function(t, i) {\r\n\t\t\t\t\thtml += t.initHeader();\r\n\t\t\t\t});\r\n\t\t\t\thtml += \"</div>\"; //End of Header wrapper\r\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\"; //Wrapper div for the contents\r\n\t\t\t\tthis.Tabs.forEach(function(t) { //Add the contents\r\n\t\t\t\t\thtml += t.initContent();\r\n\t\t\t\t}); \r\n\t\t\t\thtml += \"</div>\"; //End of Content wrapper\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Menu\": //In this case, contents are displayed directly below the active headers, on top of each others\r\n\t\t\t\tthis.Tabs.forEach(function(t) {\r\n\t\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\">\" + t.initHeader() + \"</div>\";\r\n\t\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\" + t.initContent() + \"</div>\";\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Vertical\": //In this case, headers are displayed in a column, then contents are adjacent and also in a column\r\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\" style=\\\"float: left;\\\">\"; //Wrapper div for the headers\r\n\t\t\t\tthis.Tabs.forEach(function(t, i) {\r\n\t\t\t\t\thtml += t.initHeader() + \"<br>\";\r\n\t\t\t\t});\r\n\t\t\t\thtml += \"</div>\"; //End of Header wrapper\r\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\"; //Wrapper div for the contents\r\n\t\t\t\tthis.Tabs.forEach(function(t) { //Add the contents\r\n\t\t\t\t\thtml += t.initContent();\r\n\t\t\t\t}); \r\n\t\t\t\thtml += \"</div>\"; //End of Content wrapper\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: return this; //Exit here if an unknown layout is requested\r\n\t\t}\r\n\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Preserve previous content\r\n\t\telse {container.innerHTML = html} //Erase previous content\r\n\t\tthis.bindEvents(); //Attach the events to the tab headers\r\n\t\treturn this;\r\n\t}\r\n\tbindEvents(index) { //Bind the events to the Tabs, or only the tab with the index provided\r\n\t\tlet me = GetId(this.ID);\r\n\t\tif(me === null || me === undefined) {return} //Do nothing if the container does not exist\r\n\t\tlet source = this.Tabs;\r\n\t\tif(index) {source = [this.Tabs[index]]} //If the index is provided\r\n\t\tsource.forEach(function(t, i) { //For each tab, bind the events\r\n\t\t\tlet header = GetId(t.Anchors.Header);\r\n\t\t\theader.addEventListener(\"click\", this.click.bind(this)); //Need to bind the object otherwise this refers to the header in the callback\r\n\t\t}, this);\r\n\t\treturn this;\r\n\t}\r\n\tclick(e) { //Action to be taken when click event occurs in a tab header section\r\n\t\tlet t = e.target;\r\n\t\tlet key = Number(t.getAttribute(\"tabKey\")); //The unique Key of the TabPanel\r\n\t\tlet index = this.getTabIndex(key);\r\n\t\tif(t.hasAttribute(\"tabaction\")) { //Click was on a control\r\n\t\t\tswitch(t.getAttribute(\"tabAction\")) {\r\n\t\t\t\tcase \"Setting\": break;\r\n\t\t\t\tcase \"Edit\": break;\r\n\t\t\t\tcase \"Move\": break;\r\n\t\t\t\tcase \"Delete\": this.deleteConfirm(index); break;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse { //Click was on the tab\r\n\t\t\tif(t.classList.contains(\"LinkCtrl_Active\")) { //The tab is active\r\n\t\t\t\t//if(this.Multiple && this.Layout == \"Menu\") {this.Tabs[index].set(\"Resting\")} //In this case, it is fine to hide any items\r\n\t\t\t\tif(this.Multiple) {this.Tabs[index].set(\"Resting\")} //In this case, it is fine to hide any items\r\n\t\t\t\telse {this.Tabs[index].fold()} //Fold or unfold the content, one tab should always be active\r\n\t\t\t} \r\n\t\t\telse {\r\n\t\t\t\tif(t.classList.contains(\"LinkCtrl_Disabled\")) {return} //Nothing to do in case the tab is disabled\r\n\t\t\t\tthis.jumpTo(index); //Default action\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tjumpTo(index) { //Jump to the tab with the provided index\r\n\t\tthis.Tabs[index].set(\"Active\");\r\n\t\tif(!this.Multiple) { //Only one tab active, need to deactivate previously activated tab\r\n\t\t\tthis.Tabs.forEach(function(t, i) { //Loop the tabs\r\n\t\t\t\tif(t.Active && i != index) {t.set(\"Resting\")} //This tab needs to be deactivated\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tsetOpen(array) { //Set open the tabs with their index in the array provided, close the others. Only for tabs with Multiple enabled!\r\n\t\tif(this.Multiple) {\r\n\t\t\tthis.Tabs.forEach(function(t, i) {\r\n\t\t\t\tif(array.includes(i)) {t.set(\"Active\")}\r\n\t\t\t\telse {t.set(\"Resting\")}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tcloseAll() { //Close all the tabs\r\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Resting\")});\r\n\t\treturn this;\r\n\t}\r\n\topenAll() { //Open all the tabs\r\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Active\")});\r\n\t\treturn this;\r\n\t}\r\n\taddTabs(array) { //Append new tabs provided as an array\r\n\t\tarray.forEach(function(a) {this.addTab(a)}, this);\r\n\t\treturn this;\r\n\t}\r\n\taddTab(I) { //Create a new tab using the properties passed as an object in input\r\n\t\tif(I === undefined) {return this} //Nothing provided\r\n\t\tI.Key = this.LastKey; //\r\n\t\tI.Parent = this; \t  //Add or rewrite essential properties for the new tab\r\n\t\tI.Active = false;\t  //\r\n\t\tif(this.Disabled) {I.Disabled = true}\r\n\t\tthis.Tabs.push(new TabPanel(I)); //Create the new tab\r\n\t\tlet l = this.Tabs.length - 1; //Last element added is sure to be at this location in the Tabs array\r\n\t\tif(this.LastKey == 0) {this.init()} //If this is the first tab, initialize the tab\r\n\t\telse {this.addTabHTML(l)} //Add the html for the new tab. This will succeed only if the containers are available\r\n\t\tif(I.SetActive) {this.jumpTo(l)}\r\n\t\tthis.LastKey++; //Neutralize previous key to guarantee unicity\r\n\t\treturn this.Tabs[l+1]; //Return the newly created tab\r\n\t}\r\n\taddTabHTML(index) { //Internal use. Create the HTML for the tab of the desired index, if the containers exist. The html is simply appended at the end\r\n\t\tvar me = GetId(this.ID);\r\n\t\tif(me === null || me === undefined) {return} //Do nothing if the container does not exist\r\n\t\tif(!me.classList.contains(\"LinkCtrl_Tab\")) {return} //The container exist but has not yet been initialized as a tab\r\n\t\tvar tab = this.Tabs[index];\r\n\t\tswitch(this.Layout) {\r\n\t\t\tcase \"Menu\":\r\n\t\t\t\tme.insertAdjacentHTML(\"beforeend\", \r\n\t\t\t\t\t\"<div class=\\\"LinkCtrl_TabHeaders\\\">\" + tab.initHeader() + \"</div>\" +\r\n\t\t\t\t\t\"<div class=\\\"LinkCtrl_TabContents\\\">\" + tab.initContent() + \"</div>\"\r\n\t\t\t\t);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Horizontal\": //Append the html at the end of each container\r\n\t\t\t\tme.children[0].insertAdjacentHTML(\"beforeend\", tab.initHeader());\r\n\t\t\t\tme.children[1].insertAdjacentHTML(\"beforeend\", tab.initContent());\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Vertical\": //Append the html at the end of each container, with a new line on the headers to get vertical piling\r\n\t\t\t\tme.children[0].insertAdjacentHTML(\"beforeend\", tab.initHeader() + \"<br>\");\r\n\t\t\t\tme.children[1].insertAdjacentHTML(\"beforeend\", tab.initContent());\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: return;\r\n\t\t}\r\n\t\tme.style.display = \"block\"; //Make the tab visible again (in case it was hidden following deletion of the only tab left)\r\n\t\tthis.bindEvents(index); //Don't bind the events multiple times! Only the new tab should have events binded\r\n\t\treturn this;\r\n\t}\r\n\tdeleteConfirm(index) { //Confirmation of tab deletion\r\n\t\tvar ui = this; //Shortcut inside the function\r\n\t\tvar id = \"Form_DeleteTab\";\r\n\t\tForm.open({\r\n\t\t\tID: id,\r\n\t\t\tHTML: \"<div style=\\\"text-align: center\\\"><p style=\\\"color: red;\\\">This will delete the tab and all its contents.</p><p>Are you sure you want to continue?</p></div>\",\r\n\t\t\tTitle: \"Confirm deletion\",\r\n\t\t\tButtons: [\r\n\t\t\t\t{Label: \"Ok\", Click: function() {\r\n\t\t\t\t\tui.deleteTab(index);\r\n\t\t\t\t\tui.AfterDelete(index);\r\n\t\t\t\t\tForm.close(id);\r\n\t\t\t\t}},\r\n\t\t\t\t{Label: \"Cancel\", Click: function() {Form.close(id)} }\r\n\t\t\t],\r\n\t\t\tSize: 500,\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\tdeleteTab(index) { //Tab deletion\r\n\t\tvar tabs = this.Tabs;\r\n\t\tvar l = tabs.length;\r\n\t\tif(tabs[index] === undefined) {return this} //Stop there if the tab at this index does not exist\r\n\t\tif(!this.Multiple && tabs[index].Active) { //In case this was the active tabs and the tabControl is not set on multiple\r\n\t\t\tif(index == 0 && l > 1) {this.jumpTo(1)} //Go to the next one if this was the first and something follows\r\n\t\t\tif(index > 0) {this.jumpTo(index - 1)} //Otherwise, go to the previous one if possible\r\n\t\t}\r\n\t\ttabs[index].delete(); //Delete the HTML\r\n\t\ttabs.splice(index, 1); //Delete the object\r\n\t\tif(tabs.length == 0) { //If no tabs are left\r\n\t\t\tvar me = GetId(this.ID);\r\n\t\t\tif(me !== null || me !== undefined) {me.style.display = \"none\"} //Hide the remaining HTML for the ControlTab, if it exists\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\trename(index, name) { //Rename tab index with new name\r\n\t\tthis.Tabs[index].rename(name);\r\n\t\treturn this;\r\n\t}\r\n}","//**************************************************************************\r\n// TABPANEL object - A tab object used and controlled by a TabControl object\r\n//**************************************************************************\r\nclass TabPanel {\r\n\tconstructor(I) {\r\n\t\tthis.Key = I.Key; //Unique index for the. Note that this is NOT the index in the parent array\r\n\t\tthis.Parent = I.Parent; //The parent TabControl object\r\n\t\tthis.Label = (I.Label || \"\"); //Label displayed by the header\r\n\t\tthis.Active = (I.Active || false); //Whether this panel is active\r\n\t\tthis.Disabled = (I.Disabled || false); //Whether this panel is disabled\r\n\t\tthis.Controls = (I.Controls || []); //Controls available for this panel. Possible values are [\"Form\", \"Edit\", \"Move\", \"Delete\"], in whatever order\r\n\t\tthis.Content = I.Content; //Content to be displayed inside the tab while active. It should be provided as an object with Type and Value properties\r\n\t\tvar root = this.Parent.ID;\r\n\t\tthis.Anchors = {\r\n\t\t\tHeader: root + \"_TabHeader_\" + this.Key,\r\n\t\t\tContent: root + \"_TabContent_\" + this.Key,\r\n\t\t}\r\n\t\tthis.initContentInternal(); //Initialize the contents. This is in case DOM needs to be copied before being destroyed by autoInit of the parent\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\tclassHeader() { //Return a string for the classes that should be applied to the header, given current panel properties\r\n\t\tvar classes = \"LinkCtrl LinkCtrl_RoundT\";\r\n\t\tif(this.Active) {classes += \" LinkCtrl_Active\"} //Active class has priority over the rest\r\n\t\telse {\r\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_Disabled\"}\r\n\t\t\telse {classes += \" LinkCtrl_Resting\"}\r\n\t\t}\r\n\t\treturn classes;\r\n\t}\r\n\t/*classControl() { //Return a string for the classes that should be applied to the control of this header, given current panel properties\r\n\t\tvar classes = \"LinkCtrl_Icon\";\r\n\t\tif(this.Active) {classes += \" LinkCtrl_IconActive\"} //Active class has priority over the rest\r\n\t\telse {\r\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_IconDisabled\"}\r\n\t\t\telse {classes += \" LinkCtrl_IconResting\"}\r\n\t\t}\r\n\t\treturn classes;\r\n\t}*/\r\n\tinitHeader() { //Returns the html for this tab header\r\n\t\tvar html = \"<span \";\r\n\t\thtml += \"id=\\\"\" + this.Anchors.Header + \"\\\" \";\r\n\t\thtml += \"class=\\\"\" + this.classHeader() + \"\\\" \";\r\n\t\thtml += \"tabKey=\\\"\" + this.Key + \"\\\" style=\\\"font-size: 1em; white-space: pre\\\">\" + this.Label;\r\n\t\tif(this.Controls.length > 0) {html += this.appendControls()} //Add the controls if they are desired\r\n\t\thtml += \"</span> \"; //Single whitespace between each header (in case another one follows)\r\n\t\treturn html;\r\n\t}\r\n\tappendControls() { //Prepare the html of the controls usable to edit this tab\r\n\t\tlet html = \"\";\r\n\t\tthis.Controls.forEach(function(c) {\r\n\t\t\tlet o = {Type: c, Active: this.Active, Space: true, Attributes:[{Name: \"tabKey\", Value: this.Key}, {Name: \"tabAction\", Value: c}]};\r\n\t\t\tif(!this.Disabled) {\r\n\t\t\t\tswitch(c) {\r\n\t\t\t\t\tcase \"Setting\": o.Title = \"Click here to see the settings for this tab\"; break;\r\n\t\t\t\t\tcase \"Edit\": o.Title = \"Click here to edit the tab\"; break;\r\n\t\t\t\t\tcase \"Move\": o.Title = \"Click here to move this tab at the desired position\"; break;\r\n\t\t\t\t\tcase \"Delete\": o.Title = \"Click here to delete this tab\"; break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\thtml += LinkCtrl.icon(o);\r\n\t\t\t/*let control = \"<span class=\\\"\" + this.classControl() + \"\\\" tabKey=\\\"\" + this.Key + \"\\\"\";\r\n\t\t\tlet icon = \"\";\r\n\t\t\tlet title = \"\";\r\n\t\t\tswitch(c) {\r\n\t\t\t\tcase \"Setting\": \r\n\t\t\t\t\ticon = \"tabAction=\\\"setting\\\" style=\\\"background-position: \" + LinkCtrl.icon(\"Setting\") + \"\\\"\"; //ui-icon-gear\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to see the settings for this tab\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Edit\":\r\n\t\t\t\t\ticon = \"tabAction=\\\"edit\\\" style=\\\"background-position: \" + LinkCtrl.icon(\"Edit\") + \"\\\"\"; //ui-icon-pencil\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to edit the tab\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Move\":\r\n\t\t\t\t\ticon = \"tabAction=\\\"move\\\" style=\\\"background-position: \" + LinkCtrl.icon(\"Move\") + \"\\\"\"; //ui-icon-arrow-4\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to move this tab at the desired position\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Delete\":\r\n\t\t\t\t\ticon = \" tabAction=\\\"delete\\\" style=\\\"background-position: \" + LinkCtrl.icon(\"Delete\") + \"\\\"\"; //ui-icon-trash\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to delete this tab\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t\thtml += control + icon;\r\n\t\t\tif(!this.Disabled) {html += title}\r\n\t\t\thtml += \"></span>\";*/\r\n\t\t}, this);\r\n\t\treturn html;\r\n\t}\r\n\tinitContent() { //Return the html for the contents of this tab\r\n\t\tlet html = \"\";\r\n\t\tlet style = \"none\"; //Hide content of inactive tabs\r\n\t\tif(this.Active) {style = \"block\"}\r\n\t\tif(!this.Parent.Stack) {style += \"; float: left\"}\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Content + \"\\\" class=\\\"LinkCtrl_TabPanel\\\" style=\\\"display: \" + style + \"\\\">\";\r\n\t\thtml += this.initContentInternal();\r\n\t\thtml += \"</div>\";\r\n\t\treturn html;\r\n\t}\r\n\tinitContentInternal() {\r\n\t\tlet c = this.Content;\r\n\t\tif(c === undefined) {return \"\"}\r\n\t\tswitch(c.Type) {\r\n\t\t\tcase \"HTML\": return c.Value; //The content is plain HTML\r\n\t\t\tcase \"DOM\": //The content is written in the DOM, at the provided ID\r\n\t\t\t\tif(c.Value) { //If the ID exists\r\n\t\t\t\t\tlet dom = GetId(c.Value); //Get the DOM element\r\n\t\t\t\t\tif(dom !== null && dom !== undefined) { //If this indeed exists\r\n\t\t\t\t\t\tlet html = dom.innerHTML; //copy the content\r\n\t\t\t\t\t\tthis.Content = {Type: \"HTML\", Value: html} //Update the tab object with its new content\r\n\t\t\t\t\t\tdom.remove(); //Bye bye\r\n\t\t\t\t\t\treturn html; //Output the content\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn \"\"; //Nothing was found at the given location\r\n\t\t\tdefault: return \"\"; //Unknown Type requested\r\n\t\t}\r\n\t}\r\n\tupdateState() { //Update the state of this tab, based on current properties. This only fully updates the header, content will just be made visible or hidden\r\n\t\tvar header = GetId(this.Anchors.Header); //Update the state of the header\r\n\t\tif(!(header === null || header === undefined)) { //If the html exists\r\n\t\t\theader.className = this.classHeader(); //Update the class of the header\r\n\t\t\tif(this.Controls.length > 0) { //If some control exists, they also need to have their state updated. This includes inactivating the title for disabled panels, so the easiest is to prepare the html anew\r\n\t\t\t\theader.innerHTML = this.Label + \"&nbsp;\" + this.appendControls();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\theader.innerHTML = this.Label; //If the panel has changed name, this should also be reflected here\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar content = GetId(this.Anchors.Content); //Update the state of the content\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tif(this.Active) {content.style.display = \"block\"} //Make the content visible / hidden\r\n\t\t\telse {content.style.display = \"none\"}\r\n\t\t}\r\n\t}\r\n\tupdateContent(C) { //Update the content of the Tab with the new one provided, both at the object and html level. This will remove any previous content!\r\n\t\tthis.Content = C;\r\n\t\tvar content = GetId(this.Anchors.Content);\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tcontent.innerHTML = this.initContentInternal();\r\n\t\t}\r\n\t}\r\n\tset(as) { //Set the tab at the desired state(s). Multiple Keywords, space delimited, can be provided\r\n\t\tvar keywords = as.split(\" \"); //Array of keywords\r\n\t\tkeywords.forEach(function(k) { //Loop the keywords\r\n\t\t\tswitch(k) {\r\n\t\t\t\tcase \"Active\":\r\n\t\t\t\t\tthis.Active = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Resting\":\r\n\t\t\t\t\tthis.Active = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Disabled\":\r\n\t\t\t\t\tthis.Disabled = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Enabled\":\r\n\t\t\t\t\tthis.Disabled = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.updateState();\r\n\t\treturn this;\r\n\t}\r\n\tfold() { //Hide or reveal the content for this panel\r\n\t\tvar content = GetId(this.Anchors.Content); //Update the state of the content\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tif(content.style.display == \"none\") {content.style.display = \"block\"} //Make the content visible / hidden\r\n\t\t\telse {content.style.display = \"none\"}\r\n\t\t}\r\n\t}\r\n\tdelete() {\r\n\t\tvar header = GetId(this.Anchors.Header);\r\n\t\tif(!(header === null || header === undefined)) {//Remove the html if it exists\r\n\t\t\tif(this.Parent.Layout == \"Vertical\") {header.nextElementSibling.remove()}\r\n\t\t\theader.remove()\r\n\t\t} \r\n\t\tvar content = GetId(this.Anchors.Content); \r\n\t\tif(!(content === null || content === undefined)) {content.remove()} //Remove the html if it exists\r\n\t}\r\n\trename(name) { //Update the name of the tab using the new text provided\r\n\t\tthis.Label = name; //Update property\r\n\t\tthis.updateState(); //Update display\r\n\t}\r\n}\r\n\r\n\r\n/*\r\nfunction TabPanel(I) {\r\n\tthis.Key = I.Key; //Unique index for the. Note that this is NOT the index in the parent array\r\n\tthis.Parent = I.Parent; //The parent TabControl object\r\n\tthis.Label = (I.Label || \"\"); //Label displayed by the header\r\n\tthis.Active = (I.Active || false); //Whether this panel is active\r\n\tthis.Disabled = (I.Disabled || false); //Whether this panel is disabled\r\n\tthis.Controls = (I.Controls || []); //Controls available for this panel. Possible values are [\"Form\", \"Edit\", \"Move\", \"Delete\"], in whatever order\r\n\tthis.Content = I.Content; //Content to be displayed inside the tab while active. It should be provided as an object with Type and Value properties\r\n\t//Constructor, see also at the end\r\n\tvar root = this.Parent.ID;\r\n\tthis.Anchors = {\r\n\t\tHeader: root + \"_TabHeader_\" + this.Key,\r\n\t\tContent: root + \"_TabContent_\" + this.Key,\r\n\t}\r\n\t//Methods\r\n\tthis.classHeader = function() { //Return a string for the classes that should be applied to the header, given current panel properties\r\n\t\tvar classes = \"LinkCtrl LinkCtrl_RoundT\";\r\n\t\tif(this.Active) {classes += \" LinkCtrl_Active\"} //Active class has priority over the rest\r\n\t\telse {\r\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_Disabled\"}\r\n\t\t\telse {classes += \" LinkCtrl_Resting\"}\r\n\t\t}\r\n\t\treturn classes;\r\n\t}\r\n\tthis.classControl = function() { //Return a string for the classes that should be applied to the control of this header, given current panel properties\r\n\t\tvar classes = \"LinkCtrl_Icon\";\r\n\t\tif(this.Active) {classes += \" LinkCtrl_IconActive\"} //Active class has priority over the rest\r\n\t\telse {\r\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_IconDisabled\"}\r\n\t\t\telse {classes += \" LinkCtrl_IconResting\"}\r\n\t\t}\r\n\t\treturn classes;\r\n\t}\r\n\tthis.initHeader = function() { //Returns the html for this tab header\r\n\t\tvar html = \"<span \";\r\n\t\thtml += \"id=\\\"\" + this.Anchors.Header + \"\\\" \";\r\n\t\thtml += \"class=\\\"\" + this.classHeader() + \"\\\" \";\r\n\t\thtml += \"tabKey=\\\"\" + this.Key + \"\\\" style=\\\"\";\r\n\t\tswitch(this.Parent.Layout) { //Spacing between each header\r\n\t\t\tcase \"Horizontal\": html += \"margin-right: 5px;\"; //Spacing between each header //FALL-THROUGH\r\n\t\t\tdefault: html +=\"font-weight: bold; font-size: 1em\\\"\";\r\n\t\t}\r\n\t\thtml += \">\" + this.Label;\r\n\t\tif(this.Controls.length > 0) {html += \"&nbsp;\" + this.appendControls()} //Add the controls if they are desired\r\n\t\thtml += \"</span>\";\r\n\t\treturn html;\r\n\t}\r\n\tthis.appendControls = function() { //Prepare the html of the controls usable to edit this tab\r\n\t\tvar html = \"\";\r\n\t\tthis.Controls.forEach(function(c) {\r\n\t\t\tvar control = \"<span class=\\\"\" + this.classControl() + \"\\\" tabKey=\\\"\" + this.Key + \"\\\"\";\r\n\t\t\tvar icon = \"\";\r\n\t\t\tvar title = \"\";\r\n\t\t\tswitch(c) {\r\n\t\t\t\tcase \"Form\": \r\n\t\t\t\t\ticon = \"tabAction=\\\"form\\\" style=\\\"background-position: -192px -112px;\\\"\"; //ui-icon-gear\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to edit the tab properties\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Edit\":\r\n\t\t\t\t\ticon = \"tabAction=\\\"edit\\\" style=\\\"background-position: -64px -112px;\\\"\"; //ui-icon-pencil\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to edit the tab properties\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Move\":\r\n\t\t\t\t\ticon = \"tabAction=\\\"move\\\" style=\\\"background-position: 0px -80px;\\\"\"; //ui-icon-arrow-4\r\n\t\t\t\t\ttitle = \" title=\\\"Click here and drag to move this tab at the desired position\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Delete\":\r\n\t\t\t\t\ticon = \" tabAction=\\\"delete\\\" style=\\\"background-position: -176px -96px;\\\"\"; //ui-icon-trash\r\n\t\t\t\t\ttitle = \" title=\\\"Click here to delete this tab\\\"\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t\thtml += control + icon;\r\n\t\t\tif(!this.Disabled) {html += title}\r\n\t\t\thtml += \"></span>\";\r\n\t\t}, this);\r\n\t\treturn html;\r\n\t}\r\n\tthis.initContent = function() { //Return the html for the contents of this tab\r\n\t\tvar html = \"\";\r\n\t\tvar style = \"none\"; //Hide content of inactive tabs\r\n\t\tif(this.Active) {style = \"block\"}\r\n\t\tif(this.Parent.Layout == \"Vertical\") {style += \"; float: left\"}\r\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Content + \"\\\" class=\\\"LinkCtrl_TabPanel\\\" style=\\\"display: \" + style + \"\\\">\";\r\n\t\thtml += this.initContentInternal();\r\n\t\thtml += \"</div>\";\r\n\t\treturn html;\r\n\t}\r\n\tthis.initContentInternal = function() {\r\n\t\tvar c = this.Content;\r\n\t\tif(c === undefined) {return \"\"}\r\n\t\tswitch(c.Type) {\r\n\t\t\tcase \"HTML\": return c.Value; //The content is plain HTML\r\n\t\t\tcase \"DOM\": //The content is written in the DOM, at the provided ID\r\n\t\t\t\tif(c.Value) { //If the ID exists\r\n\t\t\t\t\tvar dom = GetId(c.Value); //Get the DOM element\r\n\t\t\t\t\tif(dom !== null && dom !== undefined) { //If this indeed exists\r\n\t\t\t\t\t\tvar html = dom.innerHTML; //copy the content\r\n\t\t\t\t\t\tthis.Content = {Type: \"HTML\", Value: html} //Update the tab object with its new content\r\n\t\t\t\t\t\tdom.remove(); //Bye bye\r\n\t\t\t\t\t\treturn html; //Output the content\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn \"\"; //Nothing was found at the given location\r\n\t\t\tdefault: return \"\"; //Unknown Type requested\r\n\t\t}\r\n\t}\r\n\tthis.updateState = function() { //Update the state of this tab, based on current properties. This only fully updates the header, content will just be made visible or hidden\r\n\t\tvar header = GetId(this.Anchors.Header); //Update the state of the header\r\n\t\tif(!(header === null || header === undefined)) { //If the html exists\r\n\t\t\theader.className = this.classHeader(); //Update the class of the header\r\n\t\t\tif(this.Controls.length > 0) { //If some control exists, they also need to have their state updated. This includes inactivating the title for disabled panels, so the easiest is to prepare the html anew\r\n\t\t\t\theader.innerHTML = this.Label + \"&nbsp;\" + this.appendControls();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\theader.innerHTML = this.Label; //If the panel has changed name, this should also be reflected here\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar content = GetId(this.Anchors.Content); //Update the state of the content\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tif(this.Active) {content.style.display = \"block\"} //Make the content visible / hidden\r\n\t\t\telse {content.style.display = \"none\"}\r\n\t\t}\r\n\t}\r\n\tthis.updateContent = function(C) { //Update the content of the Tab with the new one provided, both at the object and html level. This will remove any previous content!\r\n\t\tthis.Content = C;\r\n\t\tvar content = GetId(this.Anchors.Content);\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tcontent.innerHTML = this.initContentInternal();\r\n\t\t}\r\n\t}\r\n\tthis.set = function(as) { //Set the tab at the desired state(s). Multiple Keywords, space delimited, can be provided\r\n\t\tvar keywords = as.split(\" \"); //Array of keywords\r\n\t\tkeywords.forEach(function(k) { //Loop the keywords\r\n\t\t\tswitch(k) {\r\n\t\t\t\tcase \"Active\":\r\n\t\t\t\t\tthis.Active = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Resting\":\r\n\t\t\t\t\tthis.Active = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Disabled\":\r\n\t\t\t\t\tthis.Disabled = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"Enabled\":\r\n\t\t\t\t\tthis.Disabled = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault: break;\r\n\t\t\t}\r\n\t\t}, this);\r\n\t\tthis.updateState();\r\n\t\treturn this;\r\n\t}\r\n\tthis.fold = function() { //Hide or reveal the content for this panel\r\n\t\tvar content = GetId(this.Anchors.Content); //Update the state of the content\r\n\t\tif(!(content === null || content === undefined)) { //If the html exists\r\n\t\t\tif(content.style.display == \"none\") {content.style.display = \"block\"} //Make the content visible / hidden\r\n\t\t\telse {content.style.display = \"none\"}\r\n\t\t}\r\n\t}\r\n\tthis.delete = function() {\r\n\t\tvar header = GetId(this.Anchors.Header);\r\n\t\tif(!(header === null || header === undefined)) {//Remove the html if it exists\r\n\t\t\tif(this.Parent.Layout == \"Vertical\") {header.nextElementSibling.remove()}\r\n\t\t\theader.remove()\r\n\t\t} \r\n\t\tvar content = GetId(this.Anchors.Content); \r\n\t\tif(!(content === null || content === undefined)) {content.remove()} //Remove the html if it exists\r\n\t}\r\n\tthis.rename = function(name) { //Update the name of the tab using the new text provided\r\n\t\tthis.Label = name; //Update property\r\n\t\tthis.updateState(); //Update display\r\n\t}\r\n\t//Constructor\r\n\tthis.initContentInternal(); //Initialize the contents. This is in case DOM needs to be copied before being destroyed by autoInit of the parent\r\n}\r\n*/","//////////////////////////////////////////////////////////////////////////////////////////////\r\n// LINKCTRL_CHECKBOX object - Extension of the HTML checkbox for better interaction //////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\nclass LinkCtrl_Checkbox extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Checkbox\";\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tvar val = \"\";\r\n\t\tif(this.Value) {val = \" checked\"}\r\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\tif(this.ControlLeft) { //The control is first, the label after\r\n\t\t\thtml += \"<input type=\\\"checkbox\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_ChkBox\\\"\" + val + \">\";\r\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\r\n\t\t}\r\n\t\telse { //The other way around\r\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\r\n\t\t\thtml += \"<input type=\\\"checkbox\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_ChkBox\\\"\" + val + \">\"; \r\n\t\t}\r\n\t\thtml += \"</label>\"; //Closure of the control\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tGetId(this.Me).children[0].addEventListener(\"click\", function(e) {\r\n\t\t\tvar newVal = e.target.checked;\r\n\t\t\tthis.Value = newVal;\r\n\t\t\tvar DOMlist = e.target.parentElement.classList; //This is not an array but a DOMTokenList, which has its own methods\r\n\t\t\tif(newVal) {DOMlist.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\")}\r\n\t\t\telse {DOMlist.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\")}\r\n\t\t\tthis.change(newVal);\r\n\t\t}.bind(this));\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {\r\n\t\t\tui.children[0].checked = v;\r\n\t\t\tvar DOMlist = ui.classList; //This is not an array but a DOMTokenList, which has its own methods\r\n\t\t\tif(v) {DOMlist.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\")}\r\n\t\t\telse {DOMlist.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\")}\r\n\t\t}\r\n\t}\r\n}","//////////////////////////////////////////////////////////////////////////////////////////////\r\n// LINKCTRL_COLOR object - a custom color input with sets of interaction /////////////////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\nclass LinkCtrl_Color extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Color\";\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\tif(this.ControlLeft) { //The control is first, the label after\r\n\t\t\thtml += \"<span id=\\\"\" + this.Control + \"\\\" class=\\\"LinkCtrl_Color\\\" title=\\\"\" + this.Title + \"\\\" style=\\\"background-color: \" + this.Value + \"\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\"; //4 spaces, to get the color box wide enough\r\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\r\n\t\t}\r\n\t\telse { //The other way around\r\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\r\n\t\t\thtml += \"<span id=\\\"\" + this.Control + \"\\\" class=\\\"LinkCtrl_Color\\\" title=\\\"\" + this.Title + \"\\\" style=\\\"background-color: \" + this.Value + \"\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\"; //4 spaces, to get the color box wide enough\r\n\t\t}\r\n\t\thtml += \"</label>\"; //Closure of the control\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tGetId(this.Me).addEventListener(\"click\", function(e) {\r\n\t\t\tForm_Color({\r\n\t\t\t\tCaller: this,\r\n\t\t\t\tafter: this.change,\r\n\t\t\t});\r\n\t\t}.bind(this));\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {ui.children[0].style.backgroundColor = v}\r\n\t}\r\n}","//*******************************************************************************\r\n// LINKCTRL_FILE object - Extension of the HTML file input for better interaction\r\n//*******************************************************************************\r\nclass LinkCtrl_File extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"File\";\r\n\t\tthis.Multiple = I.Multiple; //Whether multiple files are accepted\r\n\t\tthis.Accept = I.Accept; //What file type should be accepted. Provided as a string without space, as in the accept attribute of the html file input (.xxx,.xxx)\r\n\t\tthis.DragMsg = \"Drag and drop your files here\"; //Default message to display in the drop box\r\n\t\treturn this;\r\n\t}\r\n\t//Static Methods\r\n\tstatic dropMsg(msg) { //return the html for the msg to display as inner content of the drop box\r\n\t\treturn \"<div class=\\\"LinkCtrl_FileDropInner\\\" ondragenter=\\\"event.target.remove()\\\">\" + msg + \"</div>\";\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tlet html = \"\";\r\n\t\thtml += \"<span title=\\\"Reset the file selection\\\" class=\\\"LinkCtrl LinkCtrl_Round LinkCtrl_Resting\\\">Clear</span>&nbsp;\";\r\n\t\thtml += \"<span id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\thtml += \"Browse...\" //Add the label\r\n\t\tlet multiple = \"\";\r\n\t\tif(this.Multiple) {multiple = \"multiple\"}\r\n\t\tlet accept = \"\";\r\n\t\tif(this.Accept) {accept = \" accept=\" + this.Accept}\r\n\t\thtml += \"<input type=\\\"file\\\" id=\\\"\" + this.Control + \"\\\" style=\\\"display: none\\\" \" + multiple + accept + \">\"; //hidden input\r\n\t\thtml += \"</span>\"; //Closure of the control\r\n\t\thtml += this.fileInfo();\r\n\t\t\r\n\t\thtml += \"<div class=\\\"LinkCtrl_FileDrop\\\">\" + LinkCtrl_File.dropMsg(this.DragMsg) + \"</div>\";\r\n\t\t\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tlet root = GetId(this.Me); //The hosting span for the control\r\n\t\tlet input = root.children[0]; //The hidden input\r\n\t\tlet clear = root.previousElementSibling; //The clear button\r\n\t\troot.addEventListener(\"click\", function() {input.click()}); //Activate the file:input button to open the file selection browsing window)\r\n\t\tinput.addEventListener(\"change\", function() {\r\n\t\t\tthis.Value = input.files;\r\n\t\t\troot.nextElementSibling.remove(); //The following span is removed and replaced with an updated one\r\n\t\t\troot.insertAdjacentHTML(\"afterend\", this.fileInfo());\r\n\t\t\tthis.change(input.files);\r\n\t\t}.bind(this));\r\n\t\tclear.addEventListener(\"click\", function() {\r\n\t\t\tthis.Value = [];\r\n\t\t\troot.nextElementSibling.remove(); //The following span is removed and replaced with an updated one\r\n\t\t\troot.insertAdjacentHTML(\"afterend\", this.fileInfo());\r\n\t\t\tthis.change();\r\n\t\t}.bind(this));\r\n\t\tlet drop = root.nextElementSibling.nextElementSibling; //The drop box\r\n\t\tdrop.addEventListener(\"dragenter\", function(e) {\r\n\t\t\te.target.className = \"LinkCtrl_FileDropHover LinkCtrl_FileDrop\";\r\n\t\t\te.target.innerHTML = \"\";\r\n\t\t\te.preventDefault();\r\n\t\t});\r\n\t\tdrop.addEventListener(\"dragleave\", function(e) {\r\n\t\t\te.target.className = \"LinkCtrl_FileDrop\";\r\n\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(this.DragMsg) ;\r\n\t\t\te.preventDefault();\r\n\t\t}.bind(this));\r\n\t\tdrop.addEventListener(\"dragover\", function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t});\r\n\t\tdrop.addEventListener(\"drop\", function(e) {\r\n\t\t\te.preventDefault();\r\n\t\t\te.target.className = \"LinkCtrl_FileDrop\";\r\n\t\t\tlet files = e.dataTransfer.files;\r\n\t\t\tlet l = files.length;\r\n\t\t\tlet valid = [];\r\n\t\t\tlet formatSupported = this.Accept.split(\",\"); //Generate an array of accepted formats\r\n\t\t\tfor(let i=0; i<l; i++) { //Loop the incoming files\r\n\t\t\t\tformatSupported.forEach(function(format) {\r\n\t\t\t\t\tif(files[i].name.endsWith(format)) {valid.push(files[i])} //Select only the files with supported format\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tlet v = valid.length;\r\n\t\t\tlet msg = \"\";\r\n\t\t\tif(v == 0) {\r\n\t\t\t\tmsg = \"No valid files found. Supported formats: \" + this.Accept;\r\n\t\t\t\tthis.setValue([]);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet diff = l - valid.length; //Number of rejected files\r\n\t\t\t\tif(diff > 0) { //At least one file rejected\r\n\t\t\t\t\tif(diff > 1) {msg = diff + \" files with unauthorized format were rejected\"}\r\n\t\t\t\t\telse {msg = \"A file with unauthorized format was rejected\"}\r\n\t\t\t\t}\r\n\t\t\t\tif(this.Multiple == true) {this.setValue(valid)} //Multiple files allowed\r\n\t\t\t\telse { //Single file allowed\r\n\t\t\t\t\tif(valid.length > 1) {\r\n\t\t\t\t\t\tif(msg.length > 0) {msg += \".<br>\"}\r\n\t\t\t\t\t\tmsg += \"Only one file allowed! The first valid file was added\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setValue([valid[0]]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(msg.length > 0) {\r\n\t\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(msg) ;\r\n\t\t\t\te.target.className = \"LinkCtrl_FileDrop LinkCtrl_FileDropError\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(this.DragMsg) ;\r\n\t\t\t\te.target.className = \"LinkCtrl_FileDrop\";\r\n\t\t\t}\r\n\t\t}.bind(this));\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element. Note that this couldn't be tested properly (FileList object makes trouble)\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {\r\n\t\t\t//ui.children[0].value = v; //The value of the hidden input is updated\r\n\t\t\tui.nextElementSibling.remove();\r\n\t\t\tui.insertAdjacentHTML(\"afterend\", this.fileInfo());\r\n\t\t}\r\n\t}\r\n\tfileInfo() { //Returns an html string indicating the file(s) selected\r\n\t\tlet html = \"<span\"; //Area to display the file selected\r\n\t\tlet v = this.Value; //Array of selected files\r\n\t\tlet l = v.length;\r\n\t\tif(l == 0) {return html + \" style=\\\"color: salmon;\\\">&nbsp;No files selected</span>\"} //No files selected, exit here\r\n\t\tif(l == 1) {html += \">&nbsp;\" + v[0].name} //Only one file: display the full name\r\n\t\telse { //Multiple files: display the number of files selected, the details go into the title attribute\r\n\t\t\tlet title = \" title=\\\"\";\r\n\t\t\tfor(let i=0;i<l;i++) { //FileCollection has no forEach available\r\n\t\t\t\tif(i>0) {title += \", \"}\r\n\t\t\t\ttitle += v[i].name;\r\n\t\t\t}\r\n\t\t\thtml += title + \"\\\">&nbsp;\" + l + \" Files selected.\";\r\n\t\t}\r\n\t\thtml += \"</span>\";\r\n\t\treturn html;\r\n\t}\r\n}","//************************************************************************************\r\n// LINKCTRL_NUMBER object - Extension of the HTML5 number input for better interaction\r\n//************************************************************************************\r\nclass LinkCtrl_Number extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Number\";\r\n\t\tthis.Size = (I.Size || 5); //Size of the control\r\n\t\tthis.Min = (I.Min || -Infinity); //Minimum value accepted\r\n\t\tthis.Max = (I.Max || Infinity); //Maximum value accepted\r\n\t\tthis.Step = (I.Step || \"any\"); //How much to increment between each step\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\tif(this.ControlLeft) { //The control is first, the label after\r\n\t\t\thtml += this.htmlInput(); //Add the input\r\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\r\n\t\t}\r\n\t\telse { //The other way around\r\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\r\n\t\t\thtml += this.htmlInput(); //Add the input\r\n\t\t}\r\n\t\thtml += \"</label>\"; //Closure of the control\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\thtmlInput() { //Html for the input per se\r\n\t\tvar html = \"<input type=\\\"number\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Number\\\" value=\\\"\" + this.Value + \"\\\" style=\\\"width: \" + this.Size + \"em\\\"\";\r\n\t\tif(this.Min !== undefined) {html += \" min=\\\"\" + this.Min + \"\\\"\"} //Need to pass the test when min/max = 0, \r\n\t\tif(this.Max !== undefined) {html += \" max=\\\"\" + this.Max + \"\\\"\"} //\r\n\t\tif(this.Disabled) {html += \" disabled\"}\r\n\t\thtml += \" step=\\\"\" + this.Step + \"\\\">\";\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tGetId(this.Me).children[0].addEventListener(\"change\", function(e) {\r\n\t\t\tlet t = e.target;\r\n\t\t\tvar newVal = Number(t.value);\r\n\t\t\tlet error = false;\r\n\t\t\tif(newVal > this.Max) {newVal = this.Max; error = true} //Adjust the value to fit within the Min/Max\r\n\t\t\tif(newVal < this.Min) {newVal = this.Min; error = true} //\r\n\t\t\tif(error) {t.style.color = \"red\"}\r\n\t\t\telse {t.style.color = \"black\"}\r\n\t\t\tt.value = newVal;\r\n\t\t\tthis.Value = newVal;\r\n\t\t\tthis.change(newVal);\r\n\t\t}.bind(this));\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\r\n\t\tlet val = Number(v);\r\n\t\tif(val > this.Max) {val = this.Max}\r\n\t\tif(val < this.Min) {val = this.Min}\r\n\t\tthis.Value = val;\r\n\t\tif(ui) {ui.children[0].value = val}\r\n\t}\r\n\tsetMin(min) { //Update the minimum accepted for this control\r\n\t\tthis.Min = min;\r\n\t\tif(this.Value < min) {this.setValue(min)}\r\n\t\tlet me = GetId(this.Control);\r\n\t\tif(me) {me.min = min}\r\n\t\treturn this;\r\n\t}\r\n\tsetMax(max) { //Update the maximum accepted for this control\r\n\t\tthis.Max = max;\r\n\t\tif(this.Value > max) {this.setValue(max)}\r\n\t\tlet me = GetId(this.Control);\r\n\t\tif(me) {me.max = max}\r\n\t\treturn this;\r\n\t}\r\n\tdisable() { //Disable the control\r\n\t\tthis.Disabled = true;\r\n\t\tlet me = GetId(this.Me);\r\n\t\tif(me) {\r\n\t\t\tme.children[0].disabled = true;\r\n\t\t\tme.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Disabled\");\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tenable() { //Enable the control\r\n\t\tthis.Disabled = false;\r\n\t\tlet me = GetId(this.Me);\r\n\t\tif(me) {\r\n\t\t\tme.children[0].disabled = false;\r\n\t\t\tme.classList.replace(\"LinkCtrl_Disabled\", \"LinkCtrl_Resting\");\r\n\t\t}\r\n\t}\r\n}","//////////////////////////////////////////////////////////////////////////////////////////////\r\n// LINKCTRL_RADIO object - Extension of the HTML radio input for better interaction //////////\r\n//////////////////////////////////////////////////////////////////////////////////////////////\r\nclass LinkCtrl_Radio extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Radio\";\r\n\t\tthis.List = (I.List || []);\r\n\t\treturn this;\r\n\t}\r\n\t//Getter\r\n\tget Selected() { //Return the name of the selected item; use .Value to get its index\r\n\t\treturn this.List[this.Value];\r\n\t}\r\n\t//Methods\r\n\thtml() {\r\n\t\tlet html = \"<span id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\">\"; //Wrapper\r\n\t\tlet label = this.HasLabel;\r\n\t\tif(label) {html += \"<span class=\\\"LinkCtrl\" + this.getClass({LeftOnly: true}) + \"\\\">\" + this.Label + \"</span>\"}\r\n\t\tthis.List.forEach(function(l, i) {\r\n\t\t\tlet checked = \"\";\r\n\t\t\tif(this.Value == i) {checked = \"checked\"} //Active choice\r\n\t\t\thtml += \"<label for=\\\"\" + this.Control + \"_\" + i + \"\\\" class=\\\"LinkCtrl\" + this.classes(i, label) + \"\\\">\"; //Opening the label\r\n\t\t\tif(this.ControlLeft) { //Input first, then label\r\n\t\t\t\thtml += \"<input type=\\\"radio\\\" id=\\\"\" + this.Control + \"_\" + i + \"\\\" name=\\\"\" + this.Control + \"\\\" \" + checked + \" itemNb=\\\"\" + i + \"\\\">\";\r\n\t\t\t\thtml += l;\r\n\t\t\t}\r\n\t\t\telse { //The other way around\r\n\t\t\t\thtml += l;\r\n\t\t\t\thtml += \"<input type=\\\"radio\\\" id=\\\"\" + this.Control + \"_\" + i + \"\\\" name=\\\"\" + this.Control + \"\\\" \" + checked + \" itemNb=\\\"\" + i + \"\\\">\";\r\n\t\t\t}\r\n\t\t\thtml += \"</label>\"; //Closing the label\r\n\t\t}, this);\r\n\t\thtml += \"</span>\";\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tlet labels = GetId(this.Me).children; //Note that this is an HTML collection, not an array\r\n\t\tlet l = labels.length;\r\n\t\tlet start = 0;\r\n\t\tlet i = 0;\r\n\t\tif(this.HasLabel) { //The first span will allow cycling between the values when clicked\r\n\t\t\tlabels[0].addEventListener(\"click\", function(e) {\r\n\t\t\t\tlet l = this.List.length;\r\n\t\t\t\tlet newValue = this.Value + 1;\r\n\t\t\t\tif(newValue < l) {this.setValue(newValue).change(newValue)}\r\n\t\t\t\telse {this.setValue(0).change(0)}\r\n\t\t\t}.bind(this));\r\n\t\t\ti++;\r\n\t\t} \r\n\t\twhile(i<l) {\r\n\t\t\tlabels.item(i).children[0].addEventListener(\"click\", function(e) {\r\n\t\t\t\tlet selected = Number(e.target.getAttribute(\"itemNb\"));\r\n\t\t\t\tthis.updateValue(selected, e.target.parentElement.parentElement);\r\n\t\t\t\tthis.change(selected);\r\n\t\t\t}.bind(this));\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\r\n\t\tlet index = Number(v);\r\n\t\tif(isNaN(index) || index < 0 || index >= this.List.length) {console.warn(\"Could not update Radio control with the value given (\" + index + \")\"); return} //If the value provided is fucked up, alert and exit\r\n\t\tif(ui) {\r\n\t\t\tlet label = ui.children.item(index); //The label for the element to select\r\n\t\t\tif(this.HasLabel) {label = ui.children.item(index + 1)} //Ignore the header\r\n\t\t\tif(label) {\r\n\t\t\t\tlet oldLabel = ui.children.item(this.Value);\r\n\t\t\t\tif(this.HasLabel) {oldLabel = ui.children.item(this.Value + 1)}\r\n\t\t\t\tif(oldLabel) { //May happen that nothing is selected, depending on the value passed at creation of the control\r\n\t\t\t\t\toldLabel.children[0].checked = false;\r\n\t\t\t\t\toldLabel.classList.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\");\r\n\t\t\t\t}\r\n\t\t\t\tlabel.children[0].checked = true;\r\n\t\t\t\tlabel.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.Value = index;\r\n\t}\r\n\tclasses(i, label) { //Returns a text representing the classes to be added to the label hosting the control at index i.\r\n\t\tlet txt = \" LinkCtrl_Resting\";\r\n\t\tif(this.Value == i) { //Active choice\r\n\t\t\ttxt = \" LinkCtrl_Active\";\r\n\t\t}\r\n\t\tif(i == 0 && label == false) {txt += \" LinkCtrl_RoundL\"} //First choice with no label\r\n\t\tif(i == this.List.length - 1) {txt += \" LinkCtrl_RoundR\"} //last choice\r\n\t\treturn txt;\r\n\t}\r\n}","//***********************************************************************************\r\n// LINKCTRL_SELECT object - Extension of the HTML select input for better interaction\r\n//***********************************************************************************\r\nclass LinkCtrl_Select extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Select\";\r\n\t\tthis.List = (I.List || []); //List of available options in the select element\r\n\t\tthis.NavBar = I.NavBar; //Whether to add navBar elements to this select\r\n\t\tif(I.Lookup) {\r\n\t\t\tthis.Lookup = {Active: false, Query: \"\", Values: [], LastVisited: 0}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t//Getter\r\n\tget Selected() { //Return the name of the selected item; use .getValue() to get its index\r\n\t\treturn this.List[this.Value];\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tlet html = \"\";\r\n\t\tif(this.NavBar) { //Add navigation elements\r\n\t\t\tlet middle = this.getClass({ForceMiddle: true});\r\n\t\t\thtml += \"<span style=\\\"white-space: pre\\\">\"; //Wrapping span\r\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + this.getClass({LeftOnly: true}) + \"\\\" title=\\\"Move to the first element\\\" style=\\\"padding: 0.5em 0.2em;\\\">\" + LinkCtrl.icon({Type: \"First\"}) + \"</span>\"; //First element\r\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + middle + \"\\\" title=\\\"Move one element backward\\\" style=\\\"border-right: none; border-left: none; padding: 0.5em 0.2em;\\\">\" + LinkCtrl.icon({Type: \"Left\"}) + \"</span>\"; //Go one before\r\n\t\t\t\thtml += \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + middle + \"\\\">\"; //Opening label for the control\r\n\t\t\t\thtml += this.htmlInternal(); //Select element\r\n\t\t\t\thtml += \"</label>\"; //Closure of the control\r\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + middle + \"\\\" title=\\\"Move one element forward\\\" style=\\\"border-right: none; border-left: none; padding: 0.5em 0.2em\\\">\" + LinkCtrl.icon({Type: \"Right\"}) + \"</span>\"; //Go one after\r\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + this.getClass({RightOnly: true}) + \"\\\" title=\\\"Move to the last element\\\" style=\\\"padding: 0.5em 0.2em\\\">\" + LinkCtrl.icon({Type: \"Last\"}) + \"</span>\"; //Last element\r\n\t\t\thtml += \"</span>\"; //Closure of the wrapping span\r\n\t\t}\r\n\t\telse {\r\n\t\t\thtml += \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\t\thtml += this.htmlInternal();\r\n\t\t\thtml += \"</label>\"; //Closure of the control\r\n\t\t}\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\thtmlInternal() { //The html of the elements within the label. This subfunction is useful here when calling an update of the List within the select\r\n\t\tlet html = \"\";\r\n\t\tif(this.ControlLeft) { //The control is first, the label after\r\n\t\t\thtml += this.htmlInput(); //Add the input\r\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\r\n\t\t}\r\n\t\telse { //The other way around\r\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\r\n\t\t\thtml += this.htmlInput(); //Add the input\r\n\t\t}\r\n\t\tif(this.Lookup) {html += this.htmlLookup()} //Append elements enabling value lookup in the list\r\n\t\treturn html;\r\n\t}\r\n\thtmlInput() { //Html for the input per se\r\n\t\tlet html = \"<select id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Select\\\">\";\r\n\t\thtml += this.htmlOptions();\r\n\t\thtml += \"</select>\";\r\n\t\treturn html;\r\n\t}\r\n\thtmlLookup() { //Html for the lookup icon and element\r\n\t\tlet html = LinkCtrl.icon({Type: \"Zoom\", Title: \"Click here to search values in the list\", Active: false, Space: true});\r\n\t\thtml += \"<div class=\\\"LinkCtrl_SelectLookup\\\" style=\\\"display: none\\\">\";\r\n\t\t\thtml += \"<input type=\\\"text\\\" size=\\\"15\\\" title=\\\"Type your search here and press enter to navigate the results\\\">\"; //Text area for the search\r\n\t\t\thtml += \"<div style=\\\"line-height: normal; color: black\\\"></div>\"; //output for the result\r\n\t\thtml += \"</div>\";\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents(I) { //Bind the events to the control\r\n\t\tlet me = GetId(this.Me);\r\n\t\tlet select = me.children[0];\r\n\t\tselect.addEventListener(\"change\", function(e) {\r\n\t\t\tvar newVal = e.target.selectedIndex;\r\n\t\t\tthis.Value = newVal;\r\n\t\t\tthis.change(newVal);\r\n\t\t}.bind(this));\r\n\t\tif(this.Lookup) { //Below events are for the lookup items\r\n\t\t\tlet lookup = me.children[1];\r\n\t\t\tlet div = me.children[2];\r\n\t\t\tlet text = div.children[0];\r\n\t\t\tlet out = div.children[1];\r\n\t\t\tlet timeout = undefined;\r\n\t\t\tlookup.addEventListener(\"click\", function(e) { //Handle for the visibility of the search bar\r\n\t\t\t\tlet s = div.style;\r\n\t\t\t\tif(this.Lookup.Active == false) { //Make div visible\r\n\t\t\t\t\tlookup.classList.replace(\"LinkCtrl_IconResting\", \"LinkCtrl_IconActive\"); //Other classes must be maintained, so replace is required\r\n\t\t\t\t\tme.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\");\r\n\t\t\t\t\ts.display = \"block\";\r\n\t\t\t\t\ts.left = (lookup.offsetLeft - 20) + \"px\";\r\n\t\t\t\t\tthis.Lookup = {Active: true, Values: [], LastVisited: 0, Query: \"\"}\r\n//**********************************************************************************************\r\n//We need to wait until the function has run and the browser updated the visibility of the input\r\n//before trying to set the focus, otherwise it will happen on an invisible element and fail...\r\n\t\t\t\t\twindow.setTimeout(function() {text.focus()}, 0);\r\n//**********************************************************************************************\r\n\t\t\t\t}\r\n\t\t\t\telse { //Hide the div\r\n\t\t\t\t\tthis.Lookup.Active = false;\r\n\t\t\t\t\ts.display = \"none\";\r\n\t\t\t\t\tlookup.classList.replace(\"LinkCtrl_IconActive\", \"LinkCtrl_IconResting\"); //Other classes must be maintained, so replace is required\r\n\t\t\t\t\tme.classList.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\");\r\n\t\t\t\t\ttext.value = \"\";    //Reset the fields\r\n\t\t\t\t\tout.innerHTML = \"\"; //\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t\ttext.addEventListener(\"keyup\", function(e) { //Handle for the lookup\r\n\t\t\t\tlet LU = this.Lookup;\r\n\t\t\t\tlet query = text.value;\r\n\t\t\t\tif(query == \"\") {out.innerHTML = \"\"; return} //No query, do nothing\r\n\t\t\t\tif(e.key == \"Enter\") { //Reaction when the user press enter\r\n\t\t\t\t\tif(LU.Values.length == 0) {out.innerHTML = \"\"; return} //No values, do nothing\r\n\t\t\t\t\telse { //loop through the results\r\n\t\t\t\t\t\tlet item = LU.Values[LU.LastVisited]\r\n\t\t\t\t\t\tthis.setValue(item).change(item);\r\n\t\t\t\t\t\tLU.LastVisited++; //Move to the next\r\n\t\t\t\t\t\tif(LU.LastVisited == LU.Values.length) {LU.LastVisited = 0} //Restart looping from the beginning\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse { //The user is typing, update the element after a short timeout, to prevent overflow\r\n\t\t\t\t\tLU.Query = query;\r\n\t\t\t\t\tlet p = new Promise(function(resolve) { //A promise that will resolve when the search is complete\r\n\t\t\t\t\t\tlet result = [];\r\n\t\t\t\t\t\tlet RG = new RegExp(query, \"i\"); //Case insensitive search\r\n\t\t\t\t\t\tthis.List.forEach(function(l, i) {\r\n\t\t\t\t\t\t\tif(RG.test(l)) {result.push(i)}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t}.bind(this));\r\n\t\t\t\t\tif(timeout) {clearTimeout(timeout)}\r\n\t\t\t\t\ttimeout = setTimeout(function() {\r\n\t\t\t\t\t\tout.innerHTML = \"Searching...\"; //Reset the field\r\n\t\t\t\t\t\tp.then(function(result) { //Wait for the promise and display the result\r\n\t\t\t\t\t\t\tLU.Values = result;\r\n\t\t\t\t\t\t\tLU.LastVisited = 0;\r\n\t\t\t\t\t\t\tlet l = result.length;\r\n\t\t\t\t\t\t\tlet msg = \"\";\r\n\t\t\t\t\t\t\tswitch(l) {\r\n\t\t\t\t\t\t\t\tcase 0: msg = \"No match!\"; break;\r\n\t\t\t\t\t\t\t\tcase 1: msg = \"Found 1 match\"; break;\r\n\t\t\t\t\t\t\t\tdefault: msg = \"Found \" + l + \" matches\"; break;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(text.value == query) {out.innerHTML = msg} //Only write if the result corresponds to the initial query\r\n\t\t\t\t\t\t\telse { //Additional protection to remove the 'searching' message if there are no query left\r\n\t\t\t\t\t\t\t\tif(text.value == \"\") {out.innerHTML = \"\"}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}, 200); //Short time out\r\n\t\t\t\t}\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t\tif(this.NavBar) { //Bind events to the navbar elements\r\n\t\t\tlet back = me.previousSibling;\r\n\t\t\tlet first = back.previousSibling;\r\n\t\t\tlet next = me.nextSibling;\r\n\t\t\tlet last = next.nextSibling;\r\n\t\t\tfirst.addEventListener(\"click\", function(e) {this.setValue(0).change(0)}.bind(this));\r\n\t\t\tlast.addEventListener(\"click\", function(e) {\r\n\t\t\t\tlet l = this.List.length - 1;\r\n\t\t\t\tthis.setValue(l).change(l);\r\n\t\t\t}.bind(this));\r\n\t\t\tnext.addEventListener(\"click\", function(e) {\r\n\t\t\t\tlet l = this.List.length - 1;\r\n\t\t\t\tlet v = this.Value;\r\n\t\t\t\tif(v < l) {this.setValue(v + 1).change(v + 1)}\r\n\t\t\t}.bind(this));\r\n\t\t\tback.addEventListener(\"click\", function(e) {\r\n\t\t\t\tlet v = this.Value;\r\n\t\t\t\tif(v > 0) {this.setValue(v - 1).change(v - 1)}\r\n\t\t\t}.bind(this));\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {ui.children[0].selectedIndex = v}\r\n\t\treturn this;\r\n\t}\r\n\thtmlOptions() { //Returns an html string to populate a select control with available elements in the list\r\n\t\tvar html = \"\";\r\n\t\tvar selected = \"\";\r\n\t\tthis.List.forEach(function(a, i) {\r\n\t\t\tif(i == this.Value) {selected = \"selected\"}\r\n\t\t\telse {selected = \"\"}\r\n\t\t\thtml += \"<option value=\\\"\" + i + \"\\\" \" + selected + \">\" + a + \"</option>\";\r\n\t\t}, this);\r\n\t\treturn html;\r\n\t}\r\n\tupdateList(list) { //Update the control with a new list provided in input as an array\r\n\t\tthis.List = list;\r\n\t\tif(this.Value >= list.length) {this.Value = list.length - 1} //Less items than before, rebase to be at the highest possible\r\n\t\tlet select = GetId(this.Control);\r\n\t\tif(select === null) {return this} //No control on the page means no html to update\r\n\t\tselect.innerHTML = this.htmlOptions(); //Re-create the html using the updated list\r\n\t\treturn this;\r\n\t}\r\n\tdisable() { //Disable the select\r\n\t\tvar me = GetId(this.Me);\r\n\t\tif(me === null) {return this} //No control on the page means nothing else to update\r\n\t\tme.children[0].disabled = true;\r\n\t\tif(this.NavBar) {\r\n\t\t\t//Disable NavBar elements\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}","//*******************************************************************************\r\n// LINKCTRL_TEXT object - Extension of the HTML text input for better interaction\r\n//*******************************************************************************\r\nclass LinkCtrl_Text extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"Text\";\r\n\t\tthis.Size = (I.Size || 12);\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\r\n\t\tif(this.ControlLeft) { //The control is first, the label after\r\n\t\t\thtml += \"<input type=\\\"text\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Text\\\" value=\\\"\" + this.Value + \"\\\" size=\\\"\" + this.Size + \"\\\">\";\r\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\r\n\t\t}\r\n\t\telse { //The other way around\r\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\r\n\t\t\thtml += \"<input type=\\\"text\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Text\\\" value=\\\"\" + this.Value + \"\\\" size=\\\"\" + this.Size + \"\\\">\";\r\n\t\t}\r\n\t\thtml += \"</label>\"; //Closure of the control\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tGetId(this.Me).children[0].addEventListener(\"change\", function(e) {\r\n\t\t\tvar newVal = e.target.value;\r\n\t\t\tthis.Value = newVal;\r\n\t\t\tthis.change(newVal);\r\n\t\t}.bind(this));\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the jquery of the hosting element\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {ui.children[0].value = v}\r\n\t}\r\n}","//***************************************************************************************\r\n// LINKCTRL_TEXTAREA object - Extension of the HTML textarea input for better interaction\r\n//***************************************************************************************\r\nclass LinkCtrl_TextArea extends LinkCtrl {\r\n\tconstructor(I) {\r\n\t\tsuper(I); //Call the super class constructor and pass in the input object\r\n\t\tthis.Type = \"TextArea\";\r\n\t\treturn this;\r\n\t}\r\n\t//Methods\r\n\thtml() { //Initialize the html for the control\r\n\t\tlet html = \"<textarea id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Round LinkCtrl_TextArea\";\r\n\t\tif(this.Disabled) {html += \" LinkCtrl_TextAreaDisabled\\\"\"}\r\n\t\telse {html += \" LinkCtrl_TextAreaEnabled\\\"\"}\r\n\t\tif(this.Disabled) {html += \" disabled\"}\r\n\t\thtml += \" value=\\\"\" + this.Value + \"\\\">\" + this.Value + \"</textarea>\"; //For textarea, default value on init should be within the node\r\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\r\n\t\treturn html;\r\n\t}\r\n\tbindEvents() { //Bind the events to the control\r\n\t\tGetId(this.Me).addEventListener(\"change\", function(e) {\r\n\t\t\tvar newVal = e.target.value;\r\n\t\t\tthis.Value = newVal;\r\n\t\t\tthis.change(newVal);\r\n\t\t}.bind(this));\r\n\t\treturn this;\r\n\t}\r\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the jquery of the hosting element\r\n\t\tthis.Value = v;\r\n\t\tif(ui) {ui.value = v}\r\n\t\treturn this;\r\n\t}\r\n\tdisable() { //Disable the textarea\r\n\t\tlet me = GetId(this.Me);\r\n\t\tif(me) {\r\n\t\t\tme.disabled = true;\r\n\t\t\tme.classList.replace(\"LinkCtrl_TextAreaEnabled\", \"LinkCtrl_TextAreaDisabled\");\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}"]}